

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Mar 02 13:31:03 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F2520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    34  0000                     
    35                           ; Version 2.20
    36                           ; Generated 12/02/2020 GMT
    37                           ; 
    38                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F2520 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     
    70                           	psect	smallconst
    71  000600                     __psmallconst:
    72                           	callstack 0
    73  000600  00                 	db	0
    74  000601                     _dpowers:
    75                           	callstack 0
    76  000601  0001               	dw	1
    77  000603  000A               	dw	10
    78  000605  0064               	dw	100
    79  000607  03E8               	dw	1000
    80  000609  2710               	dw	10000
    81  00060B                     __end_of_dpowers:
    82                           	callstack 0
    83  0000                     _PIR2bits	set	4001
    84  0000                     _EECON1	set	4006
    85  0000                     _EECON2	set	4007
    86  0000                     _EEDATA	set	4008
    87  0000                     _EECON1bits	set	4006
    88  0000                     _EEADR	set	4009
    89  0000                     _SSPCON2bits	set	4037
    90  0000                     _PIR1bits	set	3998
    91  0000                     _T1CONbits	set	4045
    92  0000                     _TMR1L	set	4046
    93  0000                     _TMR1H	set	4047
    94  0000                     _SSPBUF	set	4041
    95  0000                     _SSPCON2	set	4037
    96  0000                     _SSPSTAT	set	4039
    97  0000                     _SSPCON1bits	set	4038
    98  0000                     _SSPADD	set	4040
    99  0000                     _ADRESL	set	4035
   100  0000                     _ADRESH	set	4036
   101  0000                     _ADCON0bits	set	4034
   102  0000                     _ADCON2bits	set	4032
   103  0000                     _ADCON1bits	set	4033
   104  0000                     _RCREG	set	4014
   105  0000                     _TXREG	set	4013
   106  0000                     _SPBRG	set	4015
   107  0000                     _SPBRGH	set	4016
   108  0000                     _RCSTAbits	set	4011
   109  0000                     _BAUDCONbits	set	4024
   110  0000                     _TXSTAbits	set	4012
   111  0000                     _INTCONbits	set	4082
   112  0000                     _OSCCONbits	set	4051
   113  0000                     _ACKEN	set	32300
   114  0000                     _ACKDT	set	32301
   115  0000                     _RCEN	set	32299
   116  0000                     _PEN	set	32298
   117  0000                     _RSEN	set	32297
   118  0000                     _SEN	set	32296
   119  0000                     _SSPIF	set	31987
   120  0000                     _TRISC4	set	31908
   121  0000                     _TRISC3	set	31907
   122  0000                     _TRISA2	set	31890
   123  0000                     _TRISA1	set	31889
   124  0000                     _RCIF	set	31989
   125  0000                     _LATA6	set	31822
   126  0000                     _LATA5	set	31821
   127  0000                     _LATA4	set	31820
   128  0000                     _TXIF	set	31988
   129  0000                     _TRISB0	set	31896
   130  0000                     _TRISB1	set	31897
   131  0000                     _IPEN	set	32391
   132  0000                     _TRISC7	set	31911
   133  0000                     _TRISC6	set	31910
   134  00060B                     STR_3:
   135  00060B  45                 	db	69	;'E'
   136  00060C  45                 	db	69	;'E'
   137  00060D  50                 	db	80	;'P'
   138  00060E  52                 	db	82	;'R'
   139  00060F  4F                 	db	79	;'O'
   140  000610  4D                 	db	77	;'M'
   141  000611  3A                 	db	58	;':'
   142  000612  20                 	db	32
   143  000613  25                 	db	37
   144  000614  75                 	db	117	;'u'
   145  000615  0A                 	db	10
   146  000616  00                 	db	0
   147  000617                     STR_2:
   148  000617  48                 	db	72	;'H'
   149  000618  55                 	db	85	;'U'
   150  000619  4D                 	db	77	;'M'
   151  00061A  49                 	db	73	;'I'
   152  00061B  44                 	db	68	;'D'
   153  00061C  3A                 	db	58	;':'
   154  00061D  20                 	db	32
   155  00061E  25                 	db	37
   156  00061F  75                 	db	117	;'u'
   157  000620  0A                 	db	10
   158  000621  00                 	db	0
   159  000622                     STR_1:
   160  000622  54                 	db	84	;'T'
   161  000623  45                 	db	69	;'E'
   162  000624  4D                 	db	77	;'M'
   163  000625  50                 	db	80	;'P'
   164  000626  3A                 	db	58	;':'
   165  000627  20                 	db	32
   166  000628  25                 	db	37
   167  000629  75                 	db	117	;'u'
   168  00062A  0A                 	db	10
   169  00062B  00                 	db	0
   170  00062C  00                 	db	0	; dummy byte at the end
   171  0000                     
   172                           ; #config settings
   173                           
   174                           	psect	cinit
   175  000B38                     __pcinit:
   176                           	callstack 0
   177  000B38                     start_initialization:
   178                           	callstack 0
   179  000B38                     __initialization:
   180                           	callstack 0
   181                           
   182                           ; Clear objects allocated to COMRAM (14 bytes)
   183  000B38  EE00  F052         	lfsr	0,__pbssCOMRAM
   184  000B3C  0E0E               	movlw	14
   185  000B3E                     clear_0:
   186  000B3E  6AEE               	clrf	postinc0,c
   187  000B40  06E8               	decf	wreg,f,c
   188  000B42  E1FD               	bnz	clear_0
   189  000B44                     end_of_initialization:
   190                           	callstack 0
   191  000B44                     __end_of__initialization:
   192                           	callstack 0
   193  000B44  0E00               	movlw	low (__Lmediumconst shr (0+16))
   194  000B46  6EF8               	movwf	tblptru,c
   195  000B48  0100               	movlb	0
   196  000B4A  EF17  F003         	goto	_main	;jump to C main() function
   197                           
   198                           	psect	bssCOMRAM
   199  000052                     __pbssCOMRAM:
   200                           	callstack 0
   201  000052                     _ADC:
   202                           	callstack 0
   203  000052                     	ds	4
   204  000056                     _value:
   205                           	callstack 0
   206  000056                     	ds	4
   207  00005A                     _voltage:
   208                           	callstack 0
   209  00005A                     	ds	4
   210  00005E                     _i:
   211                           	callstack 0
   212  00005E                     	ds	2
   213                           
   214                           	psect	cstackCOMRAM
   215  000001                     __pcstackCOMRAM:
   216                           	callstack 0
   217  000001                     ??_poll_if_tim1:
   218  000001                     ?_Read_ADC:
   219                           	callstack 0
   220  000001                     ?___lwdiv:
   221                           	callstack 0
   222  000001                     UART_send_char@bt:
   223                           	callstack 0
   224  000001                     UART_Init@baud_rate:
   225                           	callstack 0
   226  000001                     ___lwdiv@dividend:
   227                           	callstack 0
   228                           
   229                           ; 2 bytes @ 0x0
   230  000001                     	ds	1
   231  000002                     UART_send_string@st_pt:
   232                           	callstack 0
   233                           
   234                           ; 2 bytes @ 0x1
   235  000002                     	ds	1
   236  000003                     ??_Read_ADC:
   237  000003                     i2c_wr@i2c_data:
   238                           	callstack 0
   239  000003                     i2c_rd@rtcc_buf:
   240                           	callstack 0
   241  000003                     ___lwdiv@divisor:
   242                           	callstack 0
   243                           
   244                           ; 2 bytes @ 0x2
   245  000003                     	ds	1
   246  000004                     
   247                           ; 1 bytes @ 0x3
   248  000004                     	ds	1
   249  000005                     Read_ADC@result:
   250                           	callstack 0
   251  000005                     ___lwdiv@quotient:
   252                           	callstack 0
   253                           
   254                           ; 2 bytes @ 0x4
   255  000005                     	ds	2
   256  000007                     Read_ADC@channel:
   257                           	callstack 0
   258  000007                     ___lwdiv@counter:
   259                           	callstack 0
   260                           
   261                           ; 1 bytes @ 0x6
   262  000007                     	ds	1
   263  000008                     ?___lwmod:
   264                           	callstack 0
   265  000008                     ___lwmod@dividend:
   266                           	callstack 0
   267                           
   268                           ; 2 bytes @ 0x7
   269  000008                     	ds	2
   270  00000A                     ___lwmod@divisor:
   271                           	callstack 0
   272                           
   273                           ; 2 bytes @ 0x9
   274  00000A                     	ds	2
   275  00000C                     ___lwmod@counter:
   276                           	callstack 0
   277                           
   278                           ; 1 bytes @ 0xB
   279  00000C                     	ds	1
   280  00000D                     ?_sprintf:
   281                           	callstack 0
   282  00000D                     sprintf@sp:
   283                           	callstack 0
   284                           
   285                           ; 2 bytes @ 0xC
   286  00000D                     	ds	2
   287  00000F                     sprintf@f:
   288                           	callstack 0
   289                           
   290                           ; 2 bytes @ 0xE
   291  00000F                     	ds	4
   292  000013                     sprintf@flag:
   293                           	callstack 0
   294                           
   295                           ; 1 bytes @ 0x12
   296  000013                     	ds	1
   297  000014                     sprintf@ap:
   298                           	callstack 0
   299                           
   300                           ; 2 bytes @ 0x13
   301  000014                     	ds	2
   302  000016                     sprintf@val:
   303                           	callstack 0
   304                           
   305                           ; 2 bytes @ 0x15
   306  000016                     	ds	2
   307  000018                     sprintf@prec:
   308                           	callstack 0
   309                           
   310                           ; 1 bytes @ 0x17
   311  000018                     	ds	1
   312  000019                     sprintf@c:
   313                           	callstack 0
   314                           
   315                           ; 1 bytes @ 0x18
   316  000019                     	ds	1
   317  00001A                     ??_main:
   318                           
   319                           ; 1 bytes @ 0x19
   320  00001A                     	ds	2
   321  00001C                     main@memory:
   322                           	callstack 0
   323                           
   324                           ; 20 bytes @ 0x1B
   325  00001C                     	ds	20
   326  000030                     main@_adc_str:
   327                           	callstack 0
   328                           
   329                           ; 20 bytes @ 0x2F
   330  000030                     	ds	20
   331  000044                     main@memory_string:
   332                           	callstack 0
   333                           
   334                           ; 10 bytes @ 0x43
   335  000044                     	ds	10
   336  00004E                     main@temp_adc:
   337                           	callstack 0
   338                           
   339                           ; 2 bytes @ 0x4D
   340  00004E                     	ds	2
   341  000050                     main@humid_adc:
   342                           	callstack 0
   343                           
   344                           ; 2 bytes @ 0x4F
   345  000050                     	ds	2
   346                           
   347 ;;
   348 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   349 ;;
   350 ;; *************** function _main *****************
   351 ;; Defined at:
   352 ;;		line 126 in file "Test.c"
   353 ;; Parameters:    Size  Location     Type
   354 ;;		None
   355 ;; Auto vars:     Size  Location     Type
   356 ;;  _adc_str       20   47[COMRAM] unsigned char [20]
   357 ;;  memory         20   27[COMRAM] unsigned char [20]
   358 ;;  _adc_buf       20    0        unsigned char [20]
   359 ;;  memory_strin   10   67[COMRAM] unsigned char [10]
   360 ;;  time           10    0        unsigned char [10]
   361 ;;  humid_adc       2   79[COMRAM] unsigned int 
   362 ;;  temp_adc        2   77[COMRAM] unsigned int 
   363 ;;  a               2    0        unsigned int 
   364 ;;  i               2    0        unsigned int 
   365 ;;  eeprom_val      1    0        unsigned char 
   366 ;;  i2c_val         1    0        unsigned char 
   367 ;; Return value:  Size  Location     Type
   368 ;;                  1    wreg      void 
   369 ;; Registers used:
   370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   371 ;; Tracked objects:
   372 ;;		On entry : 0/0
   373 ;;		On exit  : 0/0
   374 ;;		Unchanged: 0/0
   375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   376 ;;      Params:         0       0       0       0       0       0       0
   377 ;;      Locals:        54       0       0       0       0       0       0
   378 ;;      Temps:          2       0       0       0       0       0       0
   379 ;;      Totals:        56       0       0       0       0       0       0
   380 ;;Total ram usage:       56 bytes
   381 ;; Hardware stack levels required when called:    3
   382 ;; This function calls:
   383 ;;		_ADC_intialize
   384 ;;		_CLK_intialize
   385 ;;		_InitI2C
   386 ;;		_PORT_Initialize
   387 ;;		_Read_ADC
   388 ;;		_UART_Init
   389 ;;		_UART_send_string
   390 ;;		_rtcc_rd
   391 ;;		_rtcc_wr
   392 ;;		_sprintf
   393 ;; This function is called by:
   394 ;;		Startup code after reset
   395 ;; This function uses a non-reentrant model
   396 ;;
   397                           
   398                           	psect	text0
   399  00062E                     __ptext0:
   400                           	callstack 0
   401  00062E                     _main:
   402                           	callstack 28
   403  00062E                     
   404                           ;Test.c: 130: unsigned int humid_adc = 0;
   405  00062E  0E00               	movlw	0
   406  000630  6E51               	movwf	(main@humid_adc+1)^0,c
   407  000632  0E00               	movlw	0
   408  000634  6E50               	movwf	main@humid_adc^0,c
   409  000636                     
   410                           ;Test.c: 131: unsigned short I2C_Master_Read(unsigned short a);;Test.c: 132: char _adc_s
      +                          tr[20];;Test.c: 133: char _adc_buf[20];;Test.c: 134: unsigned int i, a;;Test.c: 135: cha
      +                          r memory[20];;Test.c: 136: char memory_string [10];;Test.c: 137: CLK_intialize();
   411  000636  ECD4  F005         	call	_CLK_intialize	;wreg free
   412                           
   413                           ;Test.c: 138: PORT_Initialize();
   414  00063A  ECEB  F005         	call	_PORT_Initialize	;wreg free
   415  00063E                     
   416                           ;Test.c: 139: UART_Init(9600);
   417  00063E  0E25               	movlw	37
   418  000640  6E02               	movwf	(UART_Init@baud_rate+1)^0,c
   419  000642  0E80               	movlw	128
   420  000644  6E01               	movwf	UART_Init@baud_rate^0,c
   421  000646  ECBD  F005         	call	_UART_Init	;wreg free
   422  00064A                     
   423                           ;Test.c: 140: ADC_intialize();
   424  00064A  EC7D  F005         	call	_ADC_intialize	;wreg free
   425  00064E                     
   426                           ;Test.c: 142: InitI2C();
   427  00064E  ECB2  F005         	call	_InitI2C	;wreg free
   428  000652                     
   429                           ;Test.c: 143: void i2c_start(void) ;;Test.c: 146: unsigned char i2c_val;;Test.c: 147: ch
      +                          ar time [10];;Test.c: 148: unsigned char eeprom_val ;;Test.c: 166: _delay((unsigned long
      +                          )((500)*(8000000/4000.0)));
   430  000652  0E06               	movlw	6
   431  000654  6E1B               	movwf	(??_main+1)^0,c
   432  000656  0E13               	movlw	19
   433  000658  6E1A               	movwf	??_main^0,c
   434  00065A  0EAE               	movlw	174
   435  00065C                     u427:
   436  00065C  2EE8               	decfsz	wreg,f,c
   437  00065E  D7FE               	bra	u427
   438  000660  2E1A               	decfsz	??_main^0,f,c
   439  000662  D7FC               	bra	u427
   440  000664  2E1B               	decfsz	(??_main+1)^0,f,c
   441  000666  D7FA               	bra	u427
   442  000668                     l1534:
   443                           
   444                           ;Test.c: 169: {;Test.c: 173: _delay((unsigned long)((500)*(8000000/4000.0)));
   445  000668  0E06               	movlw	6
   446  00066A  6E1B               	movwf	(??_main+1)^0,c
   447  00066C  0E13               	movlw	19
   448  00066E  6E1A               	movwf	??_main^0,c
   449  000670  0EAE               	movlw	174
   450  000672                     u437:
   451  000672  2EE8               	decfsz	wreg,f,c
   452  000674  D7FE               	bra	u437
   453  000676  2E1A               	decfsz	??_main^0,f,c
   454  000678  D7FC               	bra	u437
   455  00067A  2E1B               	decfsz	(??_main+1)^0,f,c
   456  00067C  D7FA               	bra	u437
   457  00067E                     
   458                           ;Test.c: 174: TRISB1 = 0;
   459  00067E  9293               	bcf	3987,1,c	;volatile
   460  000680                     
   461                           ;Test.c: 175: _delay((unsigned long)((500)*(8000000/4000.0)));
   462  000680  0E06               	movlw	6
   463  000682  6E1B               	movwf	(??_main+1)^0,c
   464  000684  0E13               	movlw	19
   465  000686  6E1A               	movwf	??_main^0,c
   466  000688  0EAE               	movlw	174
   467  00068A                     u447:
   468  00068A  2EE8               	decfsz	wreg,f,c
   469  00068C  D7FE               	bra	u447
   470  00068E  2E1A               	decfsz	??_main^0,f,c
   471  000690  D7FC               	bra	u447
   472  000692  2E1B               	decfsz	(??_main+1)^0,f,c
   473  000694  D7FA               	bra	u447
   474  000696                     
   475                           ;Test.c: 176: TRISB1 = 1;
   476  000696  8293               	bsf	3987,1,c	;volatile
   477  000698                     
   478                           ;Test.c: 178: _delay((unsigned long)((500)*(8000000/4000.0)));
   479  000698  0E06               	movlw	6
   480  00069A  6E1B               	movwf	(??_main+1)^0,c
   481  00069C  0E13               	movlw	19
   482  00069E  6E1A               	movwf	??_main^0,c
   483  0006A0  0EAE               	movlw	174
   484  0006A2                     u457:
   485  0006A2  2EE8               	decfsz	wreg,f,c
   486  0006A4  D7FE               	bra	u457
   487  0006A6  2E1A               	decfsz	??_main^0,f,c
   488  0006A8  D7FC               	bra	u457
   489  0006AA  2E1B               	decfsz	(??_main+1)^0,f,c
   490  0006AC  D7FA               	bra	u457
   491  0006AE                     
   492                           ;Test.c: 179: TRISB0 = 0;
   493  0006AE  9093               	bcf	3987,0,c	;volatile
   494  0006B0                     
   495                           ;Test.c: 180: _delay((unsigned long)((500)*(8000000/4000.0)));
   496  0006B0  0E06               	movlw	6
   497  0006B2  6E1B               	movwf	(??_main+1)^0,c
   498  0006B4  0E13               	movlw	19
   499  0006B6  6E1A               	movwf	??_main^0,c
   500  0006B8  0EAE               	movlw	174
   501  0006BA                     u467:
   502  0006BA  2EE8               	decfsz	wreg,f,c
   503  0006BC  D7FE               	bra	u467
   504  0006BE  2E1A               	decfsz	??_main^0,f,c
   505  0006C0  D7FC               	bra	u467
   506  0006C2  2E1B               	decfsz	(??_main+1)^0,f,c
   507  0006C4  D7FA               	bra	u467
   508  0006C6                     
   509                           ;Test.c: 181: TRISB0 = 1;
   510  0006C6  8093               	bsf	3987,0,c	;volatile
   511  0006C8                     
   512                           ;Test.c: 185: temp_adc = Read_ADC (0);
   513  0006C8  0E00               	movlw	0
   514  0006CA  ECF9  F004         	call	_Read_ADC
   515  0006CE  C001  F04E         	movff	?_Read_ADC,main@temp_adc
   516  0006D2  C002  F04F         	movff	?_Read_ADC+1,main@temp_adc+1
   517  0006D6                     
   518                           ;Test.c: 187: sprintf(_adc_str,"TEMP: %u\n", temp_adc);
   519  0006D6  0E30               	movlw	low main@_adc_str
   520  0006D8  6E0D               	movwf	sprintf@sp^0,c
   521  0006DA  0E00               	movlw	high main@_adc_str
   522  0006DC  6E0E               	movwf	(sprintf@sp+1)^0,c
   523  0006DE  0E22               	movlw	low STR_1
   524  0006E0  6E0F               	movwf	sprintf@f^0,c
   525  0006E2  0E06               	movlw	high STR_1
   526  0006E4  6E10               	movwf	(sprintf@f+1)^0,c
   527  0006E6  C04E  F011         	movff	main@temp_adc,?_sprintf+4
   528  0006EA  C04F  F012         	movff	main@temp_adc+1,?_sprintf+5
   529  0006EE  ECDB  F003         	call	_sprintf	;wreg free
   530  0006F2                     
   531                           ;Test.c: 188: UART_send_string(_adc_str);
   532  0006F2  0E30               	movlw	low main@_adc_str
   533  0006F4  6E02               	movwf	UART_send_string@st_pt^0,c
   534  0006F6  0E00               	movlw	high main@_adc_str
   535  0006F8  6E03               	movwf	(UART_send_string@st_pt+1)^0,c
   536  0006FA  EC51  F005         	call	_UART_send_string	;wreg free
   537  0006FE                     
   538                           ;Test.c: 190: _delay((unsigned long)((100)*(8000000/4000.0)));
   539  0006FE  0E02               	movlw	2
   540  000700  6E1B               	movwf	(??_main+1)^0,c
   541  000702  0E04               	movlw	4
   542  000704  6E1A               	movwf	??_main^0,c
   543  000706  0EBA               	movlw	186
   544  000708                     u477:
   545  000708  2EE8               	decfsz	wreg,f,c
   546  00070A  D7FE               	bra	u477
   547  00070C  2E1A               	decfsz	??_main^0,f,c
   548  00070E  D7FC               	bra	u477
   549  000710  2E1B               	decfsz	(??_main+1)^0,f,c
   550  000712  D7FA               	bra	u477
   551  000714  D000               	nop2	
   552  000716                     
   553                           ;Test.c: 192: humid_adc = Read_ADC (1);
   554  000716  0E01               	movlw	1
   555  000718  ECF9  F004         	call	_Read_ADC
   556  00071C  C001  F050         	movff	?_Read_ADC,main@humid_adc
   557  000720  C002  F051         	movff	?_Read_ADC+1,main@humid_adc+1
   558  000724                     
   559                           ;Test.c: 193: sprintf(_adc_str, "HUMID: %u\n", humid_adc);
   560  000724  0E30               	movlw	low main@_adc_str
   561  000726  6E0D               	movwf	sprintf@sp^0,c
   562  000728  0E00               	movlw	high main@_adc_str
   563  00072A  6E0E               	movwf	(sprintf@sp+1)^0,c
   564  00072C  0E17               	movlw	low STR_2
   565  00072E  6E0F               	movwf	sprintf@f^0,c
   566  000730  0E06               	movlw	high STR_2
   567  000732  6E10               	movwf	(sprintf@f+1)^0,c
   568  000734  C050  F011         	movff	main@humid_adc,?_sprintf+4
   569  000738  C051  F012         	movff	main@humid_adc+1,?_sprintf+5
   570  00073C  ECDB  F003         	call	_sprintf	;wreg free
   571  000740                     
   572                           ;Test.c: 194: UART_send_string(_adc_str);
   573  000740  0E30               	movlw	low main@_adc_str
   574  000742  6E02               	movwf	UART_send_string@st_pt^0,c
   575  000744  0E00               	movlw	high main@_adc_str
   576  000746  6E03               	movwf	(UART_send_string@st_pt+1)^0,c
   577  000748  EC51  F005         	call	_UART_send_string	;wreg free
   578  00074C                     
   579                           ;Test.c: 196: _delay((unsigned long)((100)*(8000000/4000.0)));
   580  00074C  0E02               	movlw	2
   581  00074E  6E1B               	movwf	(??_main+1)^0,c
   582  000750  0E04               	movlw	4
   583  000752  6E1A               	movwf	??_main^0,c
   584  000754  0EBA               	movlw	186
   585  000756                     u487:
   586  000756  2EE8               	decfsz	wreg,f,c
   587  000758  D7FE               	bra	u487
   588  00075A  2E1A               	decfsz	??_main^0,f,c
   589  00075C  D7FC               	bra	u487
   590  00075E  2E1B               	decfsz	(??_main+1)^0,f,c
   591  000760  D7FA               	bra	u487
   592  000762  D000               	nop2	
   593  000764                     
   594                           ;Test.c: 197: sprintf(memory_string,"EEPROM: %u\n", memory[0]);
   595  000764  0E44               	movlw	low main@memory_string
   596  000766  6E0D               	movwf	sprintf@sp^0,c
   597  000768  0E00               	movlw	high main@memory_string
   598  00076A  6E0E               	movwf	(sprintf@sp+1)^0,c
   599  00076C  0E0B               	movlw	low STR_3
   600  00076E  6E0F               	movwf	sprintf@f^0,c
   601  000770  0E06               	movlw	high STR_3
   602  000772  6E10               	movwf	(sprintf@f+1)^0,c
   603  000774  C01C  F011         	movff	main@memory,?_sprintf+4
   604  000778  6A12               	clrf	(?_sprintf+5)^0,c
   605  00077A  ECDB  F003         	call	_sprintf	;wreg free
   606  00077E                     
   607                           ;Test.c: 198: UART_send_string(memory_string);
   608  00077E  0E44               	movlw	low main@memory_string
   609  000780  6E02               	movwf	UART_send_string@st_pt^0,c
   610  000782  0E00               	movlw	high main@memory_string
   611  000784  6E03               	movwf	(UART_send_string@st_pt+1)^0,c
   612  000786  EC51  F005         	call	_UART_send_string	;wreg free
   613  00078A                     
   614                           ;Test.c: 200: rtcc_wr () ;
   615  00078A  EC8E  F005         	call	_rtcc_wr	;wreg free
   616  00078E                     
   617                           ;Test.c: 201: rtcc_rd( ) ;
   618  00078E  EC69  F005         	call	_rtcc_rd	;wreg free
   619  000792                     
   620                           ;Test.c: 227: _delay((unsigned long)((5)*(8000000/4000.0)));
   621  000792  0E0D               	movlw	13
   622  000794  6E1A               	movwf	??_main^0,c
   623  000796  0EFC               	movlw	252
   624  000798                     u497:
   625  000798  2EE8               	decfsz	wreg,f,c
   626  00079A  D7FE               	bra	u497
   627  00079C  2E1A               	decfsz	??_main^0,f,c
   628  00079E  D7FC               	bra	u497
   629  0007A0                     
   630                           ;Test.c: 231: _delay((unsigned long)((5)*(8000000/4000.0)));
   631  0007A0  0E0D               	movlw	13
   632  0007A2  6E1A               	movwf	??_main^0,c
   633  0007A4  0EFC               	movlw	252
   634  0007A6                     u507:
   635  0007A6  2EE8               	decfsz	wreg,f,c
   636  0007A8  D7FE               	bra	u507
   637  0007AA  2E1A               	decfsz	??_main^0,f,c
   638  0007AC  D7FC               	bra	u507
   639  0007AE  EF34  F003         	goto	l1534
   640  0007B2  EF00  F000         	goto	start
   641  0007B6                     __end_of_main:
   642                           	callstack 0
   643                           
   644 ;; *************** function _sprintf *****************
   645 ;; Defined at:
   646 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
   647 ;; Parameters:    Size  Location     Type
   648 ;;  sp              2   12[COMRAM] PTR unsigned char 
   649 ;;		 -> main@memory_string(10), main@_adc_str(20), 
   650 ;;  f               2   14[COMRAM] PTR const unsigned char 
   651 ;;		 -> STR_3(12), STR_2(11), STR_1(10), 
   652 ;; Auto vars:     Size  Location     Type
   653 ;;  tmpval          4    0        struct .
   654 ;;  cp              3    0        PTR const unsigned char 
   655 ;;  val             2   21[COMRAM] unsigned int 
   656 ;;  ap              2   19[COMRAM] PTR void [1]
   657 ;;		 -> ?_sprintf(2), 
   658 ;;  len             2    0        unsigned int 
   659 ;;  c               1   24[COMRAM] unsigned char 
   660 ;;  prec            1   23[COMRAM] char 
   661 ;;  flag            1   18[COMRAM] unsigned char 
   662 ;; Return value:  Size  Location     Type
   663 ;;                  2   12[COMRAM] int 
   664 ;; Registers used:
   665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   666 ;; Tracked objects:
   667 ;;		On entry : 0/0
   668 ;;		On exit  : 0/0
   669 ;;		Unchanged: 0/0
   670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   671 ;;      Params:         6       0       0       0       0       0       0
   672 ;;      Locals:         7       0       0       0       0       0       0
   673 ;;      Temps:          0       0       0       0       0       0       0
   674 ;;      Totals:        13       0       0       0       0       0       0
   675 ;;Total ram usage:       13 bytes
   676 ;; Hardware stack levels used:    1
   677 ;; Hardware stack levels required when called:    1
   678 ;; This function calls:
   679 ;;		___lwdiv
   680 ;;		___lwmod
   681 ;; This function is called by:
   682 ;;		_main
   683 ;; This function uses a non-reentrant model
   684 ;;
   685                           
   686                           	psect	text1
   687  0007B6                     __ptext1:
   688                           	callstack 0
   689  0007B6                     _sprintf:
   690                           	callstack 29
   691  0007B6                     
   692                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 521: signed char prec;;dopr
      +                          nt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c: 541: unsigned long vd;;d
      +                          oprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned int val;;do
      +                          prnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = __va_sta
      +                          rt();
   693  0007B6  0E11               	movlw	low (?_sprintf+4)
   694  0007B8  6E14               	movwf	sprintf@ap^0,c
   695  0007BA  0E00               	movlw	high (?_sprintf+4)
   696  0007BC  6E15               	movwf	(sprintf@ap+1)^0,c
   697                           
   698                           ;doprnt.c: 553: while((c = *f++)) {
   699  0007BE  EF75  F004         	goto	l1508
   700  0007C2                     l1468:
   701                           
   702                           ;doprnt.c: 555: if(c != '%')
   703  0007C2  0E25               	movlw	37
   704  0007C4  1819               	xorwf	sprintf@c^0,w,c
   705  0007C6  B4D8               	btfsc	status,2,c
   706  0007C8  EFE8  F003         	goto	u361
   707  0007CC  EFEA  F003         	goto	u360
   708  0007D0                     u361:
   709  0007D0  EFF4  F003         	goto	l1474
   710  0007D4                     u360:
   711  0007D4                     
   712                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
   713  0007D4  C00D  FFD9         	movff	sprintf@sp,fsr2l
   714  0007D8  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   715  0007DC  C019  FFDF         	movff	sprintf@c,indf2
   716  0007E0  4A0D               	infsnz	sprintf@sp^0,f,c
   717  0007E2  2A0E               	incf	(sprintf@sp+1)^0,f,c
   718                           
   719                           ;doprnt.c: 559: continue;
   720  0007E4  EF75  F004         	goto	l1508
   721  0007E8                     l1474:
   722                           
   723                           ;doprnt.c: 560: };doprnt.c: 565: flag = 0;
   724  0007E8  0E00               	movlw	0
   725  0007EA  6E13               	movwf	sprintf@flag^0,c
   726                           
   727                           ;doprnt.c: 661: switch(c = *f++) {
   728  0007EC  EFFC  F003         	goto	l1480
   729  0007F0                     l1476:
   730                           
   731                           ;doprnt.c: 844: flag |= 0xC0;
   732  0007F0  0EC0               	movlw	192
   733  0007F2  1213               	iorwf	sprintf@flag^0,f,c
   734                           
   735                           ;doprnt.c: 845: break;
   736  0007F4  EF10  F004         	goto	l1482
   737  0007F8                     l1480:
   738  0007F8  C00F  FFF6         	movff	sprintf@f,tblptrl
   739  0007FC  C010  FFF7         	movff	sprintf@f+1,tblptrh
   740  000800  4A0F               	infsnz	sprintf@f^0,f,c
   741  000802  2A10               	incf	(sprintf@f+1)^0,f,c
   742  000804                     	if	0	;tblptru may be non-zero
   743  000804                     	endif
   744  000804                     	if	0	;tblptru may be non-zero
   745  000804                     	endif
   746  000804  0008               	tblrd		*
   747  000806  CFF5 F019          	movff	tablat,sprintf@c
   748  00080A  5019               	movf	sprintf@c^0,w,c
   749                           
   750                           ; Switch size 1, requested type "simple"
   751                           ; Number of cases is 2, Range of values is 0 to 117
   752                           ; switch strategies available:
   753                           ; Name         Instructions Cycles
   754                           ; simple_byte            7     4 (average)
   755                           ;	Chosen strategy is simple_byte
   756  00080C  0A00               	xorlw	0	; case 0
   757  00080E  B4D8               	btfsc	status,2,c
   758  000810  EF86  F004         	goto	l1510
   759  000814  0A75               	xorlw	117	; case 117
   760  000816  B4D8               	btfsc	status,2,c
   761  000818  EFF8  F003         	goto	l1476
   762  00081C  EF75  F004         	goto	l1508
   763  000820                     l1482:
   764                           
   765                           ;doprnt.c: 1299: {;doprnt.c: 1312: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (uns
      +                          igned)0));
   766  000820  C014  FFD9         	movff	sprintf@ap,fsr2l
   767  000824  C015  FFDA         	movff	sprintf@ap+1,fsr2h
   768  000828  CFDE F016          	movff	postinc2,sprintf@val
   769  00082C  CFDD F017          	movff	postdec2,sprintf@val+1
   770  000830  0E02               	movlw	2
   771  000832  2614               	addwf	sprintf@ap^0,f,c
   772  000834  0E00               	movlw	0
   773  000836  2215               	addwfc	(sprintf@ap+1)^0,f,c
   774  000838                     
   775                           ;doprnt.c: 1313: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c
      +                          ++)
   776  000838  0E01               	movlw	1
   777  00083A  6E19               	movwf	sprintf@c^0,c
   778  00083C                     l1492:
   779                           
   780                           ;doprnt.c: 1332: if(val < dpowers[c])
   781  00083C  5019               	movf	sprintf@c^0,w,c
   782  00083E  0D02               	mullw	2
   783  000840  0E01               	movlw	low _dpowers
   784  000842  24F3               	addwf	243,w,c
   785  000844  6EF6               	movwf	tblptrl,c
   786  000846  0E06               	movlw	high _dpowers
   787  000848  20F4               	addwfc	244,w,c
   788  00084A  6EF7               	movwf	tblptrh,c
   789  00084C                     	if	0	;There are less than 3 active tblptr bytes
   790  00084C                     	endif
   791  00084C  0009               	tblrd		*+
   792  00084E  50F5               	movf	tablat,w,c
   793  000850  5C16               	subwf	sprintf@val^0,w,c
   794  000852  0009               	tblrd		*+
   795  000854  50F5               	movf	tablat,w,c
   796  000856  5817               	subwfb	(sprintf@val+1)^0,w,c
   797  000858  B0D8               	btfsc	status,0,c
   798  00085A  EF31  F004         	goto	u371
   799  00085E  EF33  F004         	goto	u370
   800  000862                     u371:
   801  000862  EF35  F004         	goto	l1496
   802  000866                     u370:
   803  000866  EF3F  F004         	goto	l314
   804  00086A                     l1496:
   805  00086A  2A19               	incf	sprintf@c^0,f,c
   806  00086C  0E05               	movlw	5
   807  00086E  1819               	xorwf	sprintf@c^0,w,c
   808  000870  A4D8               	btfss	status,2,c
   809  000872  EF3D  F004         	goto	u381
   810  000876  EF3F  F004         	goto	u380
   811  00087A                     u381:
   812  00087A  EF1E  F004         	goto	l1492
   813  00087E                     u380:
   814  00087E                     l314:
   815                           
   816                           ;doprnt.c: 1448: {;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
   817  00087E  C019  F018         	movff	sprintf@c,sprintf@prec
   818                           
   819                           ;doprnt.c: 1500: while(prec--) {
   820  000882  EF6C  F004         	goto	l1506
   821  000886                     l1500:
   822                           
   823                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
   824  000886  5018               	movf	sprintf@prec^0,w,c
   825  000888  0D02               	mullw	2
   826  00088A  0E01               	movlw	low _dpowers
   827  00088C  24F3               	addwf	243,w,c
   828  00088E  6EF6               	movwf	tblptrl,c
   829  000890  0E06               	movlw	high _dpowers
   830  000892  20F4               	addwfc	244,w,c
   831  000894  6EF7               	movwf	tblptrh,c
   832  000896                     	if	0	;There are less than 3 active tblptr bytes
   833  000896                     	endif
   834  000896  0009               	tblrd		*+
   835  000898  CFF5 F003          	movff	tablat,___lwdiv@divisor
   836  00089C  000A               	tblrd		*-
   837  00089E  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
   838  0008A2  C016  F001         	movff	sprintf@val,___lwdiv@dividend
   839  0008A6  C017  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
   840  0008AA  EC8D  F004         	call	___lwdiv	;wreg free
   841  0008AE  C001  F008         	movff	?___lwdiv,___lwmod@dividend
   842  0008B2  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
   843  0008B6  0E00               	movlw	0
   844  0008B8  6E0B               	movwf	(___lwmod@divisor+1)^0,c
   845  0008BA  0E0A               	movlw	10
   846  0008BC  6E0A               	movwf	___lwmod@divisor^0,c
   847  0008BE  ECC7  F004         	call	___lwmod	;wreg free
   848  0008C2  5008               	movf	?___lwmod^0,w,c
   849  0008C4  0F30               	addlw	48
   850  0008C6  6E19               	movwf	sprintf@c^0,c
   851  0008C8                     
   852                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
   853  0008C8  C00D  FFD9         	movff	sprintf@sp,fsr2l
   854  0008CC  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   855  0008D0  C019  FFDF         	movff	sprintf@c,indf2
   856  0008D4  4A0D               	infsnz	sprintf@sp^0,f,c
   857  0008D6  2A0E               	incf	(sprintf@sp+1)^0,f,c
   858  0008D8                     l1506:
   859  0008D8  0618               	decf	sprintf@prec^0,f,c
   860  0008DA  2818               	incf	sprintf@prec^0,w,c
   861  0008DC  A4D8               	btfss	status,2,c
   862  0008DE  EF73  F004         	goto	u391
   863  0008E2  EF75  F004         	goto	u390
   864  0008E6                     u391:
   865  0008E6  EF43  F004         	goto	l1500
   866  0008EA                     u390:
   867  0008EA                     l1508:
   868  0008EA  C00F  FFF6         	movff	sprintf@f,tblptrl
   869  0008EE  C010  FFF7         	movff	sprintf@f+1,tblptrh
   870  0008F2  4A0F               	infsnz	sprintf@f^0,f,c
   871  0008F4  2A10               	incf	(sprintf@f+1)^0,f,c
   872  0008F6                     	if	0	;tblptru may be non-zero
   873  0008F6                     	endif
   874  0008F6                     	if	0	;tblptru may be non-zero
   875  0008F6                     	endif
   876  0008F6  0008               	tblrd		*
   877  0008F8  CFF5 F019          	movff	tablat,sprintf@c
   878  0008FC  5019               	movf	sprintf@c^0,w,c
   879  0008FE  A4D8               	btfss	status,2,c
   880  000900  EF84  F004         	goto	u401
   881  000904  EF86  F004         	goto	u400
   882  000908                     u401:
   883  000908  EFE1  F003         	goto	l1468
   884  00090C                     u400:
   885  00090C                     l1510:
   886                           
   887                           ;doprnt.c: 1564: *sp = 0;
   888  00090C  C00D  FFD9         	movff	sprintf@sp,fsr2l
   889  000910  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   890  000914  0E00               	movlw	0
   891  000916  6EDF               	movwf	indf2,c
   892  000918  0012               	return		;funcret
   893  00091A                     __end_of_sprintf:
   894                           	callstack 0
   895                           
   896 ;; *************** function ___lwmod *****************
   897 ;; Defined at:
   898 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
   899 ;; Parameters:    Size  Location     Type
   900 ;;  dividend        2    7[COMRAM] unsigned int 
   901 ;;  divisor         2    9[COMRAM] unsigned int 
   902 ;; Auto vars:     Size  Location     Type
   903 ;;  counter         1   11[COMRAM] unsigned char 
   904 ;; Return value:  Size  Location     Type
   905 ;;                  2    7[COMRAM] unsigned int 
   906 ;; Registers used:
   907 ;;		wreg, status,2, status,0
   908 ;; Tracked objects:
   909 ;;		On entry : 0/0
   910 ;;		On exit  : 0/0
   911 ;;		Unchanged: 0/0
   912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   913 ;;      Params:         4       0       0       0       0       0       0
   914 ;;      Locals:         1       0       0       0       0       0       0
   915 ;;      Temps:          0       0       0       0       0       0       0
   916 ;;      Totals:         5       0       0       0       0       0       0
   917 ;;Total ram usage:        5 bytes
   918 ;; Hardware stack levels used:    1
   919 ;; This function calls:
   920 ;;		Nothing
   921 ;; This function is called by:
   922 ;;		_sprintf
   923 ;; This function uses a non-reentrant model
   924 ;;
   925                           
   926                           	psect	text2
   927  00098E                     __ptext2:
   928                           	callstack 0
   929  00098E                     ___lwmod:
   930                           	callstack 29
   931  00098E  500A               	movf	___lwmod@divisor^0,w,c
   932  000990  100B               	iorwf	(___lwmod@divisor+1)^0,w,c
   933  000992  B4D8               	btfsc	status,2,c
   934  000994  EFCE  F004         	goto	u301
   935  000998  EFD0  F004         	goto	u300
   936  00099C                     u301:
   937  00099C  EFF4  F004         	goto	l812
   938  0009A0                     u300:
   939  0009A0  0E01               	movlw	1
   940  0009A2  6E0C               	movwf	___lwmod@counter^0,c
   941  0009A4  EFD8  F004         	goto	l1434
   942  0009A8                     l1432:
   943  0009A8  90D8               	bcf	status,0,c
   944  0009AA  360A               	rlcf	___lwmod@divisor^0,f,c
   945  0009AC  360B               	rlcf	(___lwmod@divisor+1)^0,f,c
   946  0009AE  2A0C               	incf	___lwmod@counter^0,f,c
   947  0009B0                     l1434:
   948  0009B0  AE0B               	btfss	(___lwmod@divisor+1)^0,7,c
   949  0009B2  EFDD  F004         	goto	u311
   950  0009B6  EFDF  F004         	goto	u310
   951  0009BA                     u311:
   952  0009BA  EFD4  F004         	goto	l1432
   953  0009BE                     u310:
   954  0009BE                     l1436:
   955  0009BE  500A               	movf	___lwmod@divisor^0,w,c
   956  0009C0  5C08               	subwf	___lwmod@dividend^0,w,c
   957  0009C2  500B               	movf	(___lwmod@divisor+1)^0,w,c
   958  0009C4  5809               	subwfb	(___lwmod@dividend+1)^0,w,c
   959  0009C6  A0D8               	btfss	status,0,c
   960  0009C8  EFE8  F004         	goto	u321
   961  0009CC  EFEA  F004         	goto	u320
   962  0009D0                     u321:
   963  0009D0  EFEE  F004         	goto	l1440
   964  0009D4                     u320:
   965  0009D4  500A               	movf	___lwmod@divisor^0,w,c
   966  0009D6  5E08               	subwf	___lwmod@dividend^0,f,c
   967  0009D8  500B               	movf	(___lwmod@divisor+1)^0,w,c
   968  0009DA  5A09               	subwfb	(___lwmod@dividend+1)^0,f,c
   969  0009DC                     l1440:
   970  0009DC  90D8               	bcf	status,0,c
   971  0009DE  320B               	rrcf	(___lwmod@divisor+1)^0,f,c
   972  0009E0  320A               	rrcf	___lwmod@divisor^0,f,c
   973  0009E2  2E0C               	decfsz	___lwmod@counter^0,f,c
   974  0009E4  EFDF  F004         	goto	l1436
   975  0009E8                     l812:
   976  0009E8  C008  F008         	movff	___lwmod@dividend,?___lwmod
   977  0009EC  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
   978  0009F0  0012               	return		;funcret
   979  0009F2                     __end_of___lwmod:
   980                           	callstack 0
   981                           
   982 ;; *************** function ___lwdiv *****************
   983 ;; Defined at:
   984 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
   985 ;; Parameters:    Size  Location     Type
   986 ;;  dividend        2    0[COMRAM] unsigned int 
   987 ;;  divisor         2    2[COMRAM] unsigned int 
   988 ;; Auto vars:     Size  Location     Type
   989 ;;  quotient        2    4[COMRAM] unsigned int 
   990 ;;  counter         1    6[COMRAM] unsigned char 
   991 ;; Return value:  Size  Location     Type
   992 ;;                  2    0[COMRAM] unsigned int 
   993 ;; Registers used:
   994 ;;		wreg, status,2, status,0
   995 ;; Tracked objects:
   996 ;;		On entry : 0/0
   997 ;;		On exit  : 0/0
   998 ;;		Unchanged: 0/0
   999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1000 ;;      Params:         4       0       0       0       0       0       0
  1001 ;;      Locals:         3       0       0       0       0       0       0
  1002 ;;      Temps:          0       0       0       0       0       0       0
  1003 ;;      Totals:         7       0       0       0       0       0       0
  1004 ;;Total ram usage:        7 bytes
  1005 ;; Hardware stack levels used:    1
  1006 ;; This function calls:
  1007 ;;		Nothing
  1008 ;; This function is called by:
  1009 ;;		_sprintf
  1010 ;; This function uses a non-reentrant model
  1011 ;;
  1012                           
  1013                           	psect	text3
  1014  00091A                     __ptext3:
  1015                           	callstack 0
  1016  00091A                     ___lwdiv:
  1017                           	callstack 29
  1018  00091A  0E00               	movlw	0
  1019  00091C  6E06               	movwf	(___lwdiv@quotient+1)^0,c
  1020  00091E  0E00               	movlw	0
  1021  000920  6E05               	movwf	___lwdiv@quotient^0,c
  1022  000922  5003               	movf	___lwdiv@divisor^0,w,c
  1023  000924  1004               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1024  000926  B4D8               	btfsc	status,2,c
  1025  000928  EF98  F004         	goto	u271
  1026  00092C  EF9A  F004         	goto	u270
  1027  000930                     u271:
  1028  000930  EFC2  F004         	goto	l802
  1029  000934                     u270:
  1030  000934  0E01               	movlw	1
  1031  000936  6E07               	movwf	___lwdiv@counter^0,c
  1032  000938  EFA2  F004         	goto	l1414
  1033  00093C                     l1412:
  1034  00093C  90D8               	bcf	status,0,c
  1035  00093E  3603               	rlcf	___lwdiv@divisor^0,f,c
  1036  000940  3604               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1037  000942  2A07               	incf	___lwdiv@counter^0,f,c
  1038  000944                     l1414:
  1039  000944  AE04               	btfss	(___lwdiv@divisor+1)^0,7,c
  1040  000946  EFA7  F004         	goto	u281
  1041  00094A  EFA9  F004         	goto	u280
  1042  00094E                     u281:
  1043  00094E  EF9E  F004         	goto	l1412
  1044  000952                     u280:
  1045  000952                     l1416:
  1046  000952  90D8               	bcf	status,0,c
  1047  000954  3605               	rlcf	___lwdiv@quotient^0,f,c
  1048  000956  3606               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1049  000958  5003               	movf	___lwdiv@divisor^0,w,c
  1050  00095A  5C01               	subwf	___lwdiv@dividend^0,w,c
  1051  00095C  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  1052  00095E  5802               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1053  000960  A0D8               	btfss	status,0,c
  1054  000962  EFB5  F004         	goto	u291
  1055  000966  EFB7  F004         	goto	u290
  1056  00096A                     u291:
  1057  00096A  EFBC  F004         	goto	l1424
  1058  00096E                     u290:
  1059  00096E  5003               	movf	___lwdiv@divisor^0,w,c
  1060  000970  5E01               	subwf	___lwdiv@dividend^0,f,c
  1061  000972  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  1062  000974  5A02               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1063  000976  8005               	bsf	___lwdiv@quotient^0,0,c
  1064  000978                     l1424:
  1065  000978  90D8               	bcf	status,0,c
  1066  00097A  3204               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1067  00097C  3203               	rrcf	___lwdiv@divisor^0,f,c
  1068  00097E  2E07               	decfsz	___lwdiv@counter^0,f,c
  1069  000980  EFA9  F004         	goto	l1416
  1070  000984                     l802:
  1071  000984  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1072  000988  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1073  00098C  0012               	return		;funcret
  1074  00098E                     __end_of___lwdiv:
  1075                           	callstack 0
  1076                           
  1077 ;; *************** function _rtcc_wr *****************
  1078 ;; Defined at:
  1079 ;;		line 87 in file "RTCC.c"
  1080 ;; Parameters:    Size  Location     Type
  1081 ;;		None
  1082 ;; Auto vars:     Size  Location     Type
  1083 ;;		None
  1084 ;; Return value:  Size  Location     Type
  1085 ;;                  1    wreg      void 
  1086 ;; Registers used:
  1087 ;;		wreg, status,2, cstack
  1088 ;; Tracked objects:
  1089 ;;		On entry : 0/0
  1090 ;;		On exit  : 0/0
  1091 ;;		Unchanged: 0/0
  1092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1093 ;;      Params:         0       0       0       0       0       0       0
  1094 ;;      Locals:         0       0       0       0       0       0       0
  1095 ;;      Temps:          0       0       0       0       0       0       0
  1096 ;;      Totals:         0       0       0       0       0       0       0
  1097 ;;Total ram usage:        0 bytes
  1098 ;; Hardware stack levels used:    1
  1099 ;; Hardware stack levels required when called:    2
  1100 ;; This function calls:
  1101 ;;		_i2c_start
  1102 ;;		_i2c_stop
  1103 ;;		_i2c_wr
  1104 ;; This function is called by:
  1105 ;;		_main
  1106 ;; This function uses a non-reentrant model
  1107 ;;
  1108                           
  1109                           	psect	text4
  1110  000B1C                     __ptext4:
  1111                           	callstack 0
  1112  000B1C                     _rtcc_wr:
  1113                           	callstack 28
  1114  000B1C                     
  1115                           ;RTCC.c: 89: i2c_start() ;
  1116  000B1C  ECE3  F005         	call	_i2c_start	;wreg free
  1117                           
  1118                           ;RTCC.c: 90: i2c_wr(0xDE) ;
  1119  000B20  0EDE               	movlw	222
  1120  000B22  ECCE  F005         	call	_i2c_wr
  1121                           
  1122                           ;RTCC.c: 91: i2c_wr(0x00) ;
  1123  000B26  0E00               	movlw	0
  1124  000B28  ECCE  F005         	call	_i2c_wr
  1125                           
  1126                           ;RTCC.c: 92: i2c_wr(0xFF) ;
  1127  000B2C  0EFF               	movlw	255
  1128  000B2E  ECCE  F005         	call	_i2c_wr
  1129                           
  1130                           ;RTCC.c: 93: i2c_stop() ;
  1131  000B32  ECDF  F005         	call	_i2c_stop	;wreg free
  1132  000B36  0012               	return		;funcret
  1133  000B38                     __end_of_rtcc_wr:
  1134                           	callstack 0
  1135                           
  1136 ;; *************** function _rtcc_rd *****************
  1137 ;; Defined at:
  1138 ;;		line 57 in file "RTCC.c"
  1139 ;; Parameters:    Size  Location     Type
  1140 ;;		None
  1141 ;; Auto vars:     Size  Location     Type
  1142 ;;  rtcc_buf        1    0        unsigned char 
  1143 ;; Return value:  Size  Location     Type
  1144 ;;                  1    wreg      unsigned char 
  1145 ;; Registers used:
  1146 ;;		wreg, status,2, cstack
  1147 ;; Tracked objects:
  1148 ;;		On entry : 0/0
  1149 ;;		On exit  : 0/0
  1150 ;;		Unchanged: 0/0
  1151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1152 ;;      Params:         0       0       0       0       0       0       0
  1153 ;;      Locals:         1       0       0       0       0       0       0
  1154 ;;      Temps:          0       0       0       0       0       0       0
  1155 ;;      Totals:         1       0       0       0       0       0       0
  1156 ;;Total ram usage:        1 bytes
  1157 ;; Hardware stack levels used:    1
  1158 ;; Hardware stack levels required when called:    2
  1159 ;; This function calls:
  1160 ;;		_i2c_nack
  1161 ;;		_i2c_rd
  1162 ;;		_i2c_restart
  1163 ;;		_i2c_start
  1164 ;;		_i2c_stop
  1165 ;;		_i2c_wr
  1166 ;; This function is called by:
  1167 ;;		_main
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           	psect	text5
  1172  000AD2                     __ptext5:
  1173                           	callstack 0
  1174  000AD2                     _rtcc_rd:
  1175                           	callstack 28
  1176  000AD2                     
  1177                           ;RTCC.c: 59: unsigned char rtcc_buf;;RTCC.c: 60: i2c_start() ;
  1178  000AD2  ECE3  F005         	call	_i2c_start	;wreg free
  1179                           
  1180                           ;RTCC.c: 61: i2c_wr(0xDE) ;
  1181  000AD6  0EDE               	movlw	222
  1182  000AD8  ECCE  F005         	call	_i2c_wr
  1183                           
  1184                           ;RTCC.c: 62: i2c_wr(0x00) ;
  1185  000ADC  0E00               	movlw	0
  1186  000ADE  ECCE  F005         	call	_i2c_wr
  1187                           
  1188                           ;RTCC.c: 63: i2c_restart() ;
  1189  000AE2  ECE7  F005         	call	_i2c_restart	;wreg free
  1190                           
  1191                           ;RTCC.c: 64: i2c_wr(0xDF) ;
  1192  000AE6  0EDF               	movlw	223
  1193  000AE8  ECCE  F005         	call	_i2c_wr
  1194  000AEC  ECC7  F005         	call	_i2c_rd	;wreg free
  1195                           
  1196                           ;RTCC.c: 66: i2c_nack() ;
  1197  000AF0  ECDA  F005         	call	_i2c_nack	;wreg free
  1198                           
  1199                           ;RTCC.c: 67: i2c_stop() ;
  1200  000AF4  ECDF  F005         	call	_i2c_stop	;wreg free
  1201  000AF8  0012               	return		;funcret
  1202  000AFA                     __end_of_rtcc_rd:
  1203                           	callstack 0
  1204                           
  1205 ;; *************** function _i2c_wr *****************
  1206 ;; Defined at:
  1207 ;;		line 116 in file "hw_I2C.c"
  1208 ;; Parameters:    Size  Location     Type
  1209 ;;  i2c_data        1    wreg     unsigned char 
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;  i2c_data        1    2[COMRAM] unsigned char 
  1212 ;; Return value:  Size  Location     Type
  1213 ;;                  1    wreg      void 
  1214 ;; Registers used:
  1215 ;;		wreg, status,2, cstack
  1216 ;; Tracked objects:
  1217 ;;		On entry : 0/0
  1218 ;;		On exit  : 0/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1221 ;;      Params:         0       0       0       0       0       0       0
  1222 ;;      Locals:         1       0       0       0       0       0       0
  1223 ;;      Temps:          0       0       0       0       0       0       0
  1224 ;;      Totals:         1       0       0       0       0       0       0
  1225 ;;Total ram usage:        1 bytes
  1226 ;; Hardware stack levels used:    1
  1227 ;; Hardware stack levels required when called:    1
  1228 ;; This function calls:
  1229 ;;		_poll_if_tim1
  1230 ;; This function is called by:
  1231 ;;		_rtcc_rd
  1232 ;;		_rtcc_wr
  1233 ;; This function uses a non-reentrant model
  1234 ;;
  1235                           
  1236                           	psect	text6
  1237  000B9C                     __ptext6:
  1238                           	callstack 0
  1239  000B9C                     _i2c_wr:
  1240                           	callstack 28
  1241                           
  1242                           ;incstack = 0
  1243                           ;i2c_wr@i2c_data stored from wreg
  1244  000B9C  6E03               	movwf	i2c_wr@i2c_data^0,c
  1245  000B9E  C003  FFC9         	movff	i2c_wr@i2c_data,4041	;volatile
  1246  000BA2                     
  1247                           ;hw_I2C.c: 119: poll_if_tim1() ;
  1248  000BA2  EC2A  F005         	call	_poll_if_tim1	;wreg free
  1249  000BA6  0012               	return		;funcret
  1250  000BA8                     __end_of_i2c_wr:
  1251                           	callstack 0
  1252                           
  1253 ;; *************** function _i2c_stop *****************
  1254 ;; Defined at:
  1255 ;;		line 112 in file "hw_I2C.c"
  1256 ;; Parameters:    Size  Location     Type
  1257 ;;		None
  1258 ;; Auto vars:     Size  Location     Type
  1259 ;;		None
  1260 ;; Return value:  Size  Location     Type
  1261 ;;                  1    wreg      void 
  1262 ;; Registers used:
  1263 ;;		wreg, status,2, cstack
  1264 ;; Tracked objects:
  1265 ;;		On entry : 0/0
  1266 ;;		On exit  : 0/0
  1267 ;;		Unchanged: 0/0
  1268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1269 ;;      Params:         0       0       0       0       0       0       0
  1270 ;;      Locals:         0       0       0       0       0       0       0
  1271 ;;      Temps:          0       0       0       0       0       0       0
  1272 ;;      Totals:         0       0       0       0       0       0       0
  1273 ;;Total ram usage:        0 bytes
  1274 ;; Hardware stack levels used:    1
  1275 ;; Hardware stack levels required when called:    1
  1276 ;; This function calls:
  1277 ;;		_poll_if_tim1
  1278 ;; This function is called by:
  1279 ;;		_rtcc_rd
  1280 ;;		_rtcc_wr
  1281 ;; This function uses a non-reentrant model
  1282 ;;
  1283                           
  1284                           	psect	text7
  1285  000BBE                     __ptext7:
  1286                           	callstack 0
  1287  000BBE                     _i2c_stop:
  1288                           	callstack 28
  1289  000BBE  84C5               	bsf	4037,2,c	;volatile
  1290  000BC0                     
  1291                           ;hw_I2C.c: 114: poll_if_tim1() ; }
  1292  000BC0  EC2A  F005         	call	_poll_if_tim1	;wreg free
  1293  000BC4  0012               	return		;funcret
  1294  000BC6                     __end_of_i2c_stop:
  1295                           	callstack 0
  1296                           
  1297 ;; *************** function _i2c_start *****************
  1298 ;; Defined at:
  1299 ;;		line 101 in file "hw_I2C.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;		None
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;		None
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      void 
  1306 ;; Registers used:
  1307 ;;		wreg, status,2, cstack
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1313 ;;      Params:         0       0       0       0       0       0       0
  1314 ;;      Locals:         0       0       0       0       0       0       0
  1315 ;;      Temps:          0       0       0       0       0       0       0
  1316 ;;      Totals:         0       0       0       0       0       0       0
  1317 ;;Total ram usage:        0 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; Hardware stack levels required when called:    1
  1320 ;; This function calls:
  1321 ;;		_poll_if_tim1
  1322 ;; This function is called by:
  1323 ;;		_rtcc_rd
  1324 ;;		_rtcc_wr
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328                           	psect	text8
  1329  000BC6                     __ptext8:
  1330                           	callstack 0
  1331  000BC6                     _i2c_start:
  1332                           	callstack 28
  1333  000BC6                     
  1334                           ;hw_I2C.c: 103: SEN = 1 ;
  1335  000BC6  80C5               	bsf	4037,0,c	;volatile
  1336  000BC8                     
  1337                           ;hw_I2C.c: 104: poll_if_tim1() ;
  1338  000BC8  EC2A  F005         	call	_poll_if_tim1	;wreg free
  1339  000BCC  0012               	return		;funcret
  1340  000BCE                     __end_of_i2c_start:
  1341                           	callstack 0
  1342                           
  1343 ;; *************** function _i2c_restart *****************
  1344 ;; Defined at:
  1345 ;;		line 107 in file "hw_I2C.c"
  1346 ;; Parameters:    Size  Location     Type
  1347 ;;		None
  1348 ;; Auto vars:     Size  Location     Type
  1349 ;;		None
  1350 ;; Return value:  Size  Location     Type
  1351 ;;                  1    wreg      void 
  1352 ;; Registers used:
  1353 ;;		wreg, status,2, cstack
  1354 ;; Tracked objects:
  1355 ;;		On entry : 0/0
  1356 ;;		On exit  : 0/0
  1357 ;;		Unchanged: 0/0
  1358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1359 ;;      Params:         0       0       0       0       0       0       0
  1360 ;;      Locals:         0       0       0       0       0       0       0
  1361 ;;      Temps:          0       0       0       0       0       0       0
  1362 ;;      Totals:         0       0       0       0       0       0       0
  1363 ;;Total ram usage:        0 bytes
  1364 ;; Hardware stack levels used:    1
  1365 ;; Hardware stack levels required when called:    1
  1366 ;; This function calls:
  1367 ;;		_poll_if_tim1
  1368 ;; This function is called by:
  1369 ;;		_rtcc_rd
  1370 ;; This function uses a non-reentrant model
  1371 ;;
  1372                           
  1373                           	psect	text9
  1374  000BCE                     __ptext9:
  1375                           	callstack 0
  1376  000BCE                     _i2c_restart:
  1377                           	callstack 28
  1378  000BCE  82C5               	bsf	4037,1,c	;volatile
  1379  000BD0                     
  1380                           ;hw_I2C.c: 109: poll_if_tim1() ;
  1381  000BD0  EC2A  F005         	call	_poll_if_tim1	;wreg free
  1382  000BD4  0012               	return		;funcret
  1383  000BD6                     __end_of_i2c_restart:
  1384                           	callstack 0
  1385                           
  1386 ;; *************** function _i2c_rd *****************
  1387 ;; Defined at:
  1388 ;;		line 121 in file "hw_I2C.c"
  1389 ;; Parameters:    Size  Location     Type
  1390 ;;		None
  1391 ;; Auto vars:     Size  Location     Type
  1392 ;;  rtcc_buf        1    2[COMRAM] unsigned char 
  1393 ;; Return value:  Size  Location     Type
  1394 ;;                  1    wreg      unsigned char 
  1395 ;; Registers used:
  1396 ;;		wreg, status,2, cstack
  1397 ;; Tracked objects:
  1398 ;;		On entry : 0/0
  1399 ;;		On exit  : 0/0
  1400 ;;		Unchanged: 0/0
  1401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1402 ;;      Params:         0       0       0       0       0       0       0
  1403 ;;      Locals:         1       0       0       0       0       0       0
  1404 ;;      Temps:          0       0       0       0       0       0       0
  1405 ;;      Totals:         1       0       0       0       0       0       0
  1406 ;;Total ram usage:        1 bytes
  1407 ;; Hardware stack levels used:    1
  1408 ;; Hardware stack levels required when called:    1
  1409 ;; This function calls:
  1410 ;;		_poll_if_tim1
  1411 ;; This function is called by:
  1412 ;;		_rtcc_rd
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           	psect	text10
  1417  000B8E                     __ptext10:
  1418                           	callstack 0
  1419  000B8E                     _i2c_rd:
  1420                           	callstack 28
  1421  000B8E                     
  1422                           ;hw_I2C.c: 123: unsigned char rtcc_buf ;;hw_I2C.c: 124: RCEN = 1 ;
  1423  000B8E  86C5               	bsf	4037,3,c	;volatile
  1424  000B90                     
  1425                           ;hw_I2C.c: 125: poll_if_tim1() ;
  1426  000B90  EC2A  F005         	call	_poll_if_tim1	;wreg free
  1427  000B94                     
  1428                           ;hw_I2C.c: 126: rtcc_buf = SSPBUF ;
  1429  000B94  CFC9 F003          	movff	4041,i2c_rd@rtcc_buf	;volatile
  1430  000B98                     
  1431                           ;hw_I2C.c: 127: return rtcc_buf;
  1432  000B98  5003               	movf	i2c_rd@rtcc_buf^0,w,c
  1433  000B9A  0012               	return		;funcret
  1434  000B9C                     __end_of_i2c_rd:
  1435                           	callstack 0
  1436                           
  1437 ;; *************** function _i2c_nack *****************
  1438 ;; Defined at:
  1439 ;;		line 135 in file "hw_I2C.c"
  1440 ;; Parameters:    Size  Location     Type
  1441 ;;		None
  1442 ;; Auto vars:     Size  Location     Type
  1443 ;;		None
  1444 ;; Return value:  Size  Location     Type
  1445 ;;                  1    wreg      void 
  1446 ;; Registers used:
  1447 ;;		wreg, status,2, cstack
  1448 ;; Tracked objects:
  1449 ;;		On entry : 0/0
  1450 ;;		On exit  : 0/0
  1451 ;;		Unchanged: 0/0
  1452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1453 ;;      Params:         0       0       0       0       0       0       0
  1454 ;;      Locals:         0       0       0       0       0       0       0
  1455 ;;      Temps:          0       0       0       0       0       0       0
  1456 ;;      Totals:         0       0       0       0       0       0       0
  1457 ;;Total ram usage:        0 bytes
  1458 ;; Hardware stack levels used:    1
  1459 ;; Hardware stack levels required when called:    1
  1460 ;; This function calls:
  1461 ;;		_poll_if_tim1
  1462 ;; This function is called by:
  1463 ;;		_rtcc_rd
  1464 ;; This function uses a non-reentrant model
  1465 ;;
  1466                           
  1467                           	psect	text11
  1468  000BB4                     __ptext11:
  1469                           	callstack 0
  1470  000BB4                     _i2c_nack:
  1471                           	callstack 28
  1472  000BB4  8AC5               	bsf	197,5,c	;volatile
  1473                           
  1474                           ;hw_I2C.c: 137: SSPCON2bits.ACKEN = 1 ;
  1475  000BB6  88C5               	bsf	197,4,c	;volatile
  1476  000BB8                     
  1477                           ;hw_I2C.c: 138: poll_if_tim1() ; }
  1478  000BB8  EC2A  F005         	call	_poll_if_tim1	;wreg free
  1479  000BBC  0012               	return		;funcret
  1480  000BBE                     __end_of_i2c_nack:
  1481                           	callstack 0
  1482                           
  1483 ;; *************** function _poll_if_tim1 *****************
  1484 ;; Defined at:
  1485 ;;		line 86 in file "hw_I2C.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;		None
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;  err_flg         1    0        unsigned char 
  1490 ;; Return value:  Size  Location     Type
  1491 ;;                  1    wreg      void 
  1492 ;; Registers used:
  1493 ;;		wreg, status,2
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1499 ;;      Params:         0       0       0       0       0       0       0
  1500 ;;      Locals:         1       0       0       0       0       0       0
  1501 ;;      Temps:          1       0       0       0       0       0       0
  1502 ;;      Totals:         2       0       0       0       0       0       0
  1503 ;;Total ram usage:        2 bytes
  1504 ;; Hardware stack levels used:    1
  1505 ;; This function calls:
  1506 ;;		Nothing
  1507 ;; This function is called by:
  1508 ;;		_i2c_start
  1509 ;;		_i2c_restart
  1510 ;;		_i2c_stop
  1511 ;;		_i2c_wr
  1512 ;;		_i2c_rd
  1513 ;;		_i2c_nack
  1514 ;;		_i2c_ack
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           	psect	text12
  1519  000A54                     __ptext12:
  1520                           	callstack 0
  1521  000A54                     _poll_if_tim1:
  1522                           	callstack 28
  1523  000A54                     
  1524                           ;hw_I2C.c: 88: TMR1H = ~(10000/256)&0xff ;
  1525  000A54  0ED8               	movlw	216
  1526  000A56  6ECF               	movwf	207,c	;volatile
  1527                           
  1528                           ;hw_I2C.c: 89: TMR1L = ~(10000%256)&0xff ;
  1529  000A58  0EEF               	movlw	239
  1530  000A5A  6ECE               	movwf	206,c	;volatile
  1531  000A5C                     
  1532                           ;hw_I2C.c: 90: T1CONbits.TMR1ON = 1 ;
  1533  000A5C  80CD               	bsf	205,0,c	;volatile
  1534  000A5E                     l1072:
  1535  000A5E  0E00               	movlw	0
  1536  000A60  B69E               	btfsc	158,3,c	;volatile
  1537  000A62  0E01               	movlw	1
  1538  000A64  B09E               	btfsc	158,0,c	;volatile
  1539  000A66  0E01               	movlw	1
  1540  000A68  B0E8               	btfsc	wreg,0,c
  1541  000A6A  EF39  F005         	goto	u11
  1542  000A6E  EF3D  F005         	goto	u10
  1543  000A72                     u11:
  1544  000A72  6A01               	clrf	??_poll_if_tim1^0,c
  1545  000A74  2A01               	incf	??_poll_if_tim1^0,f,c
  1546  000A76  EF3E  F005         	goto	u18
  1547  000A7A                     u10:
  1548  000A7A  6A01               	clrf	??_poll_if_tim1^0,c
  1549  000A7C                     u18:
  1550  000A7C  5001               	movf	??_poll_if_tim1^0,w,c
  1551  000A7E  B4D8               	btfsc	status,2,c
  1552  000A80  EF44  F005         	goto	u21
  1553  000A84  EF46  F005         	goto	u20
  1554  000A88                     u21:
  1555  000A88  EF2F  F005         	goto	l1072
  1556  000A8C                     u20:
  1557  000A8C                     
  1558                           ;hw_I2C.c: 92: if (PIR1bits.TMR1IF) { err_flg = 0x01 ; }
  1559  000A8C  A09E               	btfss	158,0,c	;volatile
  1560  000A8E  EF4B  F005         	goto	u31
  1561  000A92  EF4D  F005         	goto	u30
  1562  000A96                     u31:
  1563  000A96  EF4D  F005         	goto	l1076
  1564  000A9A                     u30:
  1565  000A9A                     l1076:
  1566                           
  1567                           ;hw_I2C.c: 93: PIR1bits.SSPIF = 0 ;
  1568  000A9A  969E               	bcf	158,3,c	;volatile
  1569  000A9C                     
  1570                           ;hw_I2C.c: 94: PIR1bits.TMR1IF =0 ;
  1571  000A9C  909E               	bcf	158,0,c	;volatile
  1572  000A9E                     
  1573                           ;hw_I2C.c: 95: T1CONbits.TMR1ON ;
  1574  000A9E  50CD               	movf	205,w,c	;volatile
  1575  000AA0  0012               	return		;funcret
  1576  000AA2                     __end_of_poll_if_tim1:
  1577                           	callstack 0
  1578                           
  1579 ;; *************** function _UART_send_string *****************
  1580 ;; Defined at:
  1581 ;;		line 54 in file "hw_uart.c"
  1582 ;; Parameters:    Size  Location     Type
  1583 ;;  st_pt           2    1[COMRAM] PTR unsigned char 
  1584 ;;		 -> main@memory_string(10), main@_adc_str(20), 
  1585 ;; Auto vars:     Size  Location     Type
  1586 ;;		None
  1587 ;; Return value:  Size  Location     Type
  1588 ;;                  1    wreg      void 
  1589 ;; Registers used:
  1590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1591 ;; Tracked objects:
  1592 ;;		On entry : 0/0
  1593 ;;		On exit  : 0/0
  1594 ;;		Unchanged: 0/0
  1595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1596 ;;      Params:         2       0       0       0       0       0       0
  1597 ;;      Locals:         0       0       0       0       0       0       0
  1598 ;;      Temps:          0       0       0       0       0       0       0
  1599 ;;      Totals:         2       0       0       0       0       0       0
  1600 ;;Total ram usage:        2 bytes
  1601 ;; Hardware stack levels used:    1
  1602 ;; Hardware stack levels required when called:    1
  1603 ;; This function calls:
  1604 ;;		_UART_send_char
  1605 ;; This function is called by:
  1606 ;;		_main
  1607 ;; This function uses a non-reentrant model
  1608 ;;
  1609                           
  1610                           	psect	text13
  1611  000AA2                     __ptext13:
  1612                           	callstack 0
  1613  000AA2                     _UART_send_string:
  1614                           	callstack 29
  1615  000AA2                     
  1616                           ;hw_uart.c: 56: while(*st_pt)
  1617  000AA2  EF5C  F005         	goto	l1520
  1618  000AA6                     l1516:
  1619                           
  1620                           ;hw_uart.c: 57: UART_send_char(*st_pt++);
  1621  000AA6  C002  FFD9         	movff	UART_send_string@st_pt,fsr2l
  1622  000AAA  C003  FFDA         	movff	UART_send_string@st_pt+1,fsr2h
  1623  000AAE  50DF               	movf	indf2,w,c
  1624  000AB0  ECA7  F005         	call	_UART_send_char
  1625  000AB4  4A02               	infsnz	UART_send_string@st_pt^0,f,c
  1626  000AB6  2A03               	incf	(UART_send_string@st_pt+1)^0,f,c
  1627  000AB8                     l1520:
  1628  000AB8  C002  FFD9         	movff	UART_send_string@st_pt,fsr2l
  1629  000ABC  C003  FFDA         	movff	UART_send_string@st_pt+1,fsr2h
  1630  000AC0  50DF               	movf	indf2,w,c
  1631  000AC2  A4D8               	btfss	status,2,c
  1632  000AC4  EF66  F005         	goto	u411
  1633  000AC8  EF68  F005         	goto	u410
  1634  000ACC                     u411:
  1635  000ACC  EF53  F005         	goto	l1516
  1636  000AD0                     u410:
  1637  000AD0  0012               	return		;funcret
  1638  000AD2                     __end_of_UART_send_string:
  1639                           	callstack 0
  1640                           
  1641 ;; *************** function _UART_send_char *****************
  1642 ;; Defined at:
  1643 ;;		line 27 in file "hw_uart.c"
  1644 ;; Parameters:    Size  Location     Type
  1645 ;;  bt              1    wreg     unsigned char 
  1646 ;; Auto vars:     Size  Location     Type
  1647 ;;  bt              1    0[COMRAM] unsigned char 
  1648 ;; Return value:  Size  Location     Type
  1649 ;;                  1    wreg      void 
  1650 ;; Registers used:
  1651 ;;		wreg
  1652 ;; Tracked objects:
  1653 ;;		On entry : 0/0
  1654 ;;		On exit  : 0/0
  1655 ;;		Unchanged: 0/0
  1656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1657 ;;      Params:         0       0       0       0       0       0       0
  1658 ;;      Locals:         1       0       0       0       0       0       0
  1659 ;;      Temps:          0       0       0       0       0       0       0
  1660 ;;      Totals:         1       0       0       0       0       0       0
  1661 ;;Total ram usage:        1 bytes
  1662 ;; Hardware stack levels used:    1
  1663 ;; This function calls:
  1664 ;;		Nothing
  1665 ;; This function is called by:
  1666 ;;		_UART_send_string
  1667 ;; This function uses a non-reentrant model
  1668 ;;
  1669                           
  1670                           	psect	text14
  1671  000B4E                     __ptext14:
  1672                           	callstack 0
  1673  000B4E                     _UART_send_char:
  1674                           	callstack 29
  1675                           
  1676                           ;incstack = 0
  1677                           ;UART_send_char@bt stored from wreg
  1678  000B4E  6E01               	movwf	UART_send_char@bt^0,c
  1679  000B50                     l97:
  1680  000B50  A89E               	btfss	3998,4,c	;volatile
  1681  000B52  EFAD  F005         	goto	u41
  1682  000B56  EFAF  F005         	goto	u40
  1683  000B5A                     u41:
  1684  000B5A  EFA8  F005         	goto	l97
  1685  000B5E                     u40:
  1686  000B5E                     
  1687                           ;hw_uart.c: 30: TXREG = bt;
  1688  000B5E  C001  FFAD         	movff	UART_send_char@bt,4013	;volatile
  1689  000B62  0012               	return		;funcret
  1690  000B64                     __end_of_UART_send_char:
  1691                           	callstack 0
  1692                           
  1693 ;; *************** function _UART_Init *****************
  1694 ;; Defined at:
  1695 ;;		line 10 in file "hw_uart.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;  baud_rate       2    0[COMRAM] unsigned int 
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;		None
  1700 ;; Return value:  Size  Location     Type
  1701 ;;                  1    wreg      void 
  1702 ;; Registers used:
  1703 ;;		wreg, status,2
  1704 ;; Tracked objects:
  1705 ;;		On entry : 0/0
  1706 ;;		On exit  : 0/0
  1707 ;;		Unchanged: 0/0
  1708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1709 ;;      Params:         2       0       0       0       0       0       0
  1710 ;;      Locals:         0       0       0       0       0       0       0
  1711 ;;      Temps:          0       0       0       0       0       0       0
  1712 ;;      Totals:         2       0       0       0       0       0       0
  1713 ;;Total ram usage:        2 bytes
  1714 ;; Hardware stack levels used:    1
  1715 ;; This function calls:
  1716 ;;		Nothing
  1717 ;; This function is called by:
  1718 ;;		_main
  1719 ;; This function uses a non-reentrant model
  1720 ;;
  1721                           
  1722                           	psect	text15
  1723  000B7A                     __ptext15:
  1724                           	callstack 0
  1725  000B7A                     _UART_Init:
  1726                           	callstack 30
  1727  000B7A                     
  1728                           ;hw_uart.c: 13: TXSTAbits.TXEN = 1;
  1729  000B7A  8AAC               	bsf	172,5,c	;volatile
  1730                           
  1731                           ;hw_uart.c: 15: TXSTAbits.SYNC = 0;
  1732  000B7C  98AC               	bcf	172,4,c	;volatile
  1733                           
  1734                           ;hw_uart.c: 17: TXSTAbits.BRGH = 0;
  1735  000B7E  94AC               	bcf	172,2,c	;volatile
  1736                           
  1737                           ;hw_uart.c: 19: BAUDCONbits.BRG16 = 0;
  1738  000B80  96B8               	bcf	184,3,c	;volatile
  1739                           
  1740                           ;hw_uart.c: 21: RCSTAbits.SPEN = 1;
  1741  000B82  8EAB               	bsf	171,7,c	;volatile
  1742  000B84                     
  1743                           ;hw_uart.c: 23: SPBRGH = 0x00;
  1744  000B84  0E00               	movlw	0
  1745  000B86  6EB0               	movwf	176,c	;volatile
  1746                           
  1747                           ;hw_uart.c: 24: SPBRG = 0x0C;
  1748  000B88  0E0C               	movlw	12
  1749  000B8A  6EAF               	movwf	175,c	;volatile
  1750  000B8C  0012               	return		;funcret
  1751  000B8E                     __end_of_UART_Init:
  1752                           	callstack 0
  1753                           
  1754 ;; *************** function _Read_ADC *****************
  1755 ;; Defined at:
  1756 ;;		line 43 in file "hw_adc.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;  channel         1    wreg     unsigned char 
  1759 ;; Auto vars:     Size  Location     Type
  1760 ;;  channel         1    6[COMRAM] unsigned char 
  1761 ;;  result          2    4[COMRAM] unsigned int 
  1762 ;; Return value:  Size  Location     Type
  1763 ;;                  2    0[COMRAM] unsigned int 
  1764 ;; Registers used:
  1765 ;;		wreg, status,2, status,0
  1766 ;; Tracked objects:
  1767 ;;		On entry : 0/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1771 ;;      Params:         2       0       0       0       0       0       0
  1772 ;;      Locals:         3       0       0       0       0       0       0
  1773 ;;      Temps:          2       0       0       0       0       0       0
  1774 ;;      Totals:         7       0       0       0       0       0       0
  1775 ;;Total ram usage:        7 bytes
  1776 ;; Hardware stack levels used:    1
  1777 ;; This function calls:
  1778 ;;		Nothing
  1779 ;; This function is called by:
  1780 ;;		_main
  1781 ;; This function uses a non-reentrant model
  1782 ;;
  1783                           
  1784                           	psect	text16
  1785  0009F2                     __ptext16:
  1786                           	callstack 0
  1787  0009F2                     _Read_ADC:
  1788                           	callstack 30
  1789                           
  1790                           ;incstack = 0
  1791                           ;Read_ADC@channel stored from wreg
  1792  0009F2  6E07               	movwf	Read_ADC@channel^0,c
  1793  0009F4                     
  1794                           ;hw_adc.c: 47: if (channel == 0)
  1795  0009F4  5007               	movf	Read_ADC@channel^0,w,c
  1796  0009F6  A4D8               	btfss	status,2,c
  1797  0009F8  EF00  F005         	goto	u331
  1798  0009FC  EF02  F005         	goto	u330
  1799  000A00                     u331:
  1800  000A00  EF06  F005         	goto	l1454
  1801  000A04                     u330:
  1802  000A04                     
  1803                           ;hw_adc.c: 48: {;hw_adc.c: 49: ADCON0bits.CHS = 0b0001;
  1804  000A04  50C2               	movf	194,w,c	;volatile
  1805  000A06  0BC3               	andlw	-61
  1806  000A08  0904               	iorlw	4
  1807  000A0A  6EC2               	movwf	194,c	;volatile
  1808  000A0C                     l1454:
  1809                           
  1810                           ;hw_adc.c: 51: };hw_adc.c: 52: if (channel == 1)
  1811  000A0C  0407               	decf	Read_ADC@channel^0,w,c
  1812  000A0E  A4D8               	btfss	status,2,c
  1813  000A10  EF0C  F005         	goto	u341
  1814  000A14  EF0E  F005         	goto	u340
  1815  000A18                     u341:
  1816  000A18  EF12  F005         	goto	l1458
  1817  000A1C                     u340:
  1818  000A1C                     
  1819                           ;hw_adc.c: 53: {;hw_adc.c: 55: ADCON0bits.CHS = 0b0010;
  1820  000A1C  50C2               	movf	194,w,c	;volatile
  1821  000A1E  0BC3               	andlw	-61
  1822  000A20  0908               	iorlw	8
  1823  000A22  6EC2               	movwf	194,c	;volatile
  1824  000A24                     l1458:
  1825                           
  1826                           ;hw_adc.c: 57: };hw_adc.c: 59: ADCON0bits.GO = 1;
  1827  000A24  82C2               	bsf	194,1,c	;volatile
  1828  000A26                     l143:
  1829  000A26  B2C2               	btfsc	194,1,c	;volatile
  1830  000A28  EF18  F005         	goto	u351
  1831  000A2C  EF1A  F005         	goto	u350
  1832  000A30                     u351:
  1833  000A30  EF13  F005         	goto	l143
  1834  000A34                     u350:
  1835  000A34                     
  1836                           ;hw_adc.c: 61: result = (ADRESH << 8) | (ADRESL);
  1837  000A34  50C3               	movf	195,w,c	;volatile
  1838  000A36  CFC4 F003          	movff	4036,??_Read_ADC	;volatile
  1839  000A3A  6A04               	clrf	(??_Read_ADC+1)^0,c
  1840  000A3C  C003  F004         	movff	??_Read_ADC,??_Read_ADC+1
  1841  000A40  6A03               	clrf	??_Read_ADC^0,c
  1842  000A42  1003               	iorwf	??_Read_ADC^0,w,c
  1843  000A44  6E05               	movwf	Read_ADC@result^0,c
  1844  000A46  5004               	movf	(??_Read_ADC+1)^0,w,c
  1845  000A48  6E06               	movwf	(Read_ADC@result+1)^0,c
  1846  000A4A                     
  1847                           ;hw_adc.c: 63: return result;
  1848  000A4A  C005  F001         	movff	Read_ADC@result,?_Read_ADC
  1849  000A4E  C006  F002         	movff	Read_ADC@result+1,?_Read_ADC+1
  1850  000A52  0012               	return		;funcret
  1851  000A54                     __end_of_Read_ADC:
  1852                           	callstack 0
  1853                           
  1854 ;; *************** function _PORT_Initialize *****************
  1855 ;; Defined at:
  1856 ;;		line 97 in file "Test.c"
  1857 ;; Parameters:    Size  Location     Type
  1858 ;;		None
  1859 ;; Auto vars:     Size  Location     Type
  1860 ;;		None
  1861 ;; Return value:  Size  Location     Type
  1862 ;;                  1    wreg      void 
  1863 ;; Registers used:
  1864 ;;		None
  1865 ;; Tracked objects:
  1866 ;;		On entry : 0/0
  1867 ;;		On exit  : 0/0
  1868 ;;		Unchanged: 0/0
  1869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1870 ;;      Params:         0       0       0       0       0       0       0
  1871 ;;      Locals:         0       0       0       0       0       0       0
  1872 ;;      Temps:          0       0       0       0       0       0       0
  1873 ;;      Totals:         0       0       0       0       0       0       0
  1874 ;;Total ram usage:        0 bytes
  1875 ;; Hardware stack levels used:    1
  1876 ;; This function calls:
  1877 ;;		Nothing
  1878 ;; This function is called by:
  1879 ;;		_main
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           	psect	text17
  1884  000BD6                     __ptext17:
  1885                           	callstack 0
  1886  000BD6                     _PORT_Initialize:
  1887                           	callstack 30
  1888  000BD6                     
  1889                           ;Test.c: 99: TRISC6 = 1;
  1890  000BD6  8C94               	bsf	3988,6,c	;volatile
  1891                           
  1892                           ;Test.c: 100: TRISC7 = 1;
  1893  000BD8  8E94               	bsf	3988,7,c	;volatile
  1894  000BDA  0012               	return		;funcret
  1895  000BDC                     __end_of_PORT_Initialize:
  1896                           	callstack 0
  1897                           
  1898 ;; *************** function _InitI2C *****************
  1899 ;; Defined at:
  1900 ;;		line 19 in file "hw_I2C.c"
  1901 ;; Parameters:    Size  Location     Type
  1902 ;;		None
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;		None
  1905 ;; Return value:  Size  Location     Type
  1906 ;;                  1    wreg      void 
  1907 ;; Registers used:
  1908 ;;		wreg, status,2
  1909 ;; Tracked objects:
  1910 ;;		On entry : 0/0
  1911 ;;		On exit  : 0/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1914 ;;      Params:         0       0       0       0       0       0       0
  1915 ;;      Locals:         0       0       0       0       0       0       0
  1916 ;;      Temps:          0       0       0       0       0       0       0
  1917 ;;      Totals:         0       0       0       0       0       0       0
  1918 ;;Total ram usage:        0 bytes
  1919 ;; Hardware stack levels used:    1
  1920 ;; This function calls:
  1921 ;;		Nothing
  1922 ;; This function is called by:
  1923 ;;		_main
  1924 ;; This function uses a non-reentrant model
  1925 ;;
  1926                           
  1927                           	psect	text18
  1928  000B64                     __ptext18:
  1929                           	callstack 0
  1930  000B64                     _InitI2C:
  1931                           	callstack 30
  1932  000B64                     
  1933                           ;hw_I2C.c: 21: TRISC3 = 1;
  1934  000B64  8694               	bsf	3988,3,c	;volatile
  1935                           
  1936                           ;hw_I2C.c: 22: TRISC4 = 1;
  1937  000B66  8894               	bsf	3988,4,c	;volatile
  1938  000B68                     
  1939                           ;hw_I2C.c: 24: SSPADD = 0x13;
  1940  000B68  0E13               	movlw	19
  1941  000B6A  6EC8               	movwf	200,c	;volatile
  1942  000B6C                     
  1943                           ;hw_I2C.c: 25: SSPCON1bits.SSPEN = 1;
  1944  000B6C  8AC6               	bsf	198,5,c	;volatile
  1945                           
  1946                           ;hw_I2C.c: 26: SSPCON1bits.SSPM = 0b1000;
  1947  000B6E  50C6               	movf	198,w,c	;volatile
  1948  000B70  0BF0               	andlw	-16
  1949  000B72  0908               	iorlw	8
  1950  000B74  6EC6               	movwf	198,c	;volatile
  1951  000B76                     
  1952                           ;hw_I2C.c: 27: SSPIF = 0;
  1953  000B76  969E               	bcf	3998,3,c	;volatile
  1954  000B78  0012               	return		;funcret
  1955  000B7A                     __end_of_InitI2C:
  1956                           	callstack 0
  1957                           
  1958 ;; *************** function _CLK_intialize *****************
  1959 ;; Defined at:
  1960 ;;		line 85 in file "Test.c"
  1961 ;; Parameters:    Size  Location     Type
  1962 ;;		None
  1963 ;; Auto vars:     Size  Location     Type
  1964 ;;		None
  1965 ;; Return value:  Size  Location     Type
  1966 ;;                  1    wreg      void 
  1967 ;; Registers used:
  1968 ;;		wreg, status,2
  1969 ;; Tracked objects:
  1970 ;;		On entry : 0/0
  1971 ;;		On exit  : 0/0
  1972 ;;		Unchanged: 0/0
  1973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1974 ;;      Params:         0       0       0       0       0       0       0
  1975 ;;      Locals:         0       0       0       0       0       0       0
  1976 ;;      Temps:          0       0       0       0       0       0       0
  1977 ;;      Totals:         0       0       0       0       0       0       0
  1978 ;;Total ram usage:        0 bytes
  1979 ;; Hardware stack levels used:    1
  1980 ;; This function calls:
  1981 ;;		Nothing
  1982 ;; This function is called by:
  1983 ;;		_main
  1984 ;; This function uses a non-reentrant model
  1985 ;;
  1986                           
  1987                           	psect	text19
  1988  000BA8                     __ptext19:
  1989                           	callstack 0
  1990  000BA8                     _CLK_intialize:
  1991                           	callstack 30
  1992  000BA8                     
  1993                           ;Test.c: 91: OSCCONbits.IRCF = 0b111;
  1994  000BA8  0E70               	movlw	112
  1995  000BAA  12D3               	iorwf	211,f,c	;volatile
  1996  000BAC                     
  1997                           ;Test.c: 93: OSCCONbits.IDLEN = 0b0;
  1998  000BAC  9ED3               	bcf	211,7,c	;volatile
  1999                           
  2000                           ;Test.c: 94: OSCCONbits.SCS = 0b11 ;
  2001  000BAE  0E03               	movlw	3
  2002  000BB0  12D3               	iorwf	211,f,c	;volatile
  2003  000BB2  0012               	return		;funcret
  2004  000BB4                     __end_of_CLK_intialize:
  2005                           	callstack 0
  2006                           
  2007 ;; *************** function _ADC_intialize *****************
  2008 ;; Defined at:
  2009 ;;		line 18 in file "hw_adc.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;		None
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;		None
  2014 ;; Return value:  Size  Location     Type
  2015 ;;                  1    wreg      void 
  2016 ;; Registers used:
  2017 ;;		wreg, status,2
  2018 ;; Tracked objects:
  2019 ;;		On entry : 0/0
  2020 ;;		On exit  : 0/0
  2021 ;;		Unchanged: 0/0
  2022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2023 ;;      Params:         0       0       0       0       0       0       0
  2024 ;;      Locals:         0       0       0       0       0       0       0
  2025 ;;      Temps:          0       0       0       0       0       0       0
  2026 ;;      Totals:         0       0       0       0       0       0       0
  2027 ;;Total ram usage:        0 bytes
  2028 ;; Hardware stack levels used:    1
  2029 ;; This function calls:
  2030 ;;		Nothing
  2031 ;; This function is called by:
  2032 ;;		_main
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           	psect	text20
  2037  000AFA                     __ptext20:
  2038                           	callstack 0
  2039  000AFA                     _ADC_intialize:
  2040                           	callstack 30
  2041  000AFA                     
  2042                           ;hw_adc.c: 25: TRISA1 = 1 ;
  2043  000AFA  8292               	bsf	3986,1,c	;volatile
  2044                           
  2045                           ;hw_adc.c: 26: TRISA2 = 1 ;
  2046  000AFC  8492               	bsf	3986,2,c	;volatile
  2047  000AFE                     
  2048                           ;hw_adc.c: 32: ADCON1bits.PCFG = 0b1100;
  2049  000AFE  50C1               	movf	193,w,c	;volatile
  2050  000B00  0BF0               	andlw	-16
  2051  000B02  090C               	iorlw	12
  2052  000B04  6EC1               	movwf	193,c	;volatile
  2053  000B06                     
  2054                           ;hw_adc.c: 33: ADCON1bits.VCFG0 = 0;
  2055  000B06  98C1               	bcf	193,4,c	;volatile
  2056  000B08                     
  2057                           ;hw_adc.c: 34: ADCON1bits.VCFG1 = 0 ;
  2058  000B08  9AC1               	bcf	193,5,c	;volatile
  2059                           
  2060                           ;hw_adc.c: 37: ADCON2bits.ADCS = 0b110;
  2061  000B0A  50C0               	movf	192,w,c	;volatile
  2062  000B0C  0BF8               	andlw	-8
  2063  000B0E  0906               	iorlw	6
  2064  000B10  6EC0               	movwf	192,c	;volatile
  2065                           
  2066                           ;hw_adc.c: 38: ADCON2bits.ACQT = 0b111;
  2067  000B12  0E38               	movlw	56
  2068  000B14  12C0               	iorwf	192,f,c	;volatile
  2069  000B16                     
  2070                           ;hw_adc.c: 39: ADCON2bits.ADFM = 1;
  2071  000B16  8EC0               	bsf	192,7,c	;volatile
  2072  000B18                     
  2073                           ;hw_adc.c: 40: ADCON0bits.ADON = 1 ;
  2074  000B18  80C2               	bsf	194,0,c	;volatile
  2075  000B1A  0012               	return		;funcret
  2076  000B1C                     __end_of_ADC_intialize:
  2077                           	callstack 0
  2078                           
  2079                           	psect	rparam
  2080  0000                     
  2081                           	psect	idloc
  2082                           
  2083                           ;Config register IDLOC0 @ 0x200000
  2084                           ;	unspecified, using default values
  2085  200000                     	org	2097152
  2086  200000  FF                 	db	255
  2087                           
  2088                           ;Config register IDLOC1 @ 0x200001
  2089                           ;	unspecified, using default values
  2090  200001                     	org	2097153
  2091  200001  FF                 	db	255
  2092                           
  2093                           ;Config register IDLOC2 @ 0x200002
  2094                           ;	unspecified, using default values
  2095  200002                     	org	2097154
  2096  200002  FF                 	db	255
  2097                           
  2098                           ;Config register IDLOC3 @ 0x200003
  2099                           ;	unspecified, using default values
  2100  200003                     	org	2097155
  2101  200003  FF                 	db	255
  2102                           
  2103                           ;Config register IDLOC4 @ 0x200004
  2104                           ;	unspecified, using default values
  2105  200004                     	org	2097156
  2106  200004  FF                 	db	255
  2107                           
  2108                           ;Config register IDLOC5 @ 0x200005
  2109                           ;	unspecified, using default values
  2110  200005                     	org	2097157
  2111  200005  FF                 	db	255
  2112                           
  2113                           ;Config register IDLOC6 @ 0x200006
  2114                           ;	unspecified, using default values
  2115  200006                     	org	2097158
  2116  200006  FF                 	db	255
  2117                           
  2118                           ;Config register IDLOC7 @ 0x200007
  2119                           ;	unspecified, using default values
  2120  200007                     	org	2097159
  2121  200007  FF                 	db	255
  2122                           
  2123                           	psect	config
  2124                           
  2125                           ; Padding undefined space
  2126  300000                     	org	3145728
  2127  300000  FF                 	db	255
  2128                           
  2129                           ;Config register CONFIG1H @ 0x300001
  2130                           ;	Oscillator Selection bits
  2131                           ;	OSC = INTIO7, Internal oscillator block, CLKO function on RA6, port function on RA7
  2132                           ;	Fail-Safe Clock Monitor Enable bit
  2133                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2134                           ;	Internal/External Oscillator Switchover bit
  2135                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2136  300001                     	org	3145729
  2137  300001  09                 	db	9
  2138                           
  2139                           ;Config register CONFIG2L @ 0x300002
  2140                           ;	Power-up Timer Enable bit
  2141                           ;	PWRT = OFF, PWRT disabled
  2142                           ;	Brown-out Reset Enable bits
  2143                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2144                           ;	Brown Out Reset Voltage bits
  2145                           ;	BORV = 3, Minimum setting
  2146  300002                     	org	3145730
  2147  300002  1F                 	db	31
  2148                           
  2149                           ;Config register CONFIG2H @ 0x300003
  2150                           ;	Watchdog Timer Enable bit
  2151                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  2152                           ;	Watchdog Timer Postscale Select bits
  2153                           ;	WDTPS = 32768, 1:32768
  2154  300003                     	org	3145731
  2155  300003  1E                 	db	30
  2156                           
  2157                           ; Padding undefined space
  2158  300004                     	org	3145732
  2159  300004  FF                 	db	255
  2160                           
  2161                           ;Config register CONFIG3H @ 0x300005
  2162                           ;	CCP2 MUX bit
  2163                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  2164                           ;	PORTB A/D Enable bit
  2165                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  2166                           ;	Low-Power Timer1 Oscillator Enable bit
  2167                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2168                           ;	MCLR Pin Enable bit
  2169                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2170  300005                     	org	3145733
  2171  300005  83                 	db	131
  2172                           
  2173                           ;Config register CONFIG4L @ 0x300006
  2174                           ;	Stack Full/Underflow Reset Enable bit
  2175                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2176                           ;	Single-Supply ICSP Enable bit
  2177                           ;	LVP = ON, Single-Supply ICSP enabled
  2178                           ;	Extended Instruction Set Enable bit
  2179                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2180                           ;	Background Debugger Enable bit
  2181                           ;	DEBUG = 0x1, unprogrammed default
  2182  300006                     	org	3145734
  2183  300006  85                 	db	133
  2184                           
  2185                           ; Padding undefined space
  2186  300007                     	org	3145735
  2187  300007  FF                 	db	255
  2188                           
  2189                           ;Config register CONFIG5L @ 0x300008
  2190                           ;	Code Protection bit
  2191                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  2192                           ;	Code Protection bit
  2193                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  2194                           ;	Code Protection bit
  2195                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  2196                           ;	Code Protection bit
  2197                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  2198  300008                     	org	3145736
  2199  300008  0F                 	db	15
  2200                           
  2201                           ;Config register CONFIG5H @ 0x300009
  2202                           ;	Boot Block Code Protection bit
  2203                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  2204                           ;	Data EEPROM Code Protection bit
  2205                           ;	CPD = OFF, Data EEPROM not code-protected
  2206  300009                     	org	3145737
  2207  300009  C0                 	db	192
  2208                           
  2209                           ;Config register CONFIG6L @ 0x30000A
  2210                           ;	Write Protection bit
  2211                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  2212                           ;	Write Protection bit
  2213                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  2214                           ;	Write Protection bit
  2215                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  2216                           ;	Write Protection bit
  2217                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  2218  30000A                     	org	3145738
  2219  30000A  0F                 	db	15
  2220                           
  2221                           ;Config register CONFIG6H @ 0x30000B
  2222                           ;	Configuration Register Write Protection bit
  2223                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2224                           ;	Boot Block Write Protection bit
  2225                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  2226                           ;	Data EEPROM Write Protection bit
  2227                           ;	WRTD = OFF, Data EEPROM not write-protected
  2228  30000B                     	org	3145739
  2229  30000B  E0                 	db	224
  2230                           
  2231                           ;Config register CONFIG7L @ 0x30000C
  2232                           ;	Table Read Protection bit
  2233                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  2234                           ;	Table Read Protection bit
  2235                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  2236                           ;	Table Read Protection bit
  2237                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  2238                           ;	Table Read Protection bit
  2239                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  2240  30000C                     	org	3145740
  2241  30000C  0F                 	db	15
  2242                           
  2243                           ;Config register CONFIG7H @ 0x30000D
  2244                           ;	Boot Block Table Read Protection bit
  2245                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  2246  30000D                     	org	3145741
  2247  30000D  40                 	db	64
  2248                           tosu	equ	0xFFF
  2249                           tosh	equ	0xFFE
  2250                           tosl	equ	0xFFD
  2251                           stkptr	equ	0xFFC
  2252                           pclatu	equ	0xFFB
  2253                           pclath	equ	0xFFA
  2254                           pcl	equ	0xFF9
  2255                           tblptru	equ	0xFF8
  2256                           tblptrh	equ	0xFF7
  2257                           tblptrl	equ	0xFF6
  2258                           tablat	equ	0xFF5
  2259                           prodh	equ	0xFF4
  2260                           prodl	equ	0xFF3
  2261                           indf0	equ	0xFEF
  2262                           postinc0	equ	0xFEE
  2263                           postdec0	equ	0xFED
  2264                           preinc0	equ	0xFEC
  2265                           plusw0	equ	0xFEB
  2266                           fsr0h	equ	0xFEA
  2267                           fsr0l	equ	0xFE9
  2268                           wreg	equ	0xFE8
  2269                           indf1	equ	0xFE7
  2270                           postinc1	equ	0xFE6
  2271                           postdec1	equ	0xFE5
  2272                           preinc1	equ	0xFE4
  2273                           plusw1	equ	0xFE3
  2274                           fsr1h	equ	0xFE2
  2275                           fsr1l	equ	0xFE1
  2276                           bsr	equ	0xFE0
  2277                           indf2	equ	0xFDF
  2278                           postinc2	equ	0xFDE
  2279                           postdec2	equ	0xFDD
  2280                           preinc2	equ	0xFDC
  2281                           plusw2	equ	0xFDB
  2282                           fsr2h	equ	0xFDA
  2283                           fsr2l	equ	0xFD9
  2284                           status	equ	0xFD8

Data Sizes:
    Strings     33
    Constant    10
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     81      95
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_3(CODE[12]), STR_2(CODE[11]), STR_1(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> main@memory_string(COMRAM[10]), main@_adc_str(COMRAM[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    UART_send_string@st_pt	PTR unsigned char  size(2) Largest target is 20
		 -> main@memory_string(COMRAM[10]), main@_adc_str(COMRAM[20]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _rtcc_wr->_i2c_wr
    _rtcc_rd->_i2c_rd
    _rtcc_rd->_i2c_wr
    _i2c_wr->_poll_if_tim1
    _i2c_stop->_poll_if_tim1
    _i2c_start->_poll_if_tim1
    _i2c_restart->_poll_if_tim1
    _i2c_rd->_poll_if_tim1
    _i2c_nack->_poll_if_tim1
    _UART_send_string->_UART_send_char

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                92    92      0    2168
                                             25 COMRAM    56    56      0
                      _ADC_intialize
                      _CLK_intialize
                            _InitI2C
                    _PORT_Initialize
                           _Read_ADC
                          _UART_Init
                   _UART_send_string
                            _rtcc_rd
                            _rtcc_wr
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             22    16      6    1468
                                             12 COMRAM    13     7      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _rtcc_wr                                              0     0      0      15
                          _i2c_start
                           _i2c_stop
                             _i2c_wr
 ---------------------------------------------------------------------------------
 (1) _rtcc_rd                                              1     1      0      35
                                              3 COMRAM     1     1      0
                           _i2c_nack
                             _i2c_rd
                        _i2c_restart
                          _i2c_start
                           _i2c_stop
                             _i2c_wr
 ---------------------------------------------------------------------------------
 (2) _i2c_wr                                               1     1      0      15
                                              2 COMRAM     1     1      0
                       _poll_if_tim1
 ---------------------------------------------------------------------------------
 (2) _i2c_stop                                             0     0      0       0
                       _poll_if_tim1
 ---------------------------------------------------------------------------------
 (2) _i2c_start                                            0     0      0       0
                       _poll_if_tim1
 ---------------------------------------------------------------------------------
 (2) _i2c_restart                                          0     0      0       0
                       _poll_if_tim1
 ---------------------------------------------------------------------------------
 (2) _i2c_rd                                               1     1      0      15
                                              2 COMRAM     1     1      0
                       _poll_if_tim1
 ---------------------------------------------------------------------------------
 (2) _i2c_nack                                             0     0      0       0
                       _poll_if_tim1
 ---------------------------------------------------------------------------------
 (3) _poll_if_tim1                                         2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _UART_send_string                                     2     0      2     288
                                              1 COMRAM     2     0      2
                     _UART_send_char
 ---------------------------------------------------------------------------------
 (2) _UART_send_char                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Read_ADC                                             7     5      2      68
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _PORT_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CLK_intialize                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_intialize                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_intialize
   _CLK_intialize
   _InitI2C
   _PORT_Initialize
   _Read_ADC
   _UART_Init
   _UART_send_string
     _UART_send_char
   _rtcc_rd
     _i2c_nack
       _poll_if_tim1
     _i2c_rd
       _poll_if_tim1
     _i2c_restart
       _poll_if_tim1
     _i2c_start
       _poll_if_tim1
     _i2c_stop
       _poll_if_tim1
     _i2c_wr
       _poll_if_tim1
   _rtcc_wr
     _i2c_start
       _poll_if_tim1
     _i2c_stop
       _poll_if_tim1
     _i2c_wr
       _poll_if_tim1
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     51      5F       1       74.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5F      15        0.0%
DATA                 0      0      5F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Mar 02 13:31:03 2021

                        _i 005E                         l43 0BB2                         l46 0BDA  
                       l94 0B8C                         l97 0B50                         u10 0A7A  
                       u11 0A72                         u20 0A8C                         u21 0A88  
                       u30 0A9A                         u31 0A96                         u40 0B5E  
                       u41 0B5A                         u18 0A7C             ?_CLK_intialize 0001  
                      l100 0B62                        l113 0AD0                        l213 0A8C  
                      l221 0BD4                        l230 0B9A                        l143 0A26  
                      l215 0AA0                        l224 0BC4                        l320 0918  
                      l138 0B1A                        l146 0A52                        l218 0BCC  
                      l314 087E                        l227 0BA6                        l236 0BBC  
                      l270 0B36                        _ADC 0052                        l187 0B78  
                      l267 0AF8                        l802 0984                        l812 09E8  
                      l809 098C                        l819 09F0                        u300 09A0  
                      u301 099C                        u310 09BE                        u311 09BA  
                      u320 09D4                        u400 090C                        u321 09D0  
                      u401 0908                        u330 0A04                        u410 0AD0  
                      u331 0A00                        u411 0ACC                        u340 0A1C  
                      u341 0A18                        u350 0A34                        u270 0934  
                      u351 0A30                        u271 0930                        u280 0952  
                      u360 07D4                        _PEN 007E2A                        u281 094E  
                      u361 07D0                        u290 096E                        u370 0866  
                      u291 096A                        u371 0862                        u507 07A6  
                      u427 065C                        u380 087E                        u381 087A  
                      u437 0672                        u390 08EA                        u391 08E6  
                      u447 068A                        u457 06A2                        u467 06BA  
                      _SEN 007E28                        u477 0708                        u487 0756  
                      u497 0798                        wreg 000FE8                       l1100 0BC0  
                     l1110 0B94                       l1102 0B9E                       l1200 0B16  
                     l1112 0B98                       l1104 0BA2                       l1202 0B18  
                     l1210 0B76                       l1106 0B8E                       l1204 0B64  
                     l1116 0BB4                       l1108 0B90                       l1206 0B68  
                     l1070 0A5C                       l1118 0BB8                       l1160 0BAC  
                     l1208 0B6C                       l1080 0A9E                       l1072 0A5E  
                     l1162 0BD6                       l1082 0B50                       l1074 0A9A  
                     l1090 0BC6                       l1410 0934                       l1084 0B5E  
                     l1076 0A9A                       l1068 0A54                       l1092 0BC8  
                     l1420 096E                       l1412 093C                       l1500 0886  
                     l1158 0BA8                       l1078 0A9C                       l1094 0BCE  
                     l1422 0976                       l1414 0944                       l1406 091A  
                     l1430 09A0                       l1502 08C8                       l1510 090C  
                     l1192 0AFA                       l1520 0AB8                       l1096 0BD0  
                     l1424 0978                       l1416 0952                       l1408 0922  
                     l1440 09DC                       l1432 09A8                       l1504 08D4  
                     l1194 0AFE                       l1450 09F4                       l1514 0AA2  
                     l1098 0BBE                       l1426 097E                       l1418 0958  
                     l1442 09E2                       l1434 09B0                       l1506 08D8  
                     l1530 064E                       l1522 062E                       l1196 0B06  
                     l1460 0A34                       l1452 0A04                       l1444 0B7A  
                     l1516 0AA6                       l1436 09BE                       l1428 098E  
                     l1508 08EA                       l1540 0696                       l1532 0652  
                     l1524 0636                       l1198 0B08                       l1462 0A4A  
                     l1454 0A0C                       l1446 0B84                       l1518 0AB4  
                     l1286 0B1C                       l1438 09D4                       l1470 07D4  
                     l1550 06C8                       l1542 0698                       l1534 0668  
                     l1526 063E                       l1456 0A1C                       l1448 09F4  
                     l1288 0AD2                       l1480 07F8                       l1472 07E0  
                     l1560 0724                       l1552 06D6                       l1544 06AE  
                     l1536 067E                       l1528 064A                       l1458 0A24  
                     l1482 0820                       l1474 07E8                       l1466 07B6  
                     l1570 078A                       l1562 0740                       l1554 06F2  
                     l1546 06B0                       l1538 0680                       l1492 083C  
                     l1484 0830                       l1476 07F0                       l1468 07C2  
                     l1572 078E                       l1564 074C                       l1556 06FE  
                     l1548 06C6                       l1486 0838                       l1574 0792  
                     l1566 0764                       l1558 0716                       l1496 086A  
                     l1576 07A0                       l1568 077E                       l1498 086C  
                     STR_1 0622                       STR_2 0617                       STR_3 060B  
                     _IPEN 007E87                       _RCIF 007CF5                       _RCEN 007E2B  
                     _RSEN 007E29                       _TXIF 007CF4                       _main 062E  
             main@_adc_str 0030                       fsr2h 000FDA                       indf2 000FDF  
                     fsr2l 000FD9                       prodh 000FF4                       prodl 000FF3  
                     start 0000              ??_i2c_restart 0003               ___param_bank 000000  
          __end_of_InitI2C 0B7A  __size_of_UART_send_string 0030                      ?_main 0001  
                    _ACKEN 007E2C                      _ACKDT 007E2D                      _EEADR 000FA9  
                    _LATA4 007C4C                      _LATA5 007C4D                      _LATA6 007C4E  
          __end_of___lwdiv 098E            __end_of___lwmod 09F2                      _RCREG 000FAE  
                    _TMR1H 000FCF                      _TMR1L 000FCE                      _SPBRG 000FAF  
                    _SSPIF 007CF3                      _TXREG 000FAD         __size_of_UART_Init 0014  
          __end_of_dpowers 060B                      _value 0056               main@temp_adc 004E  
                    tablat 000FF5            __end_of_rtcc_rd 0AFA            __end_of_rtcc_wr 0B38  
                    status 000FD8            __end_of_sprintf 091A          ??_PORT_Initialize 0001  
          __initialization 0B38               __end_of_main 07B6          main@memory_string 0044  
         __end_of_Read_ADC 0A54           __end_of_i2c_nack 0BBE           __end_of_i2c_stop 0BC6  
          ??_CLK_intialize 0001        __end_of_i2c_restart 0BD6                     ??_main 001A  
            __activetblptr 000002                     _ADRESH 000FC4                     _ADRESL 000FC3  
                   _EEDATA 000FA8                     _EECON1 000FA6                     _EECON2 000FA7  
                   _SPBRGH 000FB0                     _SSPADD 000FC8                     _TRISA1 007C91  
                   _TRISB0 007C98                     _TRISA2 007C92                     _TRISB1 007C99  
                   _TRISC3 007CA3                     _TRISC4 007CA4                     _TRISC6 007CA6  
                   _TRISC7 007CA7                     _SSPBUF 000FC9         __size_of_i2c_start 0008  
                ??_InitI2C 0001                     _i2c_rd 0B8E                     _i2c_wr 0B9C  
            main@humid_adc 0050          __end_of_UART_Init 0B8E            Read_ADC@channel 0007  
                ??___lwdiv 0005                  ??___lwmod 000C                     clear_0 0B3E  
             __mediumconst 0000                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                  ??_rtcc_rd 0004                  ??_rtcc_wr 0004  
                ??_sprintf 0013                 __accesstop 0080    __end_of__initialization 0B44  
            ___rparam_used 000001             __pcstackCOMRAM 0001                _i2c_restart 0BCE  
         _UART_send_string 0AA2          __end_of_i2c_start 0BCE                  ?_Read_ADC 0001  
                ?_i2c_nack 0001     __size_of_ADC_intialize 0022                  ?_i2c_stop 0001  
                  ?_i2c_rd 0001                    ?_i2c_wr 0001            _PORT_Initialize 0BD6  
  __size_of_UART_send_char 0016                    _SSPCON2 000FC5                    _SSPSTAT 000FC7  
               ??_Read_ADC 0003                 ??_i2c_nack 0003                 ??_i2c_stop 0003  
                  _InitI2C 0B64                    __Hparam 0000            __size_of_i2c_rd 000E  
                  __Lparam 0000            __size_of_i2c_wr 000C                    ___lwdiv 091A  
                  ___lwmod 098E               __psmallconst 0600                    __pcinit 0B38  
            _ADC_intialize 0AFA                    __ramtop 0600                    __ptext0 062E  
                  __ptext1 07B6                    __ptext2 098E                    __ptext3 091A  
                  __ptext4 0B1C                    __ptext5 0AD2                    __ptext6 0B9C  
                  __ptext7 0BBE                    __ptext8 0BC6                    __ptext9 0BCE  
                _T1CONbits 000FCD                    _dpowers 0601              ?_poll_if_tim1 0001  
                  _rtcc_rd 0AD2                    _rtcc_wr 0B1C                    _sprintf 07B6  
                  _voltage 005A       end_of_initialization 0B44              __Lmediumconst 0000  
                _RCSTAbits 000FAB                    postdec2 000FDD                    postinc0 000FEE  
                  postinc2 000FDE             ?_ADC_intialize 0001                  _UART_Init 0B7A  
  __end_of_PORT_Initialize 0BDC      __end_of_CLK_intialize 0BB4             ??_poll_if_tim1 0001  
       UART_Init@baud_rate 0001   __end_of_UART_send_string 0AD2                  _TXSTAbits 000FAC  
               main@memory 001C             __end_of_i2c_rd 0B9C               ?_i2c_restart 0001  
           __end_of_i2c_wr 0BA8                _BAUDCONbits 000FB8                 ?_UART_Init 0001  
      start_initialization 0B38             _UART_send_char 0B4E                  _i2c_start 0BC6  
        __size_of_Read_ADC 0062          __size_of_i2c_nack 000A          __size_of_i2c_stop 0008  
                 ??_i2c_rd 0003                   ??_i2c_wr 0003            ??_ADC_intialize 0001  
           Read_ADC@result 0005           ?_PORT_Initialize 0001     __end_of_UART_send_char 0B64  
              __pbssCOMRAM 0052                 ?_i2c_start 0001             i2c_rd@rtcc_buf 0003  
              sprintf@flag 0013                sprintf@prec 0018                   ?_InitI2C 0001  
     __end_of_poll_if_tim1 0AA2           ___lwdiv@dividend 0001                   ?___lwdiv 0001  
                 ?___lwmod 0008                ??_UART_Init 0003           UART_send_char@bt 0001  
              __smallconst 0600            ?_UART_send_char 0001                   ?_rtcc_rd 0001  
                 ?_rtcc_wr 0001           ___lwdiv@quotient 0005                   ?_sprintf 000D  
                 _PIR1bits 000F9E                   _PIR2bits 000FA1       __size_of_i2c_restart 0008  
               _ADCON0bits 000FC2                 _ADCON1bits 000FC1                 _ADCON2bits 000FC0  
    UART_send_string@st_pt 0002             i2c_wr@i2c_data 0003                ??_i2c_start 0003  
        ?_UART_send_string 0002                   _Read_ADC 09F2                   _i2c_nack 0BB4  
                 _i2c_stop 0BBE         ??_UART_send_string 0004                 _EECON1bits 000FA6  
         __size_of_InitI2C 0016                   __Hrparam 0000                   __Lrparam 0000  
         __size_of___lwdiv 0074           __size_of___lwmod 0064                 sprintf@val 0016  
          ___lwdiv@divisor 0003            ___lwdiv@counter 0007                   __ptext10 0B8E  
                 __ptext11 0BB4                   __ptext20 0AFA                   __ptext12 0A54  
                 __ptext13 0AA2                   __ptext14 0B4E                   __ptext15 0B7A  
                 __ptext16 09F2                   __ptext17 0BD6                   __ptext18 0B64  
                 __ptext19 0BA8           __size_of_rtcc_rd 0028           __size_of_rtcc_wr 001C  
    __size_of_poll_if_tim1 004E           __size_of_sprintf 0164              __size_of_main 0188  
   __size_of_CLK_intialize 000C               _poll_if_tim1 0A54                 _INTCONbits 000FF2  
                sprintf@ap 0014                  sprintf@sp 000D           ___lwmod@dividend 0008  
               _OSCCONbits 000FD3           ??_UART_send_char 0001      __end_of_ADC_intialize 0B1C  
                 sprintf@c 0019                   sprintf@f 000F              _CLK_intialize 0BA8  
          ___lwmod@divisor 000A            ___lwmod@counter 000C                _SSPCON1bits 000FC6  
              _SSPCON2bits 000FC5   __size_of_PORT_Initialize 0006  
