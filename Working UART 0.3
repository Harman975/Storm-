// PIC18F2520 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1H
#pragma config OSC = INTIO7     // Oscillator Selection bits (Internal oscillator block, CLKO function on RA6, port function on RA7)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor enabled)
#pragma config IESO = OFF       // Internal/External Oscillator Switchover bit (Oscillator Switchover mode disabled)

// CONFIG2L
#pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = SBORDIS  // Brown-out Reset Enable bits (Brown-out Reset enabled in hardware only (SBOREN is disabled))
#pragma config BORV = 3         // Brown Out Reset Voltage bits (Minimum setting)

// CONFIG2H
#pragma config WDT = OFF        // Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
#pragma config WDTPS = 32768    // Watchdog Timer Postscale Select bits (1:32768)

// CONFIG3H
#pragma config CCP2MX = PORTC   // CCP2 MUX bit (CCP2 input/output is multiplexed with RC1)
#pragma config PBADEN = ON      // PORTB A/D Enable bit (PORTB<4:0> pins are configured as analog input channels on Reset)
#pragma config LPT1OSC = OFF    // Low-Power Timer1 Oscillator Enable bit (Timer1 configured for higher power operation)
#pragma config MCLRE = ON       // MCLR Pin Enable bit (MCLR pin enabled; RE3 input pin disabled)

// CONFIG4L
#pragma config STVREN = ON      // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config LVP = ON         // Single-Supply ICSP Enable bit (Single-Supply ICSP enabled)
#pragma config XINST = OFF      // Extended Instruction Set Enable bit (Instruction set extension and Indexed Addressing mode disabled (Legacy mode))

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (000800-001FFFh) not code-protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) not code-protected)
#pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) not code-protected)
#pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) not code-protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot block (000000-0007FFh) not code-protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code-protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000800-001FFFh) not write-protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) not write-protected)
#pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) not write-protected)
#pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) not write-protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write-protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot block (000000-0007FFh) not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write-protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000800-001FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) not protected from table reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot block (000000-0007FFh) not protected from table reads executed in other blocks)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>


#include <stdio.h>
#include <stdbool.h>
#include "pic18f2520.h"
#define _XTAL_FREQ 8000000

static void CLK_intialize (void)
{
//    
//    OSCTUNEbits.PLLEN = 1 ; /*Bit 6 - Frequency Multiplier PLL for INTOSC Enable bit */
//    OSCTUNEbits.INTSRC = 0; /*Bit 7 - internal oscillator low frequency select bit */
//    OSCTUNEbits.TUN = 0b00000; /* bit 4-0 - Frequency tuning bit = 4 MHz */
    OSCCONbits.IRCF = 0b111;  /*bit 6-4 - internal frequency bit */
    //OSCCONbits.IOFS = 0b1; /*bit 2 -  INTOSC frequency stable bit */          
    OSCCONbits.IDLEN = 0b0;  /*bit 6-4 - internal frequency bit */
    OSCCONbits.SCS = 0b11 ;/* bit 1 -  system clock select bit - Internal oscillator block*/
    
     
}


static void PORT_Initialize(void)
{
  
   TRISC6 = 1; /* Configure RC6 as TX. */
   TRISC7 = 1; /* configure RC7 as RX */ 
}

void UART_Init(uint24_t baud_rate)
{
    /* Transmit Enable */
   TXSTAbits.TXEN = 1;
   /* EUSART mode select */
   TXSTAbits.SYNC = 0;
   /* High Baud Rate Select */
   TXSTAbits.BRGH = 0;
   /* 16-bit Baud Rate Generator is used */
   BAUDCONbits.BRG16 = 0;
   /* Serial Port Enable */
   RCSTAbits.SPEN = 1;
    /* Baud rate configuration at 9600*/
   SPBRGH = 0x00;
   SPBRG = 0xC;
}



static void INTERRUPT_Initialize(void)
{
    INTCONbits.GIE = 1; /* Enable the Global Interrupts */
    INTCONbits.PEIE = 1; /* Enable the Peripheral Interrupts */
}

void UART_send_char(char bt) // sends one byte to UART  
{
    while(!TXIF);  // hold the program till TX buffer is free
    TXREG = bt; //Load the transmitter buffer with the received value
}
//**Function to get one byte of date from UART**//
char UART_get_char()  
{
   
    if (RCSTAbits.OERR == 1) // check for Error
    {
        LATA4 = 0;
        LATA5 = 0;
        LATA6 = 0;

      RCSTAbits.SPEN = 1; //If error -> Reset
      RCSTAbits.SPEN = 1; //If error -> Reset
         
    }
   
   
    while(!RCIF);  // hold the program till RX buffer is free
   
    return RCREG; //receive the value and send it to main function
}
void UART_send_string(char* st_pt)
{
    while(*st_pt) //if there is a char
        UART_send_char(*st_pt++); //process it as a byte data
}

















void main(void)
{
    CLK_intialize();
    PORT_Initialize();
    UART_Init(9600);
    

    while(1)
    {

        
      UART_send_string("Harman\n");

       __delay_ms(100); /* change this from 1 to 10000 */ 
                            /* Configure GPIO pin and change state*/
                            /* Validate clock using Pico */

      TRISB1 = 0;
    __delay_ms(1000);
       TRISB1 = 1;
    __delay_ms(1000);
    }
}
