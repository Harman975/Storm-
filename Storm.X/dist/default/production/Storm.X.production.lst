

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Thu Feb 11 15:04:30 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F2520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=3
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    26  0000                     
    27                           ; Version 2.20
    28                           ; Generated 12/02/2020 GMT
    29                           ; 
    30                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F2520 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     
    62                           	psect	smallconst
    63  000600                     __psmallconst:
    64                           	callstack 0
    65  000600  00                 	db	0
    66  000601                     _octpowers:
    67                           	callstack 0
    68  000601  0001               	dw	1
    69  000603  0008               	dw	8
    70  000605  0040               	dw	64
    71  000607  0200               	dw	512
    72  000609  1000               	dw	4096
    73  00060B  8000               	dw	32768
    74  00060D                     __end_of_octpowers:
    75                           	callstack 0
    76  00060D                     _dpowers:
    77                           	callstack 0
    78  00060D  0001               	dw	1
    79  00060F  000A               	dw	10
    80  000611  0064               	dw	100
    81  000613  03E8               	dw	1000
    82  000615  2710               	dw	10000
    83  000617                     __end_of_dpowers:
    84                           	callstack 0
    85  000617                     _hexpowers:
    86                           	callstack 0
    87  000617  0001               	dw	1
    88  000619  0010               	dw	16
    89  00061B  0100               	dw	256
    90  00061D  1000               	dw	4096
    91  00061F                     __end_of_hexpowers:
    92                           	callstack 0
    93  0000                     _SSPBUF	set	4041
    94  0000                     _PIR1bits	set	3998
    95  0000                     _SSPCON2bits	set	4037
    96  0000                     _SSPCON1	set	4038
    97  0000                     _SSPSTAT	set	4039
    98  0000                     _SSPADD	set	4040
    99  0000                     _ADRESL	set	4035
   100  0000                     _ADRESH	set	4036
   101  0000                     _ADCON0bits	set	4034
   102  0000                     _ADCON2bits	set	4032
   103  0000                     _ADCON1bits	set	4033
   104  0000                     _RCREG	set	4014
   105  0000                     _TXREG	set	4013
   106  0000                     _SPBRG	set	4015
   107  0000                     _SPBRGH	set	4016
   108  0000                     _RCSTAbits	set	4011
   109  0000                     _BAUDCONbits	set	4024
   110  0000                     _TXSTAbits	set	4012
   111  0000                     _INTCONbits	set	4082
   112  0000                     _OSCCONbits	set	4051
   113  0000                     _TRISC5	set	31909
   114  0000                     _TRISC4	set	31908
   115  0000                     _TRISA2	set	31890
   116  0000                     _TRISA1	set	31889
   117  0000                     _RCIF	set	31989
   118  0000                     _LATA6	set	31822
   119  0000                     _LATA5	set	31821
   120  0000                     _LATA4	set	31820
   121  0000                     _TXIF	set	31988
   122  0000                     _TRISB1	set	31897
   123  0000                     _TRISC7	set	31911
   124  0000                     _TRISC6	set	31910
   125  00061F                     STR_4:
   126  00061F  30                 	db	48	;'0'
   127  000620  31                 	db	49	;'1'
   128  000621  32                 	db	50	;'2'
   129  000622  33                 	db	51	;'3'
   130  000623  34                 	db	52	;'4'
   131  000624  35                 	db	53	;'5'
   132  000625  36                 	db	54	;'6'
   133  000626  37                 	db	55	;'7'
   134  000627  38                 	db	56	;'8'
   135  000628  39                 	db	57	;'9'
   136  000629  41                 	db	65	;'A'
   137  00062A  42                 	db	66	;'B'
   138  00062B  43                 	db	67	;'C'
   139  00062C  44                 	db	68	;'D'
   140  00062D  45                 	db	69	;'E'
   141  00062E  46                 	db	70	;'F'
   142  00062F  00                 	db	0
   143  000630                     STR_5:
   144  000630  30                 	db	48	;'0'
   145  000631  31                 	db	49	;'1'
   146  000632  32                 	db	50	;'2'
   147  000633  33                 	db	51	;'3'
   148  000634  34                 	db	52	;'4'
   149  000635  35                 	db	53	;'5'
   150  000636  36                 	db	54	;'6'
   151  000637  37                 	db	55	;'7'
   152  000638  38                 	db	56	;'8'
   153  000639  39                 	db	57	;'9'
   154  00063A  61                 	db	97	;'a'
   155  00063B  62                 	db	98	;'b'
   156  00063C  63                 	db	99	;'c'
   157  00063D  64                 	db	100	;'d'
   158  00063E  65                 	db	101	;'e'
   159  00063F  66                 	db	102	;'f'
   160  000640  00                 	db	0
   161  000641                     STR_2:
   162  000641  48                 	db	72	;'H'
   163  000642  55                 	db	85	;'U'
   164  000643  4D                 	db	77	;'M'
   165  000644  49                 	db	73	;'I'
   166  000645  44                 	db	68	;'D'
   167  000646  3A                 	db	58	;':'
   168  000647  20                 	db	32
   169  000648  25                 	db	37
   170  000649  75                 	db	117	;'u'
   171  00064A  0A                 	db	10
   172  00064B  00                 	db	0
   173  00064C                     STR_1:
   174  00064C  54                 	db	84	;'T'
   175  00064D  45                 	db	69	;'E'
   176  00064E  4D                 	db	77	;'M'
   177  00064F  50                 	db	80	;'P'
   178  000650  3A                 	db	58	;':'
   179  000651  20                 	db	32
   180  000652  25                 	db	37
   181  000653  75                 	db	117	;'u'
   182  000654  0A                 	db	10
   183  000655  00                 	db	0
   184  000656                     STR_3:
   185  000656  54                 	db	84	;'T'
   186  000657  49                 	db	73	;'I'
   187  000658  4D                 	db	77	;'M'
   188  000659  45                 	db	69	;'E'
   189  00065A  0A                 	db	10
   190  00065B  00                 	db	0
   191  00065C  00                 	db	0	; dummy byte at the end
   192  0000                     
   193                           ; #config settings
   194                           
   195                           	psect	cinit
   196  001484                     __pcinit:
   197                           	callstack 0
   198  001484                     start_initialization:
   199                           	callstack 0
   200  001484                     __initialization:
   201                           	callstack 0
   202                           
   203                           ; Clear objects allocated to COMRAM (14 bytes)
   204  001484  EE00  F051         	lfsr	0,__pbssCOMRAM
   205  001488  0E0E               	movlw	14
   206  00148A                     clear_0:
   207  00148A  6AEE               	clrf	postinc0,c
   208  00148C  06E8               	decf	wreg,f,c
   209  00148E  E1FD               	bnz	clear_0
   210  001490                     end_of_initialization:
   211                           	callstack 0
   212  001490                     __end_of__initialization:
   213                           	callstack 0
   214  001490  0E00               	movlw	low (__Lmediumconst shr (0+16))
   215  001492  6EF8               	movwf	tblptru,c
   216  001494  0100               	movlb	0
   217  001496  EFC9  F008         	goto	_main	;jump to C main() function
   218                           
   219                           	psect	bssCOMRAM
   220  000051                     __pbssCOMRAM:
   221                           	callstack 0
   222  000051                     _ADC:
   223                           	callstack 0
   224  000051                     	ds	4
   225  000055                     _value:
   226                           	callstack 0
   227  000055                     	ds	4
   228  000059                     _voltage:
   229                           	callstack 0
   230  000059                     	ds	4
   231  00005D                     _i:
   232                           	callstack 0
   233  00005D                     	ds	2
   234                           
   235                           	psect	cstackCOMRAM
   236  000001                     __pcstackCOMRAM:
   237                           	callstack 0
   238  000001                     ??_isdigit:
   239  000001                     ?_Read_ADC:
   240                           	callstack 0
   241  000001                     ?___wmul:
   242                           	callstack 0
   243  000001                     ?___lwdiv:
   244                           	callstack 0
   245  000001                     UART_send_char@bt:
   246                           	callstack 0
   247  000001                     UART_Init@baud_rate:
   248                           	callstack 0
   249  000001                     ___wmul@multiplier:
   250                           	callstack 0
   251  000001                     ___lwdiv@dividend:
   252                           	callstack 0
   253                           
   254                           ; 2 bytes @ 0x0
   255  000001                     	ds	1
   256  000002                     _isdigit$1130:
   257                           	callstack 0
   258  000002                     UART_send_string@st_pt:
   259                           	callstack 0
   260                           
   261                           ; 2 bytes @ 0x1
   262  000002                     	ds	1
   263  000003                     ??_Read_ADC:
   264  000003                     isdigit@c:
   265                           	callstack 0
   266  000003                     ___wmul@multiplicand:
   267                           	callstack 0
   268  000003                     ___lwdiv@divisor:
   269                           	callstack 0
   270                           
   271                           ; 2 bytes @ 0x2
   272  000003                     	ds	1
   273  000004                     
   274                           ; 1 bytes @ 0x3
   275  000004                     	ds	1
   276  000005                     Read_ADC@result:
   277                           	callstack 0
   278  000005                     ___wmul@product:
   279                           	callstack 0
   280  000005                     ___lwdiv@quotient:
   281                           	callstack 0
   282                           
   283                           ; 2 bytes @ 0x4
   284  000005                     	ds	2
   285  000007                     Read_ADC@channel:
   286                           	callstack 0
   287  000007                     ___lwdiv@counter:
   288                           	callstack 0
   289                           
   290                           ; 1 bytes @ 0x6
   291  000007                     	ds	1
   292  000008                     ?___lwmod:
   293                           	callstack 0
   294  000008                     ___lwmod@dividend:
   295                           	callstack 0
   296                           
   297                           ; 2 bytes @ 0x7
   298  000008                     	ds	2
   299  00000A                     ___lwmod@divisor:
   300                           	callstack 0
   301                           
   302                           ; 2 bytes @ 0x9
   303  00000A                     	ds	2
   304  00000C                     ___lwmod@counter:
   305                           	callstack 0
   306                           
   307                           ; 1 bytes @ 0xB
   308  00000C                     	ds	1
   309  00000D                     ?_sprintf:
   310                           	callstack 0
   311  00000D                     sprintf@sp:
   312                           	callstack 0
   313                           
   314                           ; 2 bytes @ 0xC
   315  00000D                     	ds	2
   316  00000F                     sprintf@f:
   317                           	callstack 0
   318                           
   319                           ; 2 bytes @ 0xE
   320  00000F                     	ds	4
   321  000013                     ??_sprintf:
   322                           
   323                           ; 1 bytes @ 0x12
   324  000013                     	ds	4
   325  000017                     sprintf@cp:
   326                           	callstack 0
   327                           
   328                           ; 2 bytes @ 0x16
   329  000017                     	ds	2
   330  000019                     _sprintf$683:
   331                           	callstack 0
   332                           
   333                           ; 2 bytes @ 0x18
   334  000019                     	ds	2
   335  00001B                     _sprintf$684:
   336                           	callstack 0
   337                           
   338                           ; 2 bytes @ 0x1A
   339  00001B                     	ds	2
   340  00001D                     _sprintf$690:
   341                           	callstack 0
   342                           
   343                           ; 2 bytes @ 0x1C
   344  00001D                     	ds	2
   345  00001F                     sprintf@idx:
   346                           	callstack 0
   347                           
   348                           ; 1 bytes @ 0x1E
   349  00001F                     	ds	1
   350  000020                     sprintf@len:
   351                           	callstack 0
   352                           
   353                           ; 2 bytes @ 0x1F
   354  000020                     	ds	2
   355  000022                     sprintf@ap:
   356                           	callstack 0
   357                           
   358                           ; 2 bytes @ 0x21
   359  000022                     	ds	2
   360  000024                     sprintf@val:
   361                           	callstack 0
   362                           
   363                           ; 2 bytes @ 0x23
   364  000024                     	ds	2
   365  000026                     sprintf@prec:
   366                           	callstack 0
   367                           
   368                           ; 1 bytes @ 0x25
   369  000026                     	ds	1
   370  000027                     sprintf@width:
   371                           	callstack 0
   372                           
   373                           ; 2 bytes @ 0x26
   374  000027                     	ds	2
   375  000029                     sprintf@c:
   376                           	callstack 0
   377                           
   378                           ; 1 bytes @ 0x28
   379  000029                     	ds	1
   380  00002A                     sprintf@flag:
   381                           	callstack 0
   382                           
   383                           ; 2 bytes @ 0x29
   384  00002A                     	ds	2
   385  00002C                     ??_main:
   386                           
   387                           ; 1 bytes @ 0x2B
   388  00002C                     	ds	2
   389  00002E                     main@_adc_str:
   390                           	callstack 0
   391                           
   392                           ; 20 bytes @ 0x2D
   393  00002E                     	ds	20
   394  000042                     main@time:
   395                           	callstack 0
   396                           
   397                           ; 10 bytes @ 0x41
   398  000042                     	ds	10
   399  00004C                     main@i2c_val:
   400                           	callstack 0
   401                           
   402                           ; 1 bytes @ 0x4B
   403  00004C                     	ds	1
   404  00004D                     main@temp_adc:
   405                           	callstack 0
   406                           
   407                           ; 2 bytes @ 0x4C
   408  00004D                     	ds	2
   409  00004F                     main@humid_adc:
   410                           	callstack 0
   411                           
   412                           ; 2 bytes @ 0x4E
   413  00004F                     	ds	2
   414                           
   415 ;;
   416 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   417 ;;
   418 ;; *************** function _main *****************
   419 ;; Defined at:
   420 ;;		line 108 in file "Test.c"
   421 ;; Parameters:    Size  Location     Type
   422 ;;		None
   423 ;; Auto vars:     Size  Location     Type
   424 ;;  _adc_str       20   45[COMRAM] unsigned char [20]
   425 ;;  _adc_buf       20    0        unsigned char [20]
   426 ;;  time           10   65[COMRAM] unsigned char [10]
   427 ;;  humid_adc       2   78[COMRAM] unsigned int 
   428 ;;  temp_adc        2   76[COMRAM] unsigned int 
   429 ;;  i2c_val         1   75[COMRAM] unsigned char 
   430 ;; Return value:  Size  Location     Type
   431 ;;                  1    wreg      void 
   432 ;; Registers used:
   433 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   434 ;; Tracked objects:
   435 ;;		On entry : 0/0
   436 ;;		On exit  : 0/0
   437 ;;		Unchanged: 0/0
   438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   439 ;;      Params:         0       0       0       0       0       0       0
   440 ;;      Locals:        35       0       0       0       0       0       0
   441 ;;      Temps:          2       0       0       0       0       0       0
   442 ;;      Totals:        37       0       0       0       0       0       0
   443 ;;Total ram usage:       37 bytes
   444 ;; Hardware stack levels required when called:    2
   445 ;; This function calls:
   446 ;;		_ADC_intialize
   447 ;;		_CLK_intialize
   448 ;;		_PORT_Initialize
   449 ;;		_Read_ADC
   450 ;;		_UART_Init
   451 ;;		_UART_send_string
   452 ;;		_sprintf
   453 ;; This function is called by:
   454 ;;		Startup code after reset
   455 ;; This function uses a non-reentrant model
   456 ;;
   457                           
   458                           	psect	text0
   459  001192                     __ptext0:
   460                           	callstack 0
   461  001192                     _main:
   462                           	callstack 29
   463  001192                     
   464                           ;Test.c: 112: unsigned int humid_adc = 0;
   465  001192  0E00               	movlw	0
   466  001194  6E50               	movwf	(main@humid_adc+1)^0,c
   467  001196  0E00               	movlw	0
   468  001198  6E4F               	movwf	main@humid_adc^0,c
   469  00119A                     
   470                           ;Test.c: 114: char _adc_str[20];;Test.c: 115: char _adc_buf[20];;Test.c: 117: CLK_intial
      +                          ize();
   471  00119A  EC62  F00A         	call	_CLK_intialize	;wreg free
   472                           
   473                           ;Test.c: 118: PORT_Initialize();
   474  00119E  EC68  F00A         	call	_PORT_Initialize	;wreg free
   475  0011A2                     
   476                           ;Test.c: 119: UART_Init(9600);
   477  0011A2  0E25               	movlw	37
   478  0011A4  6E02               	movwf	(UART_Init@baud_rate+1)^0,c
   479  0011A6  0E80               	movlw	128
   480  0011A8  6E01               	movwf	UART_Init@baud_rate^0,c
   481  0011AA  EC58  F00A         	call	_UART_Init	;wreg free
   482  0011AE                     
   483                           ;Test.c: 120: ADC_intialize();
   484  0011AE  EC31  F00A         	call	_ADC_intialize	;wreg free
   485  0011B2                     l2100:
   486                           
   487                           ;Test.c: 129: {;Test.c: 133: _delay((unsigned long)((500)*(8000000/4000.0)));
   488  0011B2  0E06               	movlw	6
   489  0011B4  6E2D               	movwf	(??_main+1)^0,c
   490  0011B6  0E13               	movlw	19
   491  0011B8  6E2C               	movwf	??_main^0,c
   492  0011BA  0EAE               	movlw	174
   493  0011BC                     u1537:
   494  0011BC  2EE8               	decfsz	wreg,f,c
   495  0011BE  D7FE               	bra	u1537
   496  0011C0  2E2C               	decfsz	??_main^0,f,c
   497  0011C2  D7FC               	bra	u1537
   498  0011C4  2E2D               	decfsz	(??_main+1)^0,f,c
   499  0011C6  D7FA               	bra	u1537
   500  0011C8                     
   501                           ;Test.c: 134: TRISB1 = 0;
   502  0011C8  9293               	bcf	3987,1,c	;volatile
   503  0011CA                     
   504                           ;Test.c: 135: _delay((unsigned long)((500)*(8000000/4000.0)));
   505  0011CA  0E06               	movlw	6
   506  0011CC  6E2D               	movwf	(??_main+1)^0,c
   507  0011CE  0E13               	movlw	19
   508  0011D0  6E2C               	movwf	??_main^0,c
   509  0011D2  0EAE               	movlw	174
   510  0011D4                     u1547:
   511  0011D4  2EE8               	decfsz	wreg,f,c
   512  0011D6  D7FE               	bra	u1547
   513  0011D8  2E2C               	decfsz	??_main^0,f,c
   514  0011DA  D7FC               	bra	u1547
   515  0011DC  2E2D               	decfsz	(??_main+1)^0,f,c
   516  0011DE  D7FA               	bra	u1547
   517  0011E0                     
   518                           ;Test.c: 136: TRISB1 = 1;
   519  0011E0  8293               	bsf	3987,1,c	;volatile
   520  0011E2                     
   521                           ;Test.c: 140: temp_adc = Read_ADC (0);
   522  0011E2  0E00               	movlw	0
   523  0011E4  ECBC  F009         	call	_Read_ADC
   524  0011E8  C001  F04D         	movff	?_Read_ADC,main@temp_adc
   525  0011EC  C002  F04E         	movff	?_Read_ADC+1,main@temp_adc+1
   526  0011F0                     
   527                           ;Test.c: 142: sprintf(_adc_str,"TEMP: %u\n", temp_adc);
   528  0011F0  0E2E               	movlw	low main@_adc_str
   529  0011F2  6E0D               	movwf	sprintf@sp^0,c
   530  0011F4  0E00               	movlw	high main@_adc_str
   531  0011F6  6E0E               	movwf	(sprintf@sp+1)^0,c
   532  0011F8  0E4C               	movlw	low STR_1
   533  0011FA  6E0F               	movwf	sprintf@f^0,c
   534  0011FC  0E06               	movlw	high STR_1
   535  0011FE  6E10               	movwf	(sprintf@f+1)^0,c
   536  001200  C04D  F011         	movff	main@temp_adc,?_sprintf+4
   537  001204  C04E  F012         	movff	main@temp_adc+1,?_sprintf+5
   538  001208  EC2F  F003         	call	_sprintf	;wreg free
   539  00120C                     
   540                           ;Test.c: 143: UART_send_string(_adc_str);
   541  00120C  0E2E               	movlw	low main@_adc_str
   542  00120E  6E02               	movwf	UART_send_string@st_pt^0,c
   543  001210  0E00               	movlw	high main@_adc_str
   544  001212  6E03               	movwf	(UART_send_string@st_pt+1)^0,c
   545  001214  EC06  F00A         	call	_UART_send_string	;wreg free
   546  001218                     
   547                           ;Test.c: 145: _delay((unsigned long)((100)*(8000000/4000.0)));
   548  001218  0E02               	movlw	2
   549  00121A  6E2D               	movwf	(??_main+1)^0,c
   550  00121C  0E04               	movlw	4
   551  00121E  6E2C               	movwf	??_main^0,c
   552  001220  0EBA               	movlw	186
   553  001222                     u1557:
   554  001222  2EE8               	decfsz	wreg,f,c
   555  001224  D7FE               	bra	u1557
   556  001226  2E2C               	decfsz	??_main^0,f,c
   557  001228  D7FC               	bra	u1557
   558  00122A  2E2D               	decfsz	(??_main+1)^0,f,c
   559  00122C  D7FA               	bra	u1557
   560  00122E  D000               	nop2	
   561  001230                     
   562                           ;Test.c: 147: humid_adc = Read_ADC (1);
   563  001230  0E01               	movlw	1
   564  001232  ECBC  F009         	call	_Read_ADC
   565  001236  C001  F04F         	movff	?_Read_ADC,main@humid_adc
   566  00123A  C002  F050         	movff	?_Read_ADC+1,main@humid_adc+1
   567  00123E                     
   568                           ;Test.c: 148: sprintf(_adc_str, "HUMID: %u\n", humid_adc);
   569  00123E  0E2E               	movlw	low main@_adc_str
   570  001240  6E0D               	movwf	sprintf@sp^0,c
   571  001242  0E00               	movlw	high main@_adc_str
   572  001244  6E0E               	movwf	(sprintf@sp+1)^0,c
   573  001246  0E41               	movlw	low STR_2
   574  001248  6E0F               	movwf	sprintf@f^0,c
   575  00124A  0E06               	movlw	high STR_2
   576  00124C  6E10               	movwf	(sprintf@f+1)^0,c
   577  00124E  C04F  F011         	movff	main@humid_adc,?_sprintf+4
   578  001252  C050  F012         	movff	main@humid_adc+1,?_sprintf+5
   579  001256  EC2F  F003         	call	_sprintf	;wreg free
   580  00125A                     
   581                           ;Test.c: 149: UART_send_string(_adc_str);
   582  00125A  0E2E               	movlw	low main@_adc_str
   583  00125C  6E02               	movwf	UART_send_string@st_pt^0,c
   584  00125E  0E00               	movlw	high main@_adc_str
   585  001260  6E03               	movwf	(UART_send_string@st_pt+1)^0,c
   586  001262  EC06  F00A         	call	_UART_send_string	;wreg free
   587  001266                     
   588                           ;Test.c: 151: _delay((unsigned long)((100)*(8000000/4000.0)));
   589  001266  0E02               	movlw	2
   590  001268  6E2D               	movwf	(??_main+1)^0,c
   591  00126A  0E04               	movlw	4
   592  00126C  6E2C               	movwf	??_main^0,c
   593  00126E  0EBA               	movlw	186
   594  001270                     u1567:
   595  001270  2EE8               	decfsz	wreg,f,c
   596  001272  D7FE               	bra	u1567
   597  001274  2E2C               	decfsz	??_main^0,f,c
   598  001276  D7FC               	bra	u1567
   599  001278  2E2D               	decfsz	(??_main+1)^0,f,c
   600  00127A  D7FA               	bra	u1567
   601  00127C  D000               	nop2	
   602  00127E                     
   603                           ;Test.c: 155: sprintf( time ,"TIME\n",i2c_val);
   604  00127E  0E42               	movlw	low main@time
   605  001280  6E0D               	movwf	sprintf@sp^0,c
   606  001282  0E00               	movlw	high main@time
   607  001284  6E0E               	movwf	(sprintf@sp+1)^0,c
   608  001286  0E56               	movlw	low STR_3
   609  001288  6E0F               	movwf	sprintf@f^0,c
   610  00128A  0E06               	movlw	high STR_3
   611  00128C  6E10               	movwf	(sprintf@f+1)^0,c
   612  00128E  C04C  F011         	movff	main@i2c_val,?_sprintf+4
   613  001292  6A12               	clrf	(?_sprintf+5)^0,c
   614  001294  EC2F  F003         	call	_sprintf	;wreg free
   615  001298  EFD9  F008         	goto	l2100
   616  00129C  EF00  F000         	goto	start
   617  0012A0                     __end_of_main:
   618                           	callstack 0
   619                           
   620 ;; *************** function _sprintf *****************
   621 ;; Defined at:
   622 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
   623 ;; Parameters:    Size  Location     Type
   624 ;;  sp              2   12[COMRAM] PTR unsigned char 
   625 ;;		 -> main@time(10), main@_adc_str(20), 
   626 ;;  f               2   14[COMRAM] PTR const unsigned char 
   627 ;;		 -> STR_3(6), STR_2(11), STR_1(10), 
   628 ;; Auto vars:     Size  Location     Type
   629 ;;  idx             1   30[COMRAM] unsigned char 
   630 ;;  tmpval          4    0        struct .
   631 ;;  flag            2   41[COMRAM] unsigned short 
   632 ;;  width           2   38[COMRAM] int 
   633 ;;  val             2   35[COMRAM] unsigned int 
   634 ;;  ap              2   33[COMRAM] PTR void [1]
   635 ;;		 -> ?_sprintf(2), 
   636 ;;  len             2   31[COMRAM] unsigned int 
   637 ;;  cp              2   22[COMRAM] PTR const unsigned char 
   638 ;;		 -> sprintf@c(1), 
   639 ;;  c               1   40[COMRAM] unsigned char 
   640 ;;  prec            1   37[COMRAM] char 
   641 ;; Return value:  Size  Location     Type
   642 ;;                  2   12[COMRAM] int 
   643 ;; Registers used:
   644 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   645 ;; Tracked objects:
   646 ;;		On entry : 0/0
   647 ;;		On exit  : 0/0
   648 ;;		Unchanged: 0/0
   649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   650 ;;      Params:         6       0       0       0       0       0       0
   651 ;;      Locals:        21       0       0       0       0       0       0
   652 ;;      Temps:          4       0       0       0       0       0       0
   653 ;;      Totals:        31       0       0       0       0       0       0
   654 ;;Total ram usage:       31 bytes
   655 ;; Hardware stack levels used:    1
   656 ;; Hardware stack levels required when called:    1
   657 ;; This function calls:
   658 ;;		___lwdiv
   659 ;;		___lwmod
   660 ;;		___wmul
   661 ;;		_isdigit
   662 ;; This function is called by:
   663 ;;		_main
   664 ;; This function uses a non-reentrant model
   665 ;;
   666                           
   667                           	psect	text1
   668  00065E                     __ptext1:
   669                           	callstack 0
   670  00065E                     _sprintf:
   671                           	callstack 29
   672  00065E                     
   673                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          21: signed char prec;;doprnt.c: 525: unsigned short flag;;doprnt.c: 540: union {;doprnt.
      +                          c: 541: unsigned long vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c
      +                          : 545: unsigned int val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;do
      +                          prnt.c: 550: *ap = __va_start();
   674  00065E  0E11               	movlw	low (?_sprintf+4)
   675  000660  6E22               	movwf	sprintf@ap^0,c
   676  000662  0E00               	movlw	high (?_sprintf+4)
   677  000664  6E23               	movwf	(sprintf@ap+1)^0,c
   678                           
   679                           ;doprnt.c: 553: while((c = *f++)) {
   680  000666  EFB1  F008         	goto	l2078
   681  00066A                     l1730:
   682                           
   683                           ;doprnt.c: 555: if(c != '%')
   684  00066A  0E25               	movlw	37
   685  00066C  1829               	xorwf	sprintf@c^0,w,c
   686  00066E  B4D8               	btfsc	status,2,c
   687  000670  EF3C  F003         	goto	u931
   688  000674  EF3E  F003         	goto	u930
   689  000678                     u931:
   690  000678  EF48  F003         	goto	l1736
   691  00067C                     u930:
   692  00067C                     
   693                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
   694  00067C  C00D  FFD9         	movff	sprintf@sp,fsr2l
   695  000680  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   696  000684  C029  FFDF         	movff	sprintf@c,indf2
   697  000688  4A0D               	infsnz	sprintf@sp^0,f,c
   698  00068A  2A0E               	incf	(sprintf@sp+1)^0,f,c
   699                           
   700                           ;doprnt.c: 559: continue;
   701  00068C  EFB1  F008         	goto	l2078
   702  000690                     l1736:
   703                           
   704                           ;doprnt.c: 560: };doprnt.c: 563: width = 0;
   705  000690  0E00               	movlw	0
   706  000692  6E28               	movwf	(sprintf@width+1)^0,c
   707  000694  0E00               	movlw	0
   708  000696  6E27               	movwf	sprintf@width^0,c
   709                           
   710                           ;doprnt.c: 565: flag = 0;
   711  000698  0E00               	movlw	0
   712  00069A  6E2B               	movwf	(sprintf@flag+1)^0,c
   713  00069C  0E00               	movlw	0
   714  00069E  6E2A               	movwf	sprintf@flag^0,c
   715  0006A0  EF64  F003         	goto	l1748
   716  0006A4                     l1738:
   717                           
   718                           ;doprnt.c: 571: flag |= 0x08;
   719  0006A4  862A               	bsf	sprintf@flag^0,3,c
   720                           
   721                           ;doprnt.c: 572: f++;
   722  0006A6  4A0F               	infsnz	sprintf@f^0,f,c
   723  0006A8  2A10               	incf	(sprintf@f+1)^0,f,c
   724                           
   725                           ;doprnt.c: 573: continue;
   726  0006AA  EF64  F003         	goto	l1748
   727  0006AE                     l1740:
   728                           
   729                           ;doprnt.c: 578: flag |= 0x01;
   730  0006AE  802A               	bsf	sprintf@flag^0,0,c
   731                           
   732                           ;doprnt.c: 579: f++;
   733  0006B0  4A0F               	infsnz	sprintf@f^0,f,c
   734  0006B2  2A10               	incf	(sprintf@f+1)^0,f,c
   735                           
   736                           ;doprnt.c: 580: continue;
   737  0006B4  EF64  F003         	goto	l1748
   738  0006B8                     l1742:
   739                           
   740                           ;doprnt.c: 591: flag |= 0x800;
   741  0006B8  862B               	bsf	(sprintf@flag+1)^0,3,c
   742                           
   743                           ;doprnt.c: 592: f++;
   744  0006BA  4A0F               	infsnz	sprintf@f^0,f,c
   745  0006BC  2A10               	incf	(sprintf@f+1)^0,f,c
   746                           
   747                           ;doprnt.c: 593: continue;
   748  0006BE  EF64  F003         	goto	l1748
   749  0006C2                     l1744:
   750                           
   751                           ;doprnt.c: 597: flag |= 0x04;
   752  0006C2  842A               	bsf	sprintf@flag^0,2,c
   753                           
   754                           ;doprnt.c: 598: f++;
   755  0006C4  4A0F               	infsnz	sprintf@f^0,f,c
   756  0006C6  2A10               	incf	(sprintf@f+1)^0,f,c
   757  0006C8                     l1748:
   758  0006C8  C00F  FFF6         	movff	sprintf@f,tblptrl
   759  0006CC  C010  FFF7         	movff	sprintf@f+1,tblptrh
   760  0006D0                     	if	0	;tblptru may be non-zero
   761  0006D0                     	endif
   762  0006D0                     	if	0	;tblptru may be non-zero
   763  0006D0                     	endif
   764  0006D0  0008               	tblrd		*
   765  0006D2  50F5               	movf	tablat,w,c
   766                           
   767                           ; Switch size 1, requested type "simple"
   768                           ; Number of cases is 4, Range of values is 32 to 48
   769                           ; switch strategies available:
   770                           ; Name         Instructions Cycles
   771                           ; simple_byte           13     7 (average)
   772                           ;	Chosen strategy is simple_byte
   773  0006D4  0A20               	xorlw	32	; case 32
   774  0006D6  B4D8               	btfsc	status,2,c
   775  0006D8  EF57  F003         	goto	l1740
   776  0006DC  0A03               	xorlw	3	; case 35
   777  0006DE  B4D8               	btfsc	status,2,c
   778  0006E0  EF5C  F003         	goto	l1742
   779  0006E4  0A0E               	xorlw	14	; case 45
   780  0006E6  B4D8               	btfsc	status,2,c
   781  0006E8  EF52  F003         	goto	l1738
   782  0006EC  0A1D               	xorlw	29	; case 48
   783  0006EE  B4D8               	btfsc	status,2,c
   784  0006F0  EF61  F003         	goto	l1744
   785  0006F4  EF7C  F003         	goto	l227
   786  0006F8                     l227:
   787                           
   788                           ;doprnt.c: 610: if(flag & 0x08)
   789  0006F8  A62A               	btfss	sprintf@flag^0,3,c
   790  0006FA  EF81  F003         	goto	u941
   791  0006FE  EF83  F003         	goto	u940
   792  000702                     u941:
   793  000702  EF84  F003         	goto	l1752
   794  000706                     u940:
   795  000706                     
   796                           ;doprnt.c: 611: flag &= ~0x04;
   797  000706  942A               	bcf	sprintf@flag^0,2,c
   798  000708                     l1752:
   799                           
   800                           ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
   801  000708  C00F  FFF6         	movff	sprintf@f,tblptrl
   802  00070C  C010  FFF7         	movff	sprintf@f+1,tblptrh
   803  000710                     	if	0	;tblptru may be non-zero
   804  000710                     	endif
   805  000710                     	if	0	;tblptru may be non-zero
   806  000710                     	endif
   807  000710  0008               	tblrd		*
   808  000712  50F5               	movf	tablat,w,c
   809  000714  ECED  F009         	call	_isdigit
   810  000718  A0D8               	btfss	status,0,c
   811  00071A  EF91  F003         	goto	u951
   812  00071E  EF93  F003         	goto	u950
   813  000722                     u951:
   814  000722  EFCC  F003         	goto	l1764
   815  000726                     u950:
   816  000726                     
   817                           ;doprnt.c: 615: width = 0;
   818  000726  0E00               	movlw	0
   819  000728  6E28               	movwf	(sprintf@width+1)^0,c
   820  00072A  0E00               	movlw	0
   821  00072C  6E27               	movwf	sprintf@width^0,c
   822  00072E                     l1756:
   823                           
   824                           ;doprnt.c: 617: width *= 10;
   825  00072E  C027  F001         	movff	sprintf@width,___wmul@multiplier
   826  000732  C028  F002         	movff	sprintf@width+1,___wmul@multiplier+1
   827  000736  0E00               	movlw	0
   828  000738  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   829  00073A  0E0A               	movlw	10
   830  00073C  6E03               	movwf	___wmul@multiplicand^0,c
   831  00073E  EC1E  F00A         	call	___wmul	;wreg free
   832  000742  C001  F027         	movff	?___wmul,sprintf@width
   833  000746  C002  F028         	movff	?___wmul+1,sprintf@width+1
   834  00074A                     
   835                           ;doprnt.c: 618: width += *f++ - '0';
   836  00074A  0ED0               	movlw	208
   837  00074C  6E13               	movwf	??_sprintf^0,c
   838  00074E  0EFF               	movlw	255
   839  000750  6E14               	movwf	(??_sprintf+1)^0,c
   840  000752  C00F  FFF6         	movff	sprintf@f,tblptrl
   841  000756  C010  FFF7         	movff	sprintf@f+1,tblptrh
   842  00075A                     	if	0	;tblptru may be non-zero
   843  00075A                     	endif
   844  00075A                     	if	0	;tblptru may be non-zero
   845  00075A                     	endif
   846  00075A  0008               	tblrd		*
   847  00075C  50F5               	movf	tablat,w,c
   848  00075E  6E15               	movwf	(??_sprintf+2)^0,c
   849  000760  6A16               	clrf	(??_sprintf+3)^0,c
   850  000762  5013               	movf	??_sprintf^0,w,c
   851  000764  2615               	addwf	(??_sprintf+2)^0,f,c
   852  000766  5014               	movf	(??_sprintf+1)^0,w,c
   853  000768  2216               	addwfc	(??_sprintf+3)^0,f,c
   854  00076A  5015               	movf	(??_sprintf+2)^0,w,c
   855  00076C  2627               	addwf	sprintf@width^0,f,c
   856  00076E  5016               	movf	(??_sprintf+3)^0,w,c
   857  000770  2228               	addwfc	(sprintf@width+1)^0,f,c
   858  000772  4A0F               	infsnz	sprintf@f^0,f,c
   859  000774  2A10               	incf	(sprintf@f+1)^0,f,c
   860  000776                     
   861                           ;doprnt.c: 619: } while(isdigit((unsigned)*f));
   862  000776  C00F  FFF6         	movff	sprintf@f,tblptrl
   863  00077A  C010  FFF7         	movff	sprintf@f+1,tblptrh
   864  00077E                     	if	0	;tblptru may be non-zero
   865  00077E                     	endif
   866  00077E                     	if	0	;tblptru may be non-zero
   867  00077E                     	endif
   868  00077E  0008               	tblrd		*
   869  000780  50F5               	movf	tablat,w,c
   870  000782  ECED  F009         	call	_isdigit
   871  000786  B0D8               	btfsc	status,0,c
   872  000788  EFC8  F003         	goto	u961
   873  00078C  EFCA  F003         	goto	u960
   874  000790                     u961:
   875  000790  EF97  F003         	goto	l1756
   876  000794                     u960:
   877  000794  EFE8  F003         	goto	l1772
   878  000798                     l1764:
   879  000798  C00F  FFF6         	movff	sprintf@f,tblptrl
   880  00079C  C010  FFF7         	movff	sprintf@f+1,tblptrh
   881  0007A0                     	if	0	;tblptru may be non-zero
   882  0007A0                     	endif
   883  0007A0                     	if	0	;tblptru may be non-zero
   884  0007A0                     	endif
   885  0007A0  0008               	tblrd		*
   886  0007A2  50F5               	movf	tablat,w,c
   887  0007A4  0A2A               	xorlw	42
   888  0007A6  A4D8               	btfss	status,2,c
   889  0007A8  EFD8  F003         	goto	u971
   890  0007AC  EFDA  F003         	goto	u970
   891  0007B0                     u971:
   892  0007B0  EFE8  F003         	goto	l1772
   893  0007B4                     u970:
   894  0007B4                     
   895                           ;doprnt.c: 622: width = (*(int *)__va_arg((*(int **)ap), (int)0));
   896  0007B4  C022  FFD9         	movff	sprintf@ap,fsr2l
   897  0007B8  C023  FFDA         	movff	sprintf@ap+1,fsr2h
   898  0007BC  CFDE F027          	movff	postinc2,sprintf@width
   899  0007C0  CFDD F028          	movff	postdec2,sprintf@width+1
   900  0007C4  0E02               	movlw	2
   901  0007C6  2622               	addwf	sprintf@ap^0,f,c
   902  0007C8  0E00               	movlw	0
   903  0007CA  2223               	addwfc	(sprintf@ap+1)^0,f,c
   904  0007CC                     
   905                           ;doprnt.c: 623: f++;
   906  0007CC  4A0F               	infsnz	sprintf@f^0,f,c
   907  0007CE  2A10               	incf	(sprintf@f+1)^0,f,c
   908  0007D0                     l1772:
   909                           
   910                           ;doprnt.c: 625: };doprnt.c: 628: if(*f == '.') {
   911  0007D0  C00F  FFF6         	movff	sprintf@f,tblptrl
   912  0007D4  C010  FFF7         	movff	sprintf@f+1,tblptrh
   913  0007D8                     	if	0	;tblptru may be non-zero
   914  0007D8                     	endif
   915  0007D8                     	if	0	;tblptru may be non-zero
   916  0007D8                     	endif
   917  0007D8  0008               	tblrd		*
   918  0007DA  50F5               	movf	tablat,w,c
   919  0007DC  0A2E               	xorlw	46
   920  0007DE  A4D8               	btfss	status,2,c
   921  0007E0  EFF4  F003         	goto	u981
   922  0007E4  EFF6  F003         	goto	u980
   923  0007E8                     u981:
   924  0007E8  EF42  F004         	goto	l1800
   925  0007EC                     u980:
   926  0007EC                     
   927                           ;doprnt.c: 629: flag |= 0x4000;
   928  0007EC  8C2B               	bsf	(sprintf@flag+1)^0,6,c
   929                           
   930                           ;doprnt.c: 630: f++;
   931  0007EE  4A0F               	infsnz	sprintf@f^0,f,c
   932  0007F0  2A10               	incf	(sprintf@f+1)^0,f,c
   933  0007F2                     
   934                           ;doprnt.c: 632: if(*f == '*') {
   935  0007F2  C00F  FFF6         	movff	sprintf@f,tblptrl
   936  0007F6  C010  FFF7         	movff	sprintf@f+1,tblptrh
   937  0007FA                     	if	0	;tblptru may be non-zero
   938  0007FA                     	endif
   939  0007FA                     	if	0	;tblptru may be non-zero
   940  0007FA                     	endif
   941  0007FA  0008               	tblrd		*
   942  0007FC  50F5               	movf	tablat,w,c
   943  0007FE  0A2A               	xorlw	42
   944  000800  A4D8               	btfss	status,2,c
   945  000802  EF05  F004         	goto	u991
   946  000806  EF07  F004         	goto	u990
   947  00080A                     u991:
   948  00080A  EF1F  F004         	goto	l1790
   949  00080E                     u990:
   950  00080E                     
   951                           ;doprnt.c: 633: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
   952  00080E  C022  FFD9         	movff	sprintf@ap,fsr2l
   953  000812  C023  FFDA         	movff	sprintf@ap+1,fsr2h
   954  000816  50DF               	movf	indf2,w,c
   955  000818  6E26               	movwf	sprintf@prec^0,c
   956  00081A  0E02               	movlw	2
   957  00081C  2622               	addwf	sprintf@ap^0,f,c
   958  00081E  0E00               	movlw	0
   959  000820  2223               	addwfc	(sprintf@ap+1)^0,f,c
   960  000822                     
   961                           ;doprnt.c: 634: if (prec < 0) {
   962  000822  BE26               	btfsc	sprintf@prec^0,7,c
   963  000824  EF18  F004         	goto	u1000
   964  000828  EF16  F004         	goto	u1001
   965  00082C                     u1001:
   966  00082C  EF1B  F004         	goto	l1788
   967  000830                     u1000:
   968  000830                     
   969                           ;doprnt.c: 635: prec = 0;
   970  000830  0E00               	movlw	0
   971  000832  6E26               	movwf	sprintf@prec^0,c
   972  000834                     
   973                           ;doprnt.c: 636: flag &= ~0x4000;
   974  000834  9C2B               	bcf	(sprintf@flag+1)^0,6,c
   975  000836                     l1788:
   976                           
   977                           ;doprnt.c: 640: };doprnt.c: 641: f++;
   978  000836  4A0F               	infsnz	sprintf@f^0,f,c
   979  000838  2A10               	incf	(sprintf@f+1)^0,f,c
   980                           
   981                           ;doprnt.c: 642: } else
   982  00083A  EFF0  F004         	goto	l1856
   983  00083E                     l1790:
   984                           
   985                           ;doprnt.c: 644: {;doprnt.c: 645: prec = 0;
   986  00083E  0E00               	movlw	0
   987  000840  6E26               	movwf	sprintf@prec^0,c
   988                           
   989                           ;doprnt.c: 646: while(isdigit((unsigned)*f)) {
   990  000842  EF31  F004         	goto	l1798
   991  000846                     l1792:
   992                           
   993                           ;doprnt.c: 647: prec *= 10;
   994  000846  0E0A               	movlw	10
   995  000848  0226               	mulwf	sprintf@prec^0,c
   996  00084A  50F3               	movf	prodl,w,c
   997  00084C  6E26               	movwf	sprintf@prec^0,c
   998  00084E                     
   999                           ;doprnt.c: 648: prec += *f++ - '0';
  1000  00084E  C00F  FFF6         	movff	sprintf@f,tblptrl
  1001  000852  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1002  000856                     	if	0	;tblptru may be non-zero
  1003  000856                     	endif
  1004  000856                     	if	0	;tblptru may be non-zero
  1005  000856                     	endif
  1006  000856  0008               	tblrd		*
  1007  000858  50F5               	movf	tablat,w,c
  1008  00085A  0FD0               	addlw	208
  1009  00085C  2626               	addwf	sprintf@prec^0,f,c
  1010  00085E  4A0F               	infsnz	sprintf@f^0,f,c
  1011  000860  2A10               	incf	(sprintf@f+1)^0,f,c
  1012  000862                     l1798:
  1013  000862  C00F  FFF6         	movff	sprintf@f,tblptrl
  1014  000866  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1015  00086A                     	if	0	;tblptru may be non-zero
  1016  00086A                     	endif
  1017  00086A                     	if	0	;tblptru may be non-zero
  1018  00086A                     	endif
  1019  00086A  0008               	tblrd		*
  1020  00086C  50F5               	movf	tablat,w,c
  1021  00086E  ECED  F009         	call	_isdigit
  1022  000872  B0D8               	btfsc	status,0,c
  1023  000874  EF3E  F004         	goto	u1011
  1024  000878  EF40  F004         	goto	u1010
  1025  00087C                     u1011:
  1026  00087C  EF23  F004         	goto	l1792
  1027  000880                     u1010:
  1028  000880  EFF0  F004         	goto	l1856
  1029  000884                     l1800:
  1030                           
  1031                           ;doprnt.c: 652: prec = 0;
  1032  000884  0E00               	movlw	0
  1033  000886  6E26               	movwf	sprintf@prec^0,c
  1034  000888  EFF0  F004         	goto	l1856
  1035  00088C                     l1802:
  1036                           
  1037                           ;doprnt.c: 717: flag |= 0x40;
  1038  00088C  8C2A               	bsf	sprintf@flag^0,6,c
  1039                           
  1040                           ;doprnt.c: 719: break;
  1041  00088E  EF1C  F005         	goto	l1858
  1042  000892                     l1804:
  1043                           
  1044                           ;doprnt.c: 740: flag |= 0x20;
  1045  000892  8A2A               	bsf	sprintf@flag^0,5,c
  1046  000894                     l250:
  1047                           
  1048                           ;doprnt.c: 747: flag |= 0x80;
  1049  000894  8E2A               	bsf	sprintf@flag^0,7,c
  1050                           
  1051                           ;doprnt.c: 749: break;
  1052  000896  EF1C  F005         	goto	l1858
  1053  00089A                     l1806:
  1054                           
  1055                           ;doprnt.c: 779: if(prec && (prec < ((int)len)))
  1056  00089A  5026               	movf	sprintf@prec^0,w,c
  1057  00089C  B4D8               	btfsc	status,2,c
  1058  00089E  EF53  F004         	goto	u1021
  1059  0008A2  EF55  F004         	goto	u1020
  1060  0008A6                     u1021:
  1061  0008A6  EF68  F004         	goto	l1812
  1062  0008AA                     u1020:
  1063  0008AA  0E80               	movlw	128
  1064  0008AC  BE26               	btfsc	sprintf@prec^0,7,c
  1065  0008AE  0E7F               	movlw	127
  1066  0008B0  6E13               	movwf	??_sprintf^0,c
  1067  0008B2  5020               	movf	sprintf@len^0,w,c
  1068  0008B4  5C26               	subwf	sprintf@prec^0,w,c
  1069  0008B6  5021               	movf	(sprintf@len+1)^0,w,c
  1070  0008B8  0A80               	xorlw	128
  1071  0008BA  5813               	subwfb	??_sprintf^0,w,c
  1072  0008BC  B0D8               	btfsc	status,0,c
  1073  0008BE  EF63  F004         	goto	u1031
  1074  0008C2  EF65  F004         	goto	u1030
  1075  0008C6                     u1031:
  1076  0008C6  EF68  F004         	goto	l1812
  1077  0008CA                     u1030:
  1078  0008CA                     
  1079                           ;doprnt.c: 780: len = (unsigned char)prec;
  1080  0008CA  C026  F020         	movff	sprintf@prec,sprintf@len
  1081  0008CE  6A21               	clrf	(sprintf@len+1)^0,c
  1082  0008D0                     l1812:
  1083                           
  1084                           ;doprnt.c: 783: if(((unsigned)width) > len)
  1085  0008D0  5027               	movf	sprintf@width^0,w,c
  1086  0008D2  5C20               	subwf	sprintf@len^0,w,c
  1087  0008D4  5028               	movf	(sprintf@width+1)^0,w,c
  1088  0008D6  5821               	subwfb	(sprintf@len+1)^0,w,c
  1089  0008D8  B0D8               	btfsc	status,0,c
  1090  0008DA  EF71  F004         	goto	u1041
  1091  0008DE  EF73  F004         	goto	u1040
  1092  0008E2                     u1041:
  1093  0008E2  EF79  F004         	goto	l1816
  1094  0008E6                     u1040:
  1095  0008E6                     
  1096                           ;doprnt.c: 784: width -= len;
  1097  0008E6  5020               	movf	sprintf@len^0,w,c
  1098  0008E8  5E27               	subwf	sprintf@width^0,f,c
  1099  0008EA  5021               	movf	(sprintf@len+1)^0,w,c
  1100  0008EC  5A28               	subwfb	(sprintf@width+1)^0,f,c
  1101  0008EE  EF7D  F004         	goto	l1818
  1102  0008F2                     l1816:
  1103                           
  1104                           ;doprnt.c: 785: else;doprnt.c: 786: width = 0;
  1105  0008F2  0E00               	movlw	0
  1106  0008F4  6E28               	movwf	(sprintf@width+1)^0,c
  1107  0008F6  0E00               	movlw	0
  1108  0008F8  6E27               	movwf	sprintf@width^0,c
  1109  0008FA                     l1818:
  1110                           
  1111                           ;doprnt.c: 788: if(!(flag & 0x08))
  1112  0008FA  B62A               	btfsc	sprintf@flag^0,3,c
  1113  0008FC  EF82  F004         	goto	u1051
  1114  000900  EF84  F004         	goto	u1050
  1115  000904                     u1051:
  1116  000904  EFAB  F004         	goto	l1834
  1117  000908                     u1050:
  1118  000908  EF8E  F004         	goto	l1826
  1119  00090C                     l1822:
  1120                           
  1121                           ;doprnt.c: 791: ((*sp++ = (' ')));
  1122  00090C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1123  000910  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1124  000914  0E20               	movlw	32
  1125  000916  6EDF               	movwf	indf2,c
  1126  000918  4A0D               	infsnz	sprintf@sp^0,f,c
  1127  00091A  2A0E               	incf	(sprintf@sp+1)^0,f,c
  1128  00091C                     l1826:
  1129  00091C  0627               	decf	sprintf@width^0,f,c
  1130  00091E  A0D8               	btfss	status,0,c
  1131  000920  0628               	decf	(sprintf@width+1)^0,f,c
  1132  000922  2827               	incf	sprintf@width^0,w,c
  1133  000924  E106               	bnz	u1061
  1134  000926  2828               	incf	(sprintf@width+1)^0,w,c
  1135  000928  A4D8               	btfss	status,2,c
  1136  00092A  EF99  F004         	goto	u1061
  1137  00092E  EF9B  F004         	goto	u1060
  1138  000932                     u1061:
  1139  000932  EF86  F004         	goto	l1822
  1140  000936                     u1060:
  1141  000936  EFAB  F004         	goto	l1834
  1142  00093A                     l1828:
  1143                           
  1144                           ;doprnt.c: 794: ((*sp++ = (*cp++)));
  1145  00093A  C017  FFD9         	movff	sprintf@cp,fsr2l
  1146  00093E  C018  FFDA         	movff	sprintf@cp+1,fsr2h
  1147  000942  C00D  FFE1         	movff	sprintf@sp,fsr1l
  1148  000946  C00E  FFE2         	movff	sprintf@sp+1,fsr1h
  1149  00094A  CFDF FFE7          	movff	indf2,indf1
  1150  00094E  4A17               	infsnz	sprintf@cp^0,f,c
  1151  000950  2A18               	incf	(sprintf@cp+1)^0,f,c
  1152  000952  4A0D               	infsnz	sprintf@sp^0,f,c
  1153  000954  2A0E               	incf	(sprintf@sp+1)^0,f,c
  1154  000956                     l1834:
  1155  000956  0620               	decf	sprintf@len^0,f,c
  1156  000958  A0D8               	btfss	status,0,c
  1157  00095A  0621               	decf	(sprintf@len+1)^0,f,c
  1158  00095C  2820               	incf	sprintf@len^0,w,c
  1159  00095E  E106               	bnz	u1071
  1160  000960  2821               	incf	(sprintf@len+1)^0,w,c
  1161  000962  A4D8               	btfss	status,2,c
  1162  000964  EFB6  F004         	goto	u1071
  1163  000968  EFB8  F004         	goto	u1070
  1164  00096C                     u1071:
  1165  00096C  EF9D  F004         	goto	l1828
  1166  000970                     u1070:
  1167  000970                     
  1168                           ;doprnt.c: 796: if(flag & 0x08)
  1169  000970  A62A               	btfss	sprintf@flag^0,3,c
  1170  000972  EFBD  F004         	goto	u1081
  1171  000976  EFBF  F004         	goto	u1080
  1172  00097A                     u1081:
  1173  00097A  EFB1  F008         	goto	l2078
  1174  00097E                     u1080:
  1175  00097E  EFC9  F004         	goto	l1842
  1176  000982                     l1838:
  1177                           
  1178                           ;doprnt.c: 798: ((*sp++ = (' ')));
  1179  000982  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1180  000986  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1181  00098A  0E20               	movlw	32
  1182  00098C  6EDF               	movwf	indf2,c
  1183  00098E  4A0D               	infsnz	sprintf@sp^0,f,c
  1184  000990  2A0E               	incf	(sprintf@sp+1)^0,f,c
  1185  000992                     l1842:
  1186  000992  0627               	decf	sprintf@width^0,f,c
  1187  000994  A0D8               	btfss	status,0,c
  1188  000996  0628               	decf	(sprintf@width+1)^0,f,c
  1189  000998  2827               	incf	sprintf@width^0,w,c
  1190  00099A  E106               	bnz	u1091
  1191  00099C  2828               	incf	(sprintf@width+1)^0,w,c
  1192  00099E  A4D8               	btfss	status,2,c
  1193  0009A0  EFD4  F004         	goto	u1091
  1194  0009A4  EFD6  F004         	goto	u1090
  1195  0009A8                     u1091:
  1196  0009A8  EFC1  F004         	goto	l1838
  1197  0009AC                     u1090:
  1198  0009AC  EFB1  F008         	goto	l2078
  1199  0009B0                     l1844:
  1200                           
  1201                           ;doprnt.c: 825: c = (char)(*(int *)__va_arg((*(int **)ap), (int)0));
  1202  0009B0  C022  FFD9         	movff	sprintf@ap,fsr2l
  1203  0009B4  C023  FFDA         	movff	sprintf@ap+1,fsr2h
  1204  0009B8  50DF               	movf	indf2,w,c
  1205  0009BA  6E29               	movwf	sprintf@c^0,c
  1206  0009BC  0E02               	movlw	2
  1207  0009BE  2622               	addwf	sprintf@ap^0,f,c
  1208  0009C0  0E00               	movlw	0
  1209  0009C2  2223               	addwfc	(sprintf@ap+1)^0,f,c
  1210  0009C4                     l1848:
  1211                           
  1212                           ;doprnt.c: 831: cp = (char *)&c;
  1213  0009C4  0E29               	movlw	low sprintf@c
  1214  0009C6  6E17               	movwf	sprintf@cp^0,c
  1215  0009C8  0E00               	movlw	high sprintf@c
  1216  0009CA  6E18               	movwf	(sprintf@cp+1)^0,c
  1217  0009CC                     
  1218                           ;doprnt.c: 832: len = 1;
  1219  0009CC  0E00               	movlw	0
  1220  0009CE  6E21               	movwf	(sprintf@len+1)^0,c
  1221  0009D0  0E01               	movlw	1
  1222  0009D2  6E20               	movwf	sprintf@len^0,c
  1223                           
  1224                           ;doprnt.c: 833: goto dostring;
  1225  0009D4  EF4D  F004         	goto	l1806
  1226  0009D8                     l1852:
  1227                           
  1228                           ;doprnt.c: 844: flag |= 0xC0;
  1229  0009D8  0EC0               	movlw	192
  1230  0009DA  122A               	iorwf	sprintf@flag^0,f,c
  1231                           
  1232                           ;doprnt.c: 845: break;
  1233  0009DC  EF1C  F005         	goto	l1858
  1234  0009E0                     l1856:
  1235  0009E0  C00F  FFF6         	movff	sprintf@f,tblptrl
  1236  0009E4  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1237  0009E8  4A0F               	infsnz	sprintf@f^0,f,c
  1238  0009EA  2A10               	incf	(sprintf@f+1)^0,f,c
  1239  0009EC                     	if	0	;tblptru may be non-zero
  1240  0009EC                     	endif
  1241  0009EC                     	if	0	;tblptru may be non-zero
  1242  0009EC                     	endif
  1243  0009EC  0008               	tblrd		*
  1244  0009EE  CFF5 F029          	movff	tablat,sprintf@c
  1245  0009F2  5029               	movf	sprintf@c^0,w,c
  1246                           
  1247                           ; Switch size 1, requested type "simple"
  1248                           ; Number of cases is 8, Range of values is 0 to 120
  1249                           ; switch strategies available:
  1250                           ; Name         Instructions Cycles
  1251                           ; simple_byte           25    13 (average)
  1252                           ;	Chosen strategy is simple_byte
  1253  0009F4  0A00               	xorlw	0	; case 0
  1254  0009F6  B4D8               	btfsc	status,2,c
  1255  0009F8  EFC2  F008         	goto	l2080
  1256  0009FC  0A58               	xorlw	88	; case 88
  1257  0009FE  B4D8               	btfsc	status,2,c
  1258  000A00  EF49  F004         	goto	l1804
  1259  000A04  0A3B               	xorlw	59	; case 99
  1260  000A06  B4D8               	btfsc	status,2,c
  1261  000A08  EFD8  F004         	goto	l1844
  1262  000A0C  0A07               	xorlw	7	; case 100
  1263  000A0E  B4D8               	btfsc	status,2,c
  1264  000A10  EF1C  F005         	goto	l1858
  1265  000A14  0A0D               	xorlw	13	; case 105
  1266  000A16  B4D8               	btfsc	status,2,c
  1267  000A18  EF1C  F005         	goto	l1858
  1268  000A1C  0A06               	xorlw	6	; case 111
  1269  000A1E  B4D8               	btfsc	status,2,c
  1270  000A20  EF46  F004         	goto	l1802
  1271  000A24  0A1A               	xorlw	26	; case 117
  1272  000A26  B4D8               	btfsc	status,2,c
  1273  000A28  EFEC  F004         	goto	l1852
  1274  000A2C  0A0D               	xorlw	13	; case 120
  1275  000A2E  B4D8               	btfsc	status,2,c
  1276  000A30  EF4A  F004         	goto	l250
  1277  000A34  EFE2  F004         	goto	l1848
  1278  000A38                     l1858:
  1279                           
  1280                           ;doprnt.c: 1277: if((flag & (0xC0)) == 0x00)
  1281  000A38  0EC0               	movlw	192
  1282  000A3A  142A               	andwf	sprintf@flag^0,w,c
  1283  000A3C  6E13               	movwf	??_sprintf^0,c
  1284  000A3E  0E00               	movlw	0
  1285  000A40  142B               	andwf	(sprintf@flag+1)^0,w,c
  1286  000A42  6E14               	movwf	(??_sprintf+1)^0,c
  1287  000A44  5013               	movf	??_sprintf^0,w,c
  1288  000A46  1014               	iorwf	(??_sprintf+1)^0,w,c
  1289  000A48  A4D8               	btfss	status,2,c
  1290  000A4A  EF29  F005         	goto	u1101
  1291  000A4E  EF2B  F005         	goto	u1100
  1292  000A52                     u1101:
  1293  000A52  EF46  F005         	goto	l1870
  1294  000A56                     u1100:
  1295  000A56                     
  1296                           ;doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned int)(*(int *)__va_arg((*(int **)ap), 
      +                          (int)0));
  1297  000A56  C022  FFD9         	movff	sprintf@ap,fsr2l
  1298  000A5A  C023  FFDA         	movff	sprintf@ap+1,fsr2h
  1299  000A5E  CFDE F024          	movff	postinc2,sprintf@val
  1300  000A62  CFDD F025          	movff	postdec2,sprintf@val+1
  1301  000A66  0E02               	movlw	2
  1302  000A68  2622               	addwf	sprintf@ap^0,f,c
  1303  000A6A  0E00               	movlw	0
  1304  000A6C  2223               	addwfc	(sprintf@ap+1)^0,f,c
  1305  000A6E                     
  1306                           ;doprnt.c: 1287: if((int)val < 0) {
  1307  000A6E  BE25               	btfsc	(sprintf@val+1)^0,7,c
  1308  000A70  EF3E  F005         	goto	u1110
  1309  000A74  EF3C  F005         	goto	u1111
  1310  000A78                     u1111:
  1311  000A78  EF52  F005         	goto	l1874
  1312  000A7C                     u1110:
  1313  000A7C                     
  1314                           ;doprnt.c: 1288: flag |= 0x03;
  1315  000A7C  0E03               	movlw	3
  1316  000A7E  122A               	iorwf	sprintf@flag^0,f,c
  1317  000A80                     
  1318                           ;doprnt.c: 1289: val = -val;
  1319  000A80  6C24               	negf	sprintf@val^0,c
  1320  000A82  1E25               	comf	(sprintf@val+1)^0,f,c
  1321  000A84  B0D8               	btfsc	status,0,c
  1322  000A86  2A25               	incf	(sprintf@val+1)^0,f,c
  1323  000A88  EF52  F005         	goto	l1874
  1324  000A8C                     l1870:
  1325                           
  1326                           ;doprnt.c: 1294: else;doprnt.c: 1299: {;doprnt.c: 1312: val = (*(unsigned *)__va_arg((*(
      +                          unsigned **)ap), (unsigned)0));
  1327  000A8C  C022  FFD9         	movff	sprintf@ap,fsr2l
  1328  000A90  C023  FFDA         	movff	sprintf@ap+1,fsr2h
  1329  000A94  CFDE F024          	movff	postinc2,sprintf@val
  1330  000A98  CFDD F025          	movff	postdec2,sprintf@val+1
  1331  000A9C  0E02               	movlw	2
  1332  000A9E  2622               	addwf	sprintf@ap^0,f,c
  1333  000AA0  0E00               	movlw	0
  1334  000AA2  2223               	addwfc	(sprintf@ap+1)^0,f,c
  1335  000AA4                     l1874:
  1336                           
  1337                           ;doprnt.c: 1313: };doprnt.c: 1316: if(prec == 0 && val == 0)
  1338  000AA4  5026               	movf	sprintf@prec^0,w,c
  1339  000AA6  A4D8               	btfss	status,2,c
  1340  000AA8  EF58  F005         	goto	u1121
  1341  000AAC  EF5A  F005         	goto	u1120
  1342  000AB0                     u1121:
  1343  000AB0  EFDB  F005         	goto	l1924
  1344  000AB4                     u1120:
  1345  000AB4  5024               	movf	sprintf@val^0,w,c
  1346  000AB6  1025               	iorwf	(sprintf@val+1)^0,w,c
  1347  000AB8  A4D8               	btfss	status,2,c
  1348  000ABA  EF61  F005         	goto	u1131
  1349  000ABE  EF63  F005         	goto	u1130
  1350  000AC2                     u1131:
  1351  000AC2  EFDB  F005         	goto	l1924
  1352  000AC6                     u1130:
  1353  000AC6                     
  1354                           ;doprnt.c: 1317: prec++;
  1355  000AC6  2A26               	incf	sprintf@prec^0,f,c
  1356  000AC8  EFDB  F005         	goto	l1924
  1357  000ACC                     l1880:
  1358                           
  1359                           ;doprnt.c: 1328: case 0xC0:;doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/sizeof dpowe
      +                          rs[0] ; c++)
  1360  000ACC  0E01               	movlw	1
  1361  000ACE  6E29               	movwf	sprintf@c^0,c
  1362  000AD0                     l1882:
  1363  000AD0  0E05               	movlw	5
  1364  000AD2  1829               	xorwf	sprintf@c^0,w,c
  1365  000AD4  A4D8               	btfss	status,2,c
  1366  000AD6  EF6F  F005         	goto	u1141
  1367  000ADA  EF71  F005         	goto	u1140
  1368  000ADE                     u1141:
  1369  000ADE  EF73  F005         	goto	l1886
  1370  000AE2                     u1140:
  1371  000AE2  EFEF  F005         	goto	l1926
  1372  000AE6                     l1886:
  1373                           
  1374                           ;doprnt.c: 1332: if(val < dpowers[c])
  1375  000AE6  5029               	movf	sprintf@c^0,w,c
  1376  000AE8  0D02               	mullw	2
  1377  000AEA  0E0D               	movlw	low _dpowers
  1378  000AEC  24F3               	addwf	243,w,c
  1379  000AEE  6EF6               	movwf	tblptrl,c
  1380  000AF0  0E06               	movlw	high _dpowers
  1381  000AF2  20F4               	addwfc	244,w,c
  1382  000AF4  6EF7               	movwf	tblptrh,c
  1383  000AF6                     	if	0	;There are less than 3 active tblptr bytes
  1384  000AF6                     	endif
  1385  000AF6  0009               	tblrd		*+
  1386  000AF8  50F5               	movf	tablat,w,c
  1387  000AFA  5C24               	subwf	sprintf@val^0,w,c
  1388  000AFC  0009               	tblrd		*+
  1389  000AFE  50F5               	movf	tablat,w,c
  1390  000B00  5825               	subwfb	(sprintf@val+1)^0,w,c
  1391  000B02  B0D8               	btfsc	status,0,c
  1392  000B04  EF86  F005         	goto	u1151
  1393  000B08  EF88  F005         	goto	u1150
  1394  000B0C                     u1151:
  1395  000B0C  EF8A  F005         	goto	l1890
  1396  000B10                     u1150:
  1397  000B10  EFEF  F005         	goto	l1926
  1398  000B14                     l1890:
  1399  000B14  2A29               	incf	sprintf@c^0,f,c
  1400  000B16  EF68  F005         	goto	l1882
  1401  000B1A                     l1894:
  1402                           
  1403                           ;doprnt.c: 1342: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1404  000B1A  0E01               	movlw	1
  1405  000B1C  6E29               	movwf	sprintf@c^0,c
  1406  000B1E                     l1896:
  1407  000B1E  0E04               	movlw	4
  1408  000B20  1829               	xorwf	sprintf@c^0,w,c
  1409  000B22  A4D8               	btfss	status,2,c
  1410  000B24  EF96  F005         	goto	u1161
  1411  000B28  EF98  F005         	goto	u1160
  1412  000B2C                     u1161:
  1413  000B2C  EF9A  F005         	goto	l1900
  1414  000B30                     u1160:
  1415  000B30  EFEF  F005         	goto	l1926
  1416  000B34                     l1900:
  1417                           
  1418                           ;doprnt.c: 1343: if(val < hexpowers[c])
  1419  000B34  5029               	movf	sprintf@c^0,w,c
  1420  000B36  0D02               	mullw	2
  1421  000B38  0E17               	movlw	low _hexpowers
  1422  000B3A  24F3               	addwf	243,w,c
  1423  000B3C  6EF6               	movwf	tblptrl,c
  1424  000B3E  0E06               	movlw	high _hexpowers
  1425  000B40  20F4               	addwfc	244,w,c
  1426  000B42  6EF7               	movwf	tblptrh,c
  1427  000B44                     	if	0	;There are less than 3 active tblptr bytes
  1428  000B44                     	endif
  1429  000B44  0009               	tblrd		*+
  1430  000B46  50F5               	movf	tablat,w,c
  1431  000B48  5C24               	subwf	sprintf@val^0,w,c
  1432  000B4A  0009               	tblrd		*+
  1433  000B4C  50F5               	movf	tablat,w,c
  1434  000B4E  5825               	subwfb	(sprintf@val+1)^0,w,c
  1435  000B50  B0D8               	btfsc	status,0,c
  1436  000B52  EFAD  F005         	goto	u1171
  1437  000B56  EFAF  F005         	goto	u1170
  1438  000B5A                     u1171:
  1439  000B5A  EFB1  F005         	goto	l1904
  1440  000B5E                     u1170:
  1441  000B5E  EFEF  F005         	goto	l1926
  1442  000B62                     l1904:
  1443  000B62  2A29               	incf	sprintf@c^0,f,c
  1444  000B64  EF8F  F005         	goto	l1896
  1445  000B68                     l1908:
  1446                           
  1447                           ;doprnt.c: 1354: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  1448  000B68  0E01               	movlw	1
  1449  000B6A  6E29               	movwf	sprintf@c^0,c
  1450  000B6C                     l1910:
  1451  000B6C  0E06               	movlw	6
  1452  000B6E  1829               	xorwf	sprintf@c^0,w,c
  1453  000B70  A4D8               	btfss	status,2,c
  1454  000B72  EFBD  F005         	goto	u1181
  1455  000B76  EFBF  F005         	goto	u1180
  1456  000B7A                     u1181:
  1457  000B7A  EFC1  F005         	goto	l1914
  1458  000B7E                     u1180:
  1459  000B7E  EFEF  F005         	goto	l1926
  1460  000B82                     l1914:
  1461                           
  1462                           ;doprnt.c: 1355: if(val < octpowers[c])
  1463  000B82  5029               	movf	sprintf@c^0,w,c
  1464  000B84  0D02               	mullw	2
  1465  000B86  0E01               	movlw	low _octpowers
  1466  000B88  24F3               	addwf	243,w,c
  1467  000B8A  6EF6               	movwf	tblptrl,c
  1468  000B8C  0E06               	movlw	high _octpowers
  1469  000B8E  20F4               	addwfc	244,w,c
  1470  000B90  6EF7               	movwf	tblptrh,c
  1471  000B92                     	if	0	;There are less than 3 active tblptr bytes
  1472  000B92                     	endif
  1473  000B92  0009               	tblrd		*+
  1474  000B94  50F5               	movf	tablat,w,c
  1475  000B96  5C24               	subwf	sprintf@val^0,w,c
  1476  000B98  0009               	tblrd		*+
  1477  000B9A  50F5               	movf	tablat,w,c
  1478  000B9C  5825               	subwfb	(sprintf@val+1)^0,w,c
  1479  000B9E  B0D8               	btfsc	status,0,c
  1480  000BA0  EFD4  F005         	goto	u1191
  1481  000BA4  EFD6  F005         	goto	u1190
  1482  000BA8                     u1191:
  1483  000BA8  EFD8  F005         	goto	l1918
  1484  000BAC                     u1190:
  1485  000BAC  EFEF  F005         	goto	l1926
  1486  000BB0                     l1918:
  1487  000BB0  2A29               	incf	sprintf@c^0,f,c
  1488  000BB2  EFB6  F005         	goto	l1910
  1489  000BB6                     l1924:
  1490  000BB6  502A               	movf	sprintf@flag^0,w,c
  1491  000BB8  0BC0               	andlw	192
  1492                           
  1493                           ; Switch size 1, requested type "simple"
  1494                           ; Number of cases is 4, Range of values is 0 to 192
  1495                           ; switch strategies available:
  1496                           ; Name         Instructions Cycles
  1497                           ; simple_byte           13     7 (average)
  1498                           ;	Chosen strategy is simple_byte
  1499  000BBA  0A00               	xorlw	0	; case 0
  1500  000BBC  B4D8               	btfsc	status,2,c
  1501  000BBE  EF66  F005         	goto	l1880
  1502  000BC2  0A40               	xorlw	64	; case 64
  1503  000BC4  B4D8               	btfsc	status,2,c
  1504  000BC6  EFB4  F005         	goto	l1908
  1505  000BCA  0AC0               	xorlw	192	; case 128
  1506  000BCC  B4D8               	btfsc	status,2,c
  1507  000BCE  EF8D  F005         	goto	l1894
  1508  000BD2  0A40               	xorlw	64	; case 192
  1509  000BD4  B4D8               	btfsc	status,2,c
  1510  000BD6  EF66  F005         	goto	l1880
  1511  000BDA  EFEF  F005         	goto	l1926
  1512  000BDE                     l1926:
  1513                           
  1514                           ;doprnt.c: 1365: if(c < prec)
  1515  000BDE  5029               	movf	sprintf@c^0,w,c
  1516  000BE0  80D8               	bsf	status,0,c
  1517  000BE2  84D8               	bsf	status,2,c
  1518  000BE4  AE26               	btfss	sprintf@prec^0,7,c
  1519  000BE6  5C26               	subwf	sprintf@prec^0,w,c
  1520  000BE8  A0D8               	btfss	status,0,c
  1521  000BEA  84D8               	bsf	status,2,c
  1522  000BEC  B4D8               	btfsc	status,2,c
  1523  000BEE  EFFB  F005         	goto	u1201
  1524  000BF2  EFFD  F005         	goto	u1200
  1525  000BF6                     u1201:
  1526  000BF6  EF01  F006         	goto	l1930
  1527  000BFA                     u1200:
  1528  000BFA                     
  1529                           ;doprnt.c: 1366: c = (char)prec;
  1530  000BFA  C026  F029         	movff	sprintf@prec,sprintf@c
  1531  000BFE  EF10  F006         	goto	l1934
  1532  000C02                     l1930:
  1533                           
  1534                           ;doprnt.c: 1367: else if(prec < c)
  1535  000C02  5029               	movf	sprintf@c^0,w,c
  1536  000C04  90D8               	bcf	status,0,c
  1537  000C06  AE26               	btfss	sprintf@prec^0,7,c
  1538  000C08  5C26               	subwf	sprintf@prec^0,w,c
  1539  000C0A  B0D8               	btfsc	status,0,c
  1540  000C0C  80D8               	bsf	status,0,c
  1541  000C0E  B0D8               	btfsc	status,0,c
  1542  000C10  EF0C  F006         	goto	u1211
  1543  000C14  EF0E  F006         	goto	u1210
  1544  000C18                     u1211:
  1545  000C18  EF10  F006         	goto	l1934
  1546  000C1C                     u1210:
  1547  000C1C                     
  1548                           ;doprnt.c: 1368: prec = c;
  1549  000C1C  C029  F026         	movff	sprintf@c,sprintf@prec
  1550  000C20                     l1934:
  1551                           
  1552                           ;doprnt.c: 1371: if(width && flag & 0x03)
  1553  000C20  5027               	movf	sprintf@width^0,w,c
  1554  000C22  1028               	iorwf	(sprintf@width+1)^0,w,c
  1555  000C24  B4D8               	btfsc	status,2,c
  1556  000C26  EF17  F006         	goto	u1221
  1557  000C2A  EF19  F006         	goto	u1220
  1558  000C2E                     u1221:
  1559  000C2E  EF2B  F006         	goto	l1940
  1560  000C32                     u1220:
  1561  000C32  0E03               	movlw	3
  1562  000C34  142A               	andwf	sprintf@flag^0,w,c
  1563  000C36  6E13               	movwf	??_sprintf^0,c
  1564  000C38  0E00               	movlw	0
  1565  000C3A  142B               	andwf	(sprintf@flag+1)^0,w,c
  1566  000C3C  6E14               	movwf	(??_sprintf+1)^0,c
  1567  000C3E  5013               	movf	??_sprintf^0,w,c
  1568  000C40  1014               	iorwf	(??_sprintf+1)^0,w,c
  1569  000C42  B4D8               	btfsc	status,2,c
  1570  000C44  EF26  F006         	goto	u1231
  1571  000C48  EF28  F006         	goto	u1230
  1572  000C4C                     u1231:
  1573  000C4C  EF2B  F006         	goto	l1940
  1574  000C50                     u1230:
  1575  000C50                     
  1576                           ;doprnt.c: 1372: width--;
  1577  000C50  0627               	decf	sprintf@width^0,f,c
  1578  000C52  A0D8               	btfss	status,0,c
  1579  000C54  0628               	decf	(sprintf@width+1)^0,f,c
  1580  000C56                     l1940:
  1581                           
  1582                           ;doprnt.c: 1374: if(flag & 0x4000) {
  1583  000C56  AC2B               	btfss	(sprintf@flag+1)^0,6,c
  1584  000C58  EF30  F006         	goto	u1241
  1585  000C5C  EF32  F006         	goto	u1240
  1586  000C60                     u1241:
  1587  000C60  EF4E  F006         	goto	l1948
  1588  000C64                     u1240:
  1589  000C64                     
  1590                           ;doprnt.c: 1375: if(width > prec)
  1591  000C64  0E80               	movlw	128
  1592  000C66  BE26               	btfsc	sprintf@prec^0,7,c
  1593  000C68  0E7F               	movlw	127
  1594  000C6A  6E13               	movwf	??_sprintf^0,c
  1595  000C6C  5027               	movf	sprintf@width^0,w,c
  1596  000C6E  5C26               	subwf	sprintf@prec^0,w,c
  1597  000C70  5028               	movf	(sprintf@width+1)^0,w,c
  1598  000C72  0A80               	xorlw	128
  1599  000C74  5813               	subwfb	??_sprintf^0,w,c
  1600  000C76  B0D8               	btfsc	status,0,c
  1601  000C78  EF40  F006         	goto	u1251
  1602  000C7C  EF42  F006         	goto	u1250
  1603  000C80                     u1251:
  1604  000C80  EF4A  F006         	goto	l1946
  1605  000C84                     u1250:
  1606  000C84                     
  1607                           ;doprnt.c: 1376: width -= prec;
  1608  000C84  5026               	movf	sprintf@prec^0,w,c
  1609  000C86  5E27               	subwf	sprintf@width^0,f,c
  1610  000C88  0E00               	movlw	0
  1611  000C8A  BE26               	btfsc	sprintf@prec^0,7,c
  1612  000C8C  0EFF               	movlw	255
  1613  000C8E  5A28               	subwfb	(sprintf@width+1)^0,f,c
  1614  000C90  EF4E  F006         	goto	l1948
  1615  000C94                     l1946:
  1616                           
  1617                           ;doprnt.c: 1377: else;doprnt.c: 1378: width = 0;
  1618  000C94  0E00               	movlw	0
  1619  000C96  6E28               	movwf	(sprintf@width+1)^0,c
  1620  000C98  0E00               	movlw	0
  1621  000C9A  6E27               	movwf	sprintf@width^0,c
  1622  000C9C                     l1948:
  1623                           
  1624                           ;doprnt.c: 1379: };doprnt.c: 1383: if((flag & (;doprnt.c: 1385: 0x04|;doprnt.c: 1387: (0
      +                          xC0)|0x800)) == (0x40|0x800)) {
  1625  000C9C  0EC4               	movlw	196
  1626  000C9E  6E13               	movwf	??_sprintf^0,c
  1627  000CA0  0E08               	movlw	8
  1628  000CA2  6E14               	movwf	(??_sprintf+1)^0,c
  1629  000CA4  C02A  F015         	movff	sprintf@flag,??_sprintf+2
  1630  000CA8  C02B  F016         	movff	sprintf@flag+1,??_sprintf+3
  1631  000CAC  5013               	movf	??_sprintf^0,w,c
  1632  000CAE  1615               	andwf	(??_sprintf+2)^0,f,c
  1633  000CB0  5014               	movf	(??_sprintf+1)^0,w,c
  1634  000CB2  1616               	andwf	(??_sprintf+3)^0,f,c
  1635  000CB4  0E40               	movlw	64
  1636  000CB6  1815               	xorwf	(??_sprintf+2)^0,w,c
  1637  000CB8  E107               	bnz	u1261
  1638  000CBA  0E08               	movlw	8
  1639  000CBC  1816               	xorwf	(??_sprintf+3)^0,w,c
  1640  000CBE  A4D8               	btfss	status,2,c
  1641  000CC0  EF64  F006         	goto	u1261
  1642  000CC4  EF66  F006         	goto	u1260
  1643  000CC8                     u1261:
  1644  000CC8  EF74  F006         	goto	l1954
  1645  000CCC                     u1260:
  1646  000CCC                     
  1647                           ;doprnt.c: 1388: if(width)
  1648  000CCC  5027               	movf	sprintf@width^0,w,c
  1649  000CCE  1028               	iorwf	(sprintf@width+1)^0,w,c
  1650  000CD0  B4D8               	btfsc	status,2,c
  1651  000CD2  EF6D  F006         	goto	u1271
  1652  000CD6  EF6F  F006         	goto	u1270
  1653  000CDA                     u1271:
  1654  000CDA  EFA4  F006         	goto	l1962
  1655  000CDE                     u1270:
  1656  000CDE                     
  1657                           ;doprnt.c: 1389: width--;
  1658  000CDE  0627               	decf	sprintf@width^0,f,c
  1659  000CE0  A0D8               	btfss	status,0,c
  1660  000CE2  0628               	decf	(sprintf@width+1)^0,f,c
  1661  000CE4  EFA4  F006         	goto	l1962
  1662  000CE8                     l1954:
  1663                           
  1664                           ;doprnt.c: 1394: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  1665  000CE8  0EC0               	movlw	192
  1666  000CEA  6E13               	movwf	??_sprintf^0,c
  1667  000CEC  0E08               	movlw	8
  1668  000CEE  6E14               	movwf	(??_sprintf+1)^0,c
  1669  000CF0  C02A  F015         	movff	sprintf@flag,??_sprintf+2
  1670  000CF4  C02B  F016         	movff	sprintf@flag+1,??_sprintf+3
  1671  000CF8  5013               	movf	??_sprintf^0,w,c
  1672  000CFA  1615               	andwf	(??_sprintf+2)^0,f,c
  1673  000CFC  5014               	movf	(??_sprintf+1)^0,w,c
  1674  000CFE  1616               	andwf	(??_sprintf+3)^0,f,c
  1675  000D00  0E80               	movlw	128
  1676  000D02  1815               	xorwf	(??_sprintf+2)^0,w,c
  1677  000D04  E107               	bnz	u1281
  1678  000D06  0E08               	movlw	8
  1679  000D08  1816               	xorwf	(??_sprintf+3)^0,w,c
  1680  000D0A  A4D8               	btfss	status,2,c
  1681  000D0C  EF8A  F006         	goto	u1281
  1682  000D10  EF8C  F006         	goto	u1280
  1683  000D14                     u1281:
  1684  000D14  EFA4  F006         	goto	l1962
  1685  000D18                     u1280:
  1686  000D18                     
  1687                           ;doprnt.c: 1398: if(width > 2)
  1688  000D18  BE28               	btfsc	(sprintf@width+1)^0,7,c
  1689  000D1A  EF98  F006         	goto	u1291
  1690  000D1E  5028               	movf	(sprintf@width+1)^0,w,c
  1691  000D20  E109               	bnz	u1290
  1692  000D22  0E03               	movlw	3
  1693  000D24  5C27               	subwf	sprintf@width^0,w,c
  1694  000D26  A0D8               	btfss	status,0,c
  1695  000D28  EF98  F006         	goto	u1291
  1696  000D2C  EF9A  F006         	goto	u1290
  1697  000D30                     u1291:
  1698  000D30  EFA0  F006         	goto	l1960
  1699  000D34                     u1290:
  1700  000D34                     
  1701                           ;doprnt.c: 1399: width -= 2;
  1702  000D34  0EFE               	movlw	254
  1703  000D36  2627               	addwf	sprintf@width^0,f,c
  1704  000D38  0EFF               	movlw	255
  1705  000D3A  2228               	addwfc	(sprintf@width+1)^0,f,c
  1706  000D3C  EFA4  F006         	goto	l1962
  1707  000D40                     l1960:
  1708                           
  1709                           ;doprnt.c: 1400: else;doprnt.c: 1401: width = 0;
  1710  000D40  0E00               	movlw	0
  1711  000D42  6E28               	movwf	(sprintf@width+1)^0,c
  1712  000D44  0E00               	movlw	0
  1713  000D46  6E27               	movwf	sprintf@width^0,c
  1714  000D48                     l1962:
  1715                           
  1716                           ;doprnt.c: 1402: };doprnt.c: 1407: if(width > c)
  1717  000D48  5029               	movf	sprintf@c^0,w,c
  1718  000D4A  6E13               	movwf	??_sprintf^0,c
  1719  000D4C  6A14               	clrf	(??_sprintf+1)^0,c
  1720  000D4E  5027               	movf	sprintf@width^0,w,c
  1721  000D50  5C13               	subwf	??_sprintf^0,w,c
  1722  000D52  5014               	movf	(??_sprintf+1)^0,w,c
  1723  000D54  0A80               	xorlw	128
  1724  000D56  6E15               	movwf	(??_sprintf+2)^0,c
  1725  000D58  5028               	movf	(sprintf@width+1)^0,w,c
  1726  000D5A  0A80               	xorlw	128
  1727  000D5C  5815               	subwfb	(??_sprintf+2)^0,w,c
  1728  000D5E  B0D8               	btfsc	status,0,c
  1729  000D60  EFB4  F006         	goto	u1301
  1730  000D64  EFB6  F006         	goto	u1300
  1731  000D68                     u1301:
  1732  000D68  EFBC  F006         	goto	l1966
  1733  000D6C                     u1300:
  1734  000D6C                     
  1735                           ;doprnt.c: 1408: width -= c;
  1736  000D6C  5029               	movf	sprintf@c^0,w,c
  1737  000D6E  5E27               	subwf	sprintf@width^0,f,c
  1738  000D70  0E00               	movlw	0
  1739  000D72  5A28               	subwfb	(sprintf@width+1)^0,f,c
  1740  000D74  EFC0  F006         	goto	l1968
  1741  000D78                     l1966:
  1742                           
  1743                           ;doprnt.c: 1409: else;doprnt.c: 1410: width = 0;
  1744  000D78  0E00               	movlw	0
  1745  000D7A  6E28               	movwf	(sprintf@width+1)^0,c
  1746  000D7C  0E00               	movlw	0
  1747  000D7E  6E27               	movwf	sprintf@width^0,c
  1748  000D80                     l1968:
  1749                           
  1750                           ;doprnt.c: 1413: if(flag & 0x04) {
  1751  000D80  A42A               	btfss	sprintf@flag^0,2,c
  1752  000D82  EFC5  F006         	goto	u1311
  1753  000D86  EFC7  F006         	goto	u1310
  1754  000D8A                     u1311:
  1755  000D8A  EF47  F007         	goto	l2004
  1756  000D8E                     u1310:
  1757  000D8E                     
  1758                           ;doprnt.c: 1418: if(flag & 0x03)
  1759  000D8E  0E03               	movlw	3
  1760  000D90  142A               	andwf	sprintf@flag^0,w,c
  1761  000D92  6E13               	movwf	??_sprintf^0,c
  1762  000D94  0E00               	movlw	0
  1763  000D96  142B               	andwf	(sprintf@flag+1)^0,w,c
  1764  000D98  6E14               	movwf	(??_sprintf+1)^0,c
  1765  000D9A  5013               	movf	??_sprintf^0,w,c
  1766  000D9C  1014               	iorwf	(??_sprintf+1)^0,w,c
  1767  000D9E  B4D8               	btfsc	status,2,c
  1768  000DA0  EFD4  F006         	goto	u1321
  1769  000DA4  EFD6  F006         	goto	u1320
  1770  000DA8                     u1321:
  1771  000DA8  EFE0  F006         	goto	l304
  1772  000DAC                     u1320:
  1773  000DAC                     
  1774                           ;doprnt.c: 1419: ((*sp++ = ('-')));
  1775  000DAC  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1776  000DB0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1777  000DB4  0E2D               	movlw	45
  1778  000DB6  6EDF               	movwf	indf2,c
  1779  000DB8                     l1974:
  1780  000DB8  4A0D               	infsnz	sprintf@sp^0,f,c
  1781  000DBA  2A0E               	incf	(sprintf@sp+1)^0,f,c
  1782  000DBC  EF28  F007         	goto	l1996
  1783  000DC0                     l304:
  1784                           
  1785                           ;doprnt.c: 1422: else;doprnt.c: 1425: if(flag & 0x01)
  1786  000DC0  A02A               	btfss	sprintf@flag^0,0,c
  1787  000DC2  EFE5  F006         	goto	u1331
  1788  000DC6  EFE7  F006         	goto	u1330
  1789  000DCA                     u1331:
  1790  000DCA  EFEF  F006         	goto	l1980
  1791  000DCE                     u1330:
  1792  000DCE                     
  1793                           ;doprnt.c: 1426: ((*sp++ = (' ')));
  1794  000DCE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1795  000DD2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1796  000DD6  0E20               	movlw	32
  1797  000DD8  6EDF               	movwf	indf2,c
  1798  000DDA  EFDC  F006         	goto	l1974
  1799  000DDE                     l1980:
  1800                           
  1801                           ;doprnt.c: 1429: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  1802  000DDE  0EC0               	movlw	192
  1803  000DE0  6E13               	movwf	??_sprintf^0,c
  1804  000DE2  0E08               	movlw	8
  1805  000DE4  6E14               	movwf	(??_sprintf+1)^0,c
  1806  000DE6  C02A  F015         	movff	sprintf@flag,??_sprintf+2
  1807  000DEA  C02B  F016         	movff	sprintf@flag+1,??_sprintf+3
  1808  000DEE  5013               	movf	??_sprintf^0,w,c
  1809  000DF0  1615               	andwf	(??_sprintf+2)^0,f,c
  1810  000DF2  5014               	movf	(??_sprintf+1)^0,w,c
  1811  000DF4  1616               	andwf	(??_sprintf+3)^0,f,c
  1812  000DF6  0E80               	movlw	128
  1813  000DF8  1815               	xorwf	(??_sprintf+2)^0,w,c
  1814  000DFA  E107               	bnz	u1341
  1815  000DFC  0E08               	movlw	8
  1816  000DFE  1816               	xorwf	(??_sprintf+3)^0,w,c
  1817  000E00  A4D8               	btfss	status,2,c
  1818  000E02  EF05  F007         	goto	u1341
  1819  000E06  EF07  F007         	goto	u1340
  1820  000E0A                     u1341:
  1821  000E0A  EF28  F007         	goto	l1996
  1822  000E0E                     u1340:
  1823  000E0E                     
  1824                           ;doprnt.c: 1430: ((*sp++ = ('0')));
  1825  000E0E  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1826  000E12  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1827  000E16  0E30               	movlw	48
  1828  000E18  6EDF               	movwf	indf2,c
  1829  000E1A  4A0D               	infsnz	sprintf@sp^0,f,c
  1830  000E1C  2A0E               	incf	(sprintf@sp+1)^0,f,c
  1831  000E1E                     
  1832                           ;doprnt.c: 1432: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  1833  000E1E  BA2A               	btfsc	sprintf@flag^0,5,c
  1834  000E20  EF14  F007         	goto	u1351
  1835  000E24  EF16  F007         	goto	u1350
  1836  000E28                     u1351:
  1837  000E28  EF1C  F007         	goto	l1990
  1838  000E2C                     u1350:
  1839  000E2C  0E00               	movlw	0
  1840  000E2E  6E1A               	movwf	(_sprintf$683+1)^0,c
  1841  000E30  0E78               	movlw	120
  1842  000E32  6E19               	movwf	_sprintf$683^0,c
  1843  000E34  EF20  F007         	goto	l1992
  1844  000E38                     l1990:
  1845  000E38  0E00               	movlw	0
  1846  000E3A  6E1A               	movwf	(_sprintf$683+1)^0,c
  1847  000E3C  0E58               	movlw	88
  1848  000E3E  6E19               	movwf	_sprintf$683^0,c
  1849  000E40                     l1992:
  1850  000E40  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1851  000E44  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1852  000E48  C019  FFDF         	movff	_sprintf$683,indf2
  1853  000E4C  EFDC  F006         	goto	l1974
  1854  000E50                     l1996:
  1855                           
  1856                           ;doprnt.c: 1438: };doprnt.c: 1441: if(width)
  1857  000E50  5027               	movf	sprintf@width^0,w,c
  1858  000E52  1028               	iorwf	(sprintf@width+1)^0,w,c
  1859  000E54  B4D8               	btfsc	status,2,c
  1860  000E56  EF2F  F007         	goto	u1361
  1861  000E5A  EF31  F007         	goto	u1360
  1862  000E5E                     u1361:
  1863  000E5E  EF80  F008         	goto	l2068
  1864  000E62                     u1360:
  1865  000E62                     l1998:
  1866                           
  1867                           ;doprnt.c: 1443: ((*sp++ = ('0')));
  1868  000E62  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1869  000E66  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1870  000E6A  0E30               	movlw	48
  1871  000E6C  6EDF               	movwf	indf2,c
  1872  000E6E  4A0D               	infsnz	sprintf@sp^0,f,c
  1873  000E70  2A0E               	incf	(sprintf@sp+1)^0,f,c
  1874  000E72                     
  1875                           ;doprnt.c: 1444: while(--width);
  1876  000E72  0627               	decf	sprintf@width^0,f,c
  1877  000E74  A0D8               	btfss	status,0,c
  1878  000E76  0628               	decf	(sprintf@width+1)^0,f,c
  1879  000E78  5027               	movf	sprintf@width^0,w,c
  1880  000E7A  1028               	iorwf	(sprintf@width+1)^0,w,c
  1881  000E7C  A4D8               	btfss	status,2,c
  1882  000E7E  EF43  F007         	goto	u1371
  1883  000E82  EF45  F007         	goto	u1370
  1884  000E86                     u1371:
  1885  000E86  EF31  F007         	goto	l1998
  1886  000E8A                     u1370:
  1887  000E8A  EF80  F008         	goto	l2068
  1888  000E8E                     l2004:
  1889                           
  1890                           ;doprnt.c: 1448: {;doprnt.c: 1450: if(width;doprnt.c: 1452: && !(flag & 0x08);doprnt.c: 
      +                          1454: )
  1891  000E8E  5027               	movf	sprintf@width^0,w,c
  1892  000E90  1028               	iorwf	(sprintf@width+1)^0,w,c
  1893  000E92  B4D8               	btfsc	status,2,c
  1894  000E94  EF4E  F007         	goto	u1381
  1895  000E98  EF50  F007         	goto	u1380
  1896  000E9C                     u1381:
  1897  000E9C  EF6B  F007         	goto	l2014
  1898  000EA0                     u1380:
  1899  000EA0  B62A               	btfsc	sprintf@flag^0,3,c
  1900  000EA2  EF55  F007         	goto	u1391
  1901  000EA6  EF57  F007         	goto	u1390
  1902  000EAA                     u1391:
  1903  000EAA  EF6B  F007         	goto	l2014
  1904  000EAE                     u1390:
  1905  000EAE                     l2008:
  1906                           
  1907                           ;doprnt.c: 1456: ((*sp++ = (' ')));
  1908  000EAE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1909  000EB2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1910  000EB6  0E20               	movlw	32
  1911  000EB8  6EDF               	movwf	indf2,c
  1912  000EBA  4A0D               	infsnz	sprintf@sp^0,f,c
  1913  000EBC  2A0E               	incf	(sprintf@sp+1)^0,f,c
  1914  000EBE                     
  1915                           ;doprnt.c: 1457: while(--width);
  1916  000EBE  0627               	decf	sprintf@width^0,f,c
  1917  000EC0  A0D8               	btfss	status,0,c
  1918  000EC2  0628               	decf	(sprintf@width+1)^0,f,c
  1919  000EC4  5027               	movf	sprintf@width^0,w,c
  1920  000EC6  1028               	iorwf	(sprintf@width+1)^0,w,c
  1921  000EC8  A4D8               	btfss	status,2,c
  1922  000ECA  EF69  F007         	goto	u1401
  1923  000ECE  EF6B  F007         	goto	u1400
  1924  000ED2                     u1401:
  1925  000ED2  EF57  F007         	goto	l2008
  1926  000ED6                     u1400:
  1927  000ED6                     l2014:
  1928                           
  1929                           ;doprnt.c: 1464: if(flag & 0x03)
  1930  000ED6  0E03               	movlw	3
  1931  000ED8  142A               	andwf	sprintf@flag^0,w,c
  1932  000EDA  6E13               	movwf	??_sprintf^0,c
  1933  000EDC  0E00               	movlw	0
  1934  000EDE  142B               	andwf	(sprintf@flag+1)^0,w,c
  1935  000EE0  6E14               	movwf	(??_sprintf+1)^0,c
  1936  000EE2  5013               	movf	??_sprintf^0,w,c
  1937  000EE4  1014               	iorwf	(??_sprintf+1)^0,w,c
  1938  000EE6  B4D8               	btfsc	status,2,c
  1939  000EE8  EF78  F007         	goto	u1411
  1940  000EEC  EF7A  F007         	goto	u1410
  1941  000EF0                     u1411:
  1942  000EF0  EF84  F007         	goto	l320
  1943  000EF4                     u1410:
  1944  000EF4                     
  1945                           ;doprnt.c: 1465: ((*sp++ = ('-')));
  1946  000EF4  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1947  000EF8  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1948  000EFC  0E2D               	movlw	45
  1949  000EFE  6EDF               	movwf	indf2,c
  1950  000F00                     l2018:
  1951  000F00  4A0D               	infsnz	sprintf@sp^0,f,c
  1952  000F02  2A0E               	incf	(sprintf@sp+1)^0,f,c
  1953  000F04  EF93  F007         	goto	l2024
  1954  000F08                     l320:
  1955                           
  1956                           ;doprnt.c: 1469: else if(flag & 0x01)
  1957  000F08  A02A               	btfss	sprintf@flag^0,0,c
  1958  000F0A  EF89  F007         	goto	u1421
  1959  000F0E  EF8B  F007         	goto	u1420
  1960  000F12                     u1421:
  1961  000F12  EF93  F007         	goto	l2024
  1962  000F16                     u1420:
  1963  000F16                     
  1964                           ;doprnt.c: 1470: ((*sp++ = (' ')));
  1965  000F16  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1966  000F1A  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1967  000F1E  0E20               	movlw	32
  1968  000F20  6EDF               	movwf	indf2,c
  1969  000F22  EF80  F007         	goto	l2018
  1970  000F26                     l2024:
  1971                           
  1972                           ;doprnt.c: 1474: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  1973  000F26  0EC0               	movlw	192
  1974  000F28  6E13               	movwf	??_sprintf^0,c
  1975  000F2A  0E08               	movlw	8
  1976  000F2C  6E14               	movwf	(??_sprintf+1)^0,c
  1977  000F2E  C02A  F015         	movff	sprintf@flag,??_sprintf+2
  1978  000F32  C02B  F016         	movff	sprintf@flag+1,??_sprintf+3
  1979  000F36  5013               	movf	??_sprintf^0,w,c
  1980  000F38  1615               	andwf	(??_sprintf+2)^0,f,c
  1981  000F3A  5014               	movf	(??_sprintf+1)^0,w,c
  1982  000F3C  1616               	andwf	(??_sprintf+3)^0,f,c
  1983  000F3E  0E40               	movlw	64
  1984  000F40  1815               	xorwf	(??_sprintf+2)^0,w,c
  1985  000F42  E107               	bnz	u1431
  1986  000F44  0E08               	movlw	8
  1987  000F46  1816               	xorwf	(??_sprintf+3)^0,w,c
  1988  000F48  A4D8               	btfss	status,2,c
  1989  000F4A  EFA9  F007         	goto	u1431
  1990  000F4E  EFAB  F007         	goto	u1430
  1991  000F52                     u1431:
  1992  000F52  EFB5  F007         	goto	l2030
  1993  000F56                     u1430:
  1994  000F56                     
  1995                           ;doprnt.c: 1475: ((*sp++ = ('0')));
  1996  000F56  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1997  000F5A  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1998  000F5E  0E30               	movlw	48
  1999  000F60  6EDF               	movwf	indf2,c
  2000  000F62                     l2028:
  2001  000F62  4A0D               	infsnz	sprintf@sp^0,f,c
  2002  000F64  2A0E               	incf	(sprintf@sp+1)^0,f,c
  2003  000F66  EF80  F008         	goto	l2068
  2004  000F6A                     l2030:
  2005                           
  2006                           ;doprnt.c: 1476: else;doprnt.c: 1480: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  2007  000F6A  0EC0               	movlw	192
  2008  000F6C  6E13               	movwf	??_sprintf^0,c
  2009  000F6E  0E08               	movlw	8
  2010  000F70  6E14               	movwf	(??_sprintf+1)^0,c
  2011  000F72  C02A  F015         	movff	sprintf@flag,??_sprintf+2
  2012  000F76  C02B  F016         	movff	sprintf@flag+1,??_sprintf+3
  2013  000F7A  5013               	movf	??_sprintf^0,w,c
  2014  000F7C  1615               	andwf	(??_sprintf+2)^0,f,c
  2015  000F7E  5014               	movf	(??_sprintf+1)^0,w,c
  2016  000F80  1616               	andwf	(??_sprintf+3)^0,f,c
  2017  000F82  0E80               	movlw	128
  2018  000F84  1815               	xorwf	(??_sprintf+2)^0,w,c
  2019  000F86  E107               	bnz	u1441
  2020  000F88  0E08               	movlw	8
  2021  000F8A  1816               	xorwf	(??_sprintf+3)^0,w,c
  2022  000F8C  A4D8               	btfss	status,2,c
  2023  000F8E  EFCB  F007         	goto	u1441
  2024  000F92  EFCD  F007         	goto	u1440
  2025  000F96                     u1441:
  2026  000F96  EFEE  F007         	goto	l316
  2027  000F9A                     u1440:
  2028  000F9A                     
  2029                           ;doprnt.c: 1484: ((*sp++ = ('0')));
  2030  000F9A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2031  000F9E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2032  000FA2  0E30               	movlw	48
  2033  000FA4  6EDF               	movwf	indf2,c
  2034  000FA6  4A0D               	infsnz	sprintf@sp^0,f,c
  2035  000FA8  2A0E               	incf	(sprintf@sp+1)^0,f,c
  2036  000FAA                     
  2037                           ;doprnt.c: 1486: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  2038  000FAA  BA2A               	btfsc	sprintf@flag^0,5,c
  2039  000FAC  EFDA  F007         	goto	u1451
  2040  000FB0  EFDC  F007         	goto	u1450
  2041  000FB4                     u1451:
  2042  000FB4  EFE2  F007         	goto	l2040
  2043  000FB8                     u1450:
  2044  000FB8  0E00               	movlw	0
  2045  000FBA  6E1C               	movwf	(_sprintf$684+1)^0,c
  2046  000FBC  0E78               	movlw	120
  2047  000FBE  6E1B               	movwf	_sprintf$684^0,c
  2048  000FC0  EFE6  F007         	goto	l2042
  2049  000FC4                     l2040:
  2050  000FC4  0E00               	movlw	0
  2051  000FC6  6E1C               	movwf	(_sprintf$684+1)^0,c
  2052  000FC8  0E58               	movlw	88
  2053  000FCA  6E1B               	movwf	_sprintf$684^0,c
  2054  000FCC                     l2042:
  2055  000FCC  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2056  000FD0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2057  000FD4  C01B  FFDF         	movff	_sprintf$684,indf2
  2058  000FD8  EFB1  F007         	goto	l2028
  2059  000FDC                     l316:
  2060                           
  2061                           ;doprnt.c: 1492: };doprnt.c: 1495: };doprnt.c: 1500: while(prec--) {
  2062  000FDC  EF80  F008         	goto	l2068
  2063  000FE0                     l2046:
  2064                           
  2065                           ;doprnt.c: 1512: case 0xC0:;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 1
      +                          0 + '0';
  2066  000FE0  5026               	movf	sprintf@prec^0,w,c
  2067  000FE2  0D02               	mullw	2
  2068  000FE4  0E0D               	movlw	low _dpowers
  2069  000FE6  24F3               	addwf	243,w,c
  2070  000FE8  6EF6               	movwf	tblptrl,c
  2071  000FEA  0E06               	movlw	high _dpowers
  2072  000FEC  20F4               	addwfc	244,w,c
  2073  000FEE  6EF7               	movwf	tblptrh,c
  2074  000FF0                     	if	0	;There are less than 3 active tblptr bytes
  2075  000FF0                     	endif
  2076  000FF0  0009               	tblrd		*+
  2077  000FF2  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2078  000FF6  000A               	tblrd		*-
  2079  000FF8  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2080  000FFC  C024  F001         	movff	sprintf@val,___lwdiv@dividend
  2081  001000  C025  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  2082  001004  EC50  F009         	call	___lwdiv	;wreg free
  2083  001008  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2084  00100C  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2085  001010  0E00               	movlw	0
  2086  001012  6E0B               	movwf	(___lwmod@divisor+1)^0,c
  2087  001014  0E0A               	movlw	10
  2088  001016  6E0A               	movwf	___lwmod@divisor^0,c
  2089  001018  EC8A  F009         	call	___lwmod	;wreg free
  2090  00101C  5008               	movf	?___lwmod^0,w,c
  2091  00101E  0F30               	addlw	48
  2092  001020  6E29               	movwf	sprintf@c^0,c
  2093                           
  2094                           ;doprnt.c: 1517: break;
  2095  001022  EF78  F008         	goto	l2064
  2096  001026                     l2048:
  2097                           
  2098                           ;doprnt.c: 1525: {;doprnt.c: 1526: unsigned char idx = (val / hexpowers[(unsigned char)p
      +                          rec]) & 0xF;
  2099  001026  C024  F001         	movff	sprintf@val,___lwdiv@dividend
  2100  00102A  C025  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  2101  00102E  5026               	movf	sprintf@prec^0,w,c
  2102  001030  0D02               	mullw	2
  2103  001032  0E17               	movlw	low _hexpowers
  2104  001034  24F3               	addwf	243,w,c
  2105  001036  6EF6               	movwf	tblptrl,c
  2106  001038  0E06               	movlw	high _hexpowers
  2107  00103A  20F4               	addwfc	244,w,c
  2108  00103C  6EF7               	movwf	tblptrh,c
  2109  00103E                     	if	0	;There are less than 3 active tblptr bytes
  2110  00103E                     	endif
  2111  00103E  0009               	tblrd		*+
  2112  001040  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2113  001044  000A               	tblrd		*-
  2114  001046  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2115  00104A  EC50  F009         	call	___lwdiv	;wreg free
  2116  00104E  5001               	movf	?___lwdiv^0,w,c
  2117  001050  0B0F               	andlw	15
  2118  001052  6E1F               	movwf	sprintf@idx^0,c
  2119  001054                     
  2120                           ;doprnt.c: 1528: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  2121  001054  BA2A               	btfsc	sprintf@flag^0,5,c
  2122  001056  EF2F  F008         	goto	u1461
  2123  00105A  EF31  F008         	goto	u1460
  2124  00105E                     u1461:
  2125  00105E  EF37  F008         	goto	l2054
  2126  001062                     u1460:
  2127  001062  0E30               	movlw	low STR_5
  2128  001064  6E1D               	movwf	_sprintf$690^0,c
  2129  001066  0E06               	movlw	high STR_5
  2130  001068  6E1E               	movwf	(_sprintf$690+1)^0,c
  2131  00106A  EF3B  F008         	goto	l2056
  2132  00106E                     l2054:
  2133  00106E  0E1F               	movlw	low STR_4
  2134  001070  6E1D               	movwf	_sprintf$690^0,c
  2135  001072  0E06               	movlw	high STR_4
  2136  001074  6E1E               	movwf	(_sprintf$690+1)^0,c
  2137  001076                     l2056:
  2138  001076  501F               	movf	sprintf@idx^0,w,c
  2139  001078  241D               	addwf	_sprintf$690^0,w,c
  2140  00107A  6E13               	movwf	??_sprintf^0,c
  2141  00107C  0E00               	movlw	0
  2142  00107E  201E               	addwfc	(_sprintf$690+1)^0,w,c
  2143  001080  6E14               	movwf	(??_sprintf+1)^0,c
  2144  001082  C013  FFF6         	movff	??_sprintf,tblptrl
  2145  001086  C014  FFF7         	movff	??_sprintf+1,tblptrh
  2146  00108A                     	if	0	;tblptru may be non-zero
  2147  00108A                     	endif
  2148  00108A                     	if	0	;tblptru may be non-zero
  2149  00108A                     	endif
  2150  00108A  0008               	tblrd		*
  2151  00108C  CFF5 F029          	movff	tablat,sprintf@c
  2152                           
  2153                           ;doprnt.c: 1534: };doprnt.c: 1536: break;
  2154  001090  EF78  F008         	goto	l2064
  2155  001094                     l2058:
  2156                           
  2157                           ;doprnt.c: 1544: c = ((val / octpowers[(unsigned char)prec]) & 07) + '0';
  2158  001094  C024  F001         	movff	sprintf@val,___lwdiv@dividend
  2159  001098  C025  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  2160  00109C  5026               	movf	sprintf@prec^0,w,c
  2161  00109E  0D02               	mullw	2
  2162  0010A0  0E01               	movlw	low _octpowers
  2163  0010A2  24F3               	addwf	243,w,c
  2164  0010A4  6EF6               	movwf	tblptrl,c
  2165  0010A6  0E06               	movlw	high _octpowers
  2166  0010A8  20F4               	addwfc	244,w,c
  2167  0010AA  6EF7               	movwf	tblptrh,c
  2168  0010AC                     	if	0	;There are less than 3 active tblptr bytes
  2169  0010AC                     	endif
  2170  0010AC  0009               	tblrd		*+
  2171  0010AE  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2172  0010B2  000A               	tblrd		*-
  2173  0010B4  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2174  0010B8  EC50  F009         	call	___lwdiv	;wreg free
  2175  0010BC  5001               	movf	?___lwdiv^0,w,c
  2176  0010BE  0B07               	andlw	7
  2177  0010C0  0F30               	addlw	48
  2178  0010C2  6E29               	movwf	sprintf@c^0,c
  2179                           
  2180                           ;doprnt.c: 1546: break;
  2181  0010C4  EF78  F008         	goto	l2064
  2182  0010C8                     l2062:
  2183  0010C8  502A               	movf	sprintf@flag^0,w,c
  2184  0010CA  0BC0               	andlw	192
  2185                           
  2186                           ; Switch size 1, requested type "simple"
  2187                           ; Number of cases is 4, Range of values is 0 to 192
  2188                           ; switch strategies available:
  2189                           ; Name         Instructions Cycles
  2190                           ; simple_byte           13     7 (average)
  2191                           ;	Chosen strategy is simple_byte
  2192  0010CC  0A00               	xorlw	0	; case 0
  2193  0010CE  B4D8               	btfsc	status,2,c
  2194  0010D0  EFF0  F007         	goto	l2046
  2195  0010D4  0A40               	xorlw	64	; case 64
  2196  0010D6  B4D8               	btfsc	status,2,c
  2197  0010D8  EF4A  F008         	goto	l2058
  2198  0010DC  0AC0               	xorlw	192	; case 128
  2199  0010DE  B4D8               	btfsc	status,2,c
  2200  0010E0  EF13  F008         	goto	l2048
  2201  0010E4  0A40               	xorlw	64	; case 192
  2202  0010E6  B4D8               	btfsc	status,2,c
  2203  0010E8  EFF0  F007         	goto	l2046
  2204  0010EC  EF78  F008         	goto	l2064
  2205  0010F0                     l2064:
  2206                           
  2207                           ;doprnt.c: 1550: ((*sp++ = (c)));
  2208  0010F0  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2209  0010F4  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2210  0010F8  C029  FFDF         	movff	sprintf@c,indf2
  2211  0010FC  EFB1  F007         	goto	l2028
  2212  001100                     l2068:
  2213  001100  0626               	decf	sprintf@prec^0,f,c
  2214  001102  2826               	incf	sprintf@prec^0,w,c
  2215  001104  A4D8               	btfss	status,2,c
  2216  001106  EF87  F008         	goto	u1471
  2217  00110A  EF89  F008         	goto	u1470
  2218  00110E                     u1471:
  2219  00110E  EF64  F008         	goto	l2062
  2220  001112                     u1470:
  2221  001112                     
  2222                           ;doprnt.c: 1551: };doprnt.c: 1554: if((flag & 0x08) && width > 0)
  2223  001112  A62A               	btfss	sprintf@flag^0,3,c
  2224  001114  EF8E  F008         	goto	u1481
  2225  001118  EF90  F008         	goto	u1480
  2226  00111C                     u1481:
  2227  00111C  EFB1  F008         	goto	l2078
  2228  001120                     u1480:
  2229  001120  BE28               	btfsc	(sprintf@width+1)^0,7,c
  2230  001122  EF9B  F008         	goto	u1491
  2231  001126  5028               	movf	(sprintf@width+1)^0,w,c
  2232  001128  E108               	bnz	u1490
  2233  00112A  0427               	decf	sprintf@width^0,w,c
  2234  00112C  A0D8               	btfss	status,0,c
  2235  00112E  EF9B  F008         	goto	u1491
  2236  001132  EF9D  F008         	goto	u1490
  2237  001136                     u1491:
  2238  001136  EFB1  F008         	goto	l2078
  2239  00113A                     u1490:
  2240  00113A                     l2072:
  2241                           
  2242                           ;doprnt.c: 1556: ((*sp++ = (' ')));
  2243  00113A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2244  00113E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2245  001142  0E20               	movlw	32
  2246  001144  6EDF               	movwf	indf2,c
  2247  001146  4A0D               	infsnz	sprintf@sp^0,f,c
  2248  001148  2A0E               	incf	(sprintf@sp+1)^0,f,c
  2249  00114A                     
  2250                           ;doprnt.c: 1557: while(--width);
  2251  00114A  0627               	decf	sprintf@width^0,f,c
  2252  00114C  A0D8               	btfss	status,0,c
  2253  00114E  0628               	decf	(sprintf@width+1)^0,f,c
  2254  001150  5027               	movf	sprintf@width^0,w,c
  2255  001152  1028               	iorwf	(sprintf@width+1)^0,w,c
  2256  001154  A4D8               	btfss	status,2,c
  2257  001156  EFAF  F008         	goto	u1501
  2258  00115A  EFB1  F008         	goto	u1500
  2259  00115E                     u1501:
  2260  00115E  EF9D  F008         	goto	l2072
  2261  001162                     u1500:
  2262  001162                     l2078:
  2263  001162  C00F  FFF6         	movff	sprintf@f,tblptrl
  2264  001166  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2265  00116A  4A0F               	infsnz	sprintf@f^0,f,c
  2266  00116C  2A10               	incf	(sprintf@f+1)^0,f,c
  2267  00116E                     	if	0	;tblptru may be non-zero
  2268  00116E                     	endif
  2269  00116E                     	if	0	;tblptru may be non-zero
  2270  00116E                     	endif
  2271  00116E  0008               	tblrd		*
  2272  001170  CFF5 F029          	movff	tablat,sprintf@c
  2273  001174  5029               	movf	sprintf@c^0,w,c
  2274  001176  A4D8               	btfss	status,2,c
  2275  001178  EFC0  F008         	goto	u1511
  2276  00117C  EFC2  F008         	goto	u1510
  2277  001180                     u1511:
  2278  001180  EF35  F003         	goto	l1730
  2279  001184                     u1510:
  2280  001184                     l2080:
  2281                           
  2282                           ;doprnt.c: 1564: *sp = 0;
  2283  001184  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2284  001188  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2285  00118C  0E00               	movlw	0
  2286  00118E  6EDF               	movwf	indf2,c
  2287  001190  0012               	return		;funcret
  2288  001192                     __end_of_sprintf:
  2289                           	callstack 0
  2290                           
  2291 ;; *************** function _isdigit *****************
  2292 ;; Defined at:
  2293 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\isdigit.c"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;  c               1    wreg     unsigned char 
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;  c               1    2[COMRAM] unsigned char 
  2298 ;; Return value:  Size  Location     Type
  2299 ;;		None               void
  2300 ;; Registers used:
  2301 ;;		wreg, status,2, status,0
  2302 ;; Tracked objects:
  2303 ;;		On entry : 0/0
  2304 ;;		On exit  : 0/0
  2305 ;;		Unchanged: 0/0
  2306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2307 ;;      Params:         0       0       0       0       0       0       0
  2308 ;;      Locals:         2       0       0       0       0       0       0
  2309 ;;      Temps:          1       0       0       0       0       0       0
  2310 ;;      Totals:         3       0       0       0       0       0       0
  2311 ;;Total ram usage:        3 bytes
  2312 ;; Hardware stack levels used:    1
  2313 ;; This function calls:
  2314 ;;		Nothing
  2315 ;; This function is called by:
  2316 ;;		_sprintf
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320                           	psect	text2
  2321  0013DA                     __ptext2:
  2322                           	callstack 0
  2323  0013DA                     _isdigit:
  2324                           	callstack 29
  2325                           
  2326                           ;incstack = 0
  2327                           ;isdigit@c stored from wreg
  2328  0013DA  6E03               	movwf	isdigit@c^0,c
  2329  0013DC  0E00               	movlw	0
  2330  0013DE  6E02               	movwf	_isdigit$1130^0,c
  2331  0013E0  0E3A               	movlw	58
  2332  0013E2  6003               	cpfslt	isdigit@c^0,c
  2333  0013E4  EFF6  F009         	goto	u821
  2334  0013E8  EFF8  F009         	goto	u820
  2335  0013EC                     u821:
  2336  0013EC  EF02  F00A         	goto	l1658
  2337  0013F0                     u820:
  2338  0013F0  0E2F               	movlw	47
  2339  0013F2  6403               	cpfsgt	isdigit@c^0,c
  2340  0013F4  EFFE  F009         	goto	u831
  2341  0013F8  EF00  F00A         	goto	u830
  2342  0013FC                     u831:
  2343  0013FC  EF02  F00A         	goto	l1658
  2344  001400                     u830:
  2345  001400  0E01               	movlw	1
  2346  001402  6E02               	movwf	_isdigit$1130^0,c
  2347  001404                     l1658:
  2348  001404  C002  F001         	movff	_isdigit$1130,??_isdigit
  2349  001408  3001               	rrcf	??_isdigit^0,w,c
  2350  00140A  0012               	return		;funcret
  2351  00140C                     __end_of_isdigit:
  2352                           	callstack 0
  2353                           
  2354 ;; *************** function ___wmul *****************
  2355 ;; Defined at:
  2356 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul16.c"
  2357 ;; Parameters:    Size  Location     Type
  2358 ;;  multiplier      2    0[COMRAM] unsigned int 
  2359 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2360 ;; Auto vars:     Size  Location     Type
  2361 ;;  product         2    4[COMRAM] unsigned int 
  2362 ;; Return value:  Size  Location     Type
  2363 ;;                  2    0[COMRAM] unsigned int 
  2364 ;; Registers used:
  2365 ;;		wreg, status,2, status,0, prodl, prodh
  2366 ;; Tracked objects:
  2367 ;;		On entry : 0/0
  2368 ;;		On exit  : 0/0
  2369 ;;		Unchanged: 0/0
  2370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2371 ;;      Params:         4       0       0       0       0       0       0
  2372 ;;      Locals:         2       0       0       0       0       0       0
  2373 ;;      Temps:          0       0       0       0       0       0       0
  2374 ;;      Totals:         6       0       0       0       0       0       0
  2375 ;;Total ram usage:        6 bytes
  2376 ;; Hardware stack levels used:    1
  2377 ;; This function calls:
  2378 ;;		Nothing
  2379 ;; This function is called by:
  2380 ;;		_sprintf
  2381 ;; This function uses a non-reentrant model
  2382 ;;
  2383                           
  2384                           	psect	text3
  2385  00143C                     __ptext3:
  2386                           	callstack 0
  2387  00143C                     ___wmul:
  2388                           	callstack 29
  2389  00143C  5001               	movf	___wmul@multiplier^0,w,c
  2390  00143E  0203               	mulwf	___wmul@multiplicand^0,c
  2391  001440  CFF3 F005          	movff	prodl,___wmul@product
  2392  001444  CFF4 F006          	movff	prodh,___wmul@product+1
  2393  001448  5001               	movf	___wmul@multiplier^0,w,c
  2394  00144A  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2395  00144C  50F3               	movf	243,w,c
  2396  00144E  2606               	addwf	(___wmul@product+1)^0,f,c
  2397  001450  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2398  001452  0203               	mulwf	___wmul@multiplicand^0,c
  2399  001454  50F3               	movf	243,w,c
  2400  001456  2606               	addwf	(___wmul@product+1)^0,f,c
  2401  001458  C005  F001         	movff	___wmul@product,?___wmul
  2402  00145C  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2403  001460  0012               	return		;funcret
  2404  001462                     __end_of___wmul:
  2405                           	callstack 0
  2406                           
  2407 ;; *************** function ___lwmod *****************
  2408 ;; Defined at:
  2409 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  2410 ;; Parameters:    Size  Location     Type
  2411 ;;  dividend        2    7[COMRAM] unsigned int 
  2412 ;;  divisor         2    9[COMRAM] unsigned int 
  2413 ;; Auto vars:     Size  Location     Type
  2414 ;;  counter         1   11[COMRAM] unsigned char 
  2415 ;; Return value:  Size  Location     Type
  2416 ;;                  2    7[COMRAM] unsigned int 
  2417 ;; Registers used:
  2418 ;;		wreg, status,2, status,0
  2419 ;; Tracked objects:
  2420 ;;		On entry : 0/0
  2421 ;;		On exit  : 0/0
  2422 ;;		Unchanged: 0/0
  2423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2424 ;;      Params:         4       0       0       0       0       0       0
  2425 ;;      Locals:         1       0       0       0       0       0       0
  2426 ;;      Temps:          0       0       0       0       0       0       0
  2427 ;;      Totals:         5       0       0       0       0       0       0
  2428 ;;Total ram usage:        5 bytes
  2429 ;; Hardware stack levels used:    1
  2430 ;; This function calls:
  2431 ;;		Nothing
  2432 ;; This function is called by:
  2433 ;;		_sprintf
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437                           	psect	text4
  2438  001314                     __ptext4:
  2439                           	callstack 0
  2440  001314                     ___lwmod:
  2441                           	callstack 29
  2442  001314  500A               	movf	___lwmod@divisor^0,w,c
  2443  001316  100B               	iorwf	(___lwmod@divisor+1)^0,w,c
  2444  001318  B4D8               	btfsc	status,2,c
  2445  00131A  EF91  F009         	goto	u871
  2446  00131E  EF93  F009         	goto	u870
  2447  001322                     u871:
  2448  001322  EFB7  F009         	goto	l839
  2449  001326                     u870:
  2450  001326  0E01               	movlw	1
  2451  001328  6E0C               	movwf	___lwmod@counter^0,c
  2452  00132A  EF9B  F009         	goto	l1696
  2453  00132E                     l1694:
  2454  00132E  90D8               	bcf	status,0,c
  2455  001330  360A               	rlcf	___lwmod@divisor^0,f,c
  2456  001332  360B               	rlcf	(___lwmod@divisor+1)^0,f,c
  2457  001334  2A0C               	incf	___lwmod@counter^0,f,c
  2458  001336                     l1696:
  2459  001336  AE0B               	btfss	(___lwmod@divisor+1)^0,7,c
  2460  001338  EFA0  F009         	goto	u881
  2461  00133C  EFA2  F009         	goto	u880
  2462  001340                     u881:
  2463  001340  EF97  F009         	goto	l1694
  2464  001344                     u880:
  2465  001344                     l1698:
  2466  001344  500A               	movf	___lwmod@divisor^0,w,c
  2467  001346  5C08               	subwf	___lwmod@dividend^0,w,c
  2468  001348  500B               	movf	(___lwmod@divisor+1)^0,w,c
  2469  00134A  5809               	subwfb	(___lwmod@dividend+1)^0,w,c
  2470  00134C  A0D8               	btfss	status,0,c
  2471  00134E  EFAB  F009         	goto	u891
  2472  001352  EFAD  F009         	goto	u890
  2473  001356                     u891:
  2474  001356  EFB1  F009         	goto	l1702
  2475  00135A                     u890:
  2476  00135A  500A               	movf	___lwmod@divisor^0,w,c
  2477  00135C  5E08               	subwf	___lwmod@dividend^0,f,c
  2478  00135E  500B               	movf	(___lwmod@divisor+1)^0,w,c
  2479  001360  5A09               	subwfb	(___lwmod@dividend+1)^0,f,c
  2480  001362                     l1702:
  2481  001362  90D8               	bcf	status,0,c
  2482  001364  320B               	rrcf	(___lwmod@divisor+1)^0,f,c
  2483  001366  320A               	rrcf	___lwmod@divisor^0,f,c
  2484  001368  2E0C               	decfsz	___lwmod@counter^0,f,c
  2485  00136A  EFA2  F009         	goto	l1698
  2486  00136E                     l839:
  2487  00136E  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2488  001372  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2489  001376  0012               	return		;funcret
  2490  001378                     __end_of___lwmod:
  2491                           	callstack 0
  2492                           
  2493 ;; *************** function ___lwdiv *****************
  2494 ;; Defined at:
  2495 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;  dividend        2    0[COMRAM] unsigned int 
  2498 ;;  divisor         2    2[COMRAM] unsigned int 
  2499 ;; Auto vars:     Size  Location     Type
  2500 ;;  quotient        2    4[COMRAM] unsigned int 
  2501 ;;  counter         1    6[COMRAM] unsigned char 
  2502 ;; Return value:  Size  Location     Type
  2503 ;;                  2    0[COMRAM] unsigned int 
  2504 ;; Registers used:
  2505 ;;		wreg, status,2, status,0
  2506 ;; Tracked objects:
  2507 ;;		On entry : 0/0
  2508 ;;		On exit  : 0/0
  2509 ;;		Unchanged: 0/0
  2510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2511 ;;      Params:         4       0       0       0       0       0       0
  2512 ;;      Locals:         3       0       0       0       0       0       0
  2513 ;;      Temps:          0       0       0       0       0       0       0
  2514 ;;      Totals:         7       0       0       0       0       0       0
  2515 ;;Total ram usage:        7 bytes
  2516 ;; Hardware stack levels used:    1
  2517 ;; This function calls:
  2518 ;;		Nothing
  2519 ;; This function is called by:
  2520 ;;		_sprintf
  2521 ;; This function uses a non-reentrant model
  2522 ;;
  2523                           
  2524                           	psect	text5
  2525  0012A0                     __ptext5:
  2526                           	callstack 0
  2527  0012A0                     ___lwdiv:
  2528                           	callstack 29
  2529  0012A0  0E00               	movlw	0
  2530  0012A2  6E06               	movwf	(___lwdiv@quotient+1)^0,c
  2531  0012A4  0E00               	movlw	0
  2532  0012A6  6E05               	movwf	___lwdiv@quotient^0,c
  2533  0012A8  5003               	movf	___lwdiv@divisor^0,w,c
  2534  0012AA  1004               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2535  0012AC  B4D8               	btfsc	status,2,c
  2536  0012AE  EF5B  F009         	goto	u841
  2537  0012B2  EF5D  F009         	goto	u840
  2538  0012B6                     u841:
  2539  0012B6  EF85  F009         	goto	l829
  2540  0012BA                     u840:
  2541  0012BA  0E01               	movlw	1
  2542  0012BC  6E07               	movwf	___lwdiv@counter^0,c
  2543  0012BE  EF65  F009         	goto	l1676
  2544  0012C2                     l1674:
  2545  0012C2  90D8               	bcf	status,0,c
  2546  0012C4  3603               	rlcf	___lwdiv@divisor^0,f,c
  2547  0012C6  3604               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2548  0012C8  2A07               	incf	___lwdiv@counter^0,f,c
  2549  0012CA                     l1676:
  2550  0012CA  AE04               	btfss	(___lwdiv@divisor+1)^0,7,c
  2551  0012CC  EF6A  F009         	goto	u851
  2552  0012D0  EF6C  F009         	goto	u850
  2553  0012D4                     u851:
  2554  0012D4  EF61  F009         	goto	l1674
  2555  0012D8                     u850:
  2556  0012D8                     l1678:
  2557  0012D8  90D8               	bcf	status,0,c
  2558  0012DA  3605               	rlcf	___lwdiv@quotient^0,f,c
  2559  0012DC  3606               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2560  0012DE  5003               	movf	___lwdiv@divisor^0,w,c
  2561  0012E0  5C01               	subwf	___lwdiv@dividend^0,w,c
  2562  0012E2  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  2563  0012E4  5802               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2564  0012E6  A0D8               	btfss	status,0,c
  2565  0012E8  EF78  F009         	goto	u861
  2566  0012EC  EF7A  F009         	goto	u860
  2567  0012F0                     u861:
  2568  0012F0  EF7F  F009         	goto	l1686
  2569  0012F4                     u860:
  2570  0012F4  5003               	movf	___lwdiv@divisor^0,w,c
  2571  0012F6  5E01               	subwf	___lwdiv@dividend^0,f,c
  2572  0012F8  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  2573  0012FA  5A02               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2574  0012FC  8005               	bsf	___lwdiv@quotient^0,0,c
  2575  0012FE                     l1686:
  2576  0012FE  90D8               	bcf	status,0,c
  2577  001300  3204               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2578  001302  3203               	rrcf	___lwdiv@divisor^0,f,c
  2579  001304  2E07               	decfsz	___lwdiv@counter^0,f,c
  2580  001306  EF6C  F009         	goto	l1678
  2581  00130A                     l829:
  2582  00130A  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2583  00130E  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2584  001312  0012               	return		;funcret
  2585  001314                     __end_of___lwdiv:
  2586                           	callstack 0
  2587                           
  2588 ;; *************** function _UART_send_string *****************
  2589 ;; Defined at:
  2590 ;;		line 54 in file "hw_uart.c"
  2591 ;; Parameters:    Size  Location     Type
  2592 ;;  st_pt           2    1[COMRAM] PTR unsigned char 
  2593 ;;		 -> main@_adc_str(20), 
  2594 ;; Auto vars:     Size  Location     Type
  2595 ;;		None
  2596 ;; Return value:  Size  Location     Type
  2597 ;;                  1    wreg      void 
  2598 ;; Registers used:
  2599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2600 ;; Tracked objects:
  2601 ;;		On entry : 0/0
  2602 ;;		On exit  : 0/0
  2603 ;;		Unchanged: 0/0
  2604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2605 ;;      Params:         2       0       0       0       0       0       0
  2606 ;;      Locals:         0       0       0       0       0       0       0
  2607 ;;      Temps:          0       0       0       0       0       0       0
  2608 ;;      Totals:         2       0       0       0       0       0       0
  2609 ;;Total ram usage:        2 bytes
  2610 ;; Hardware stack levels used:    1
  2611 ;; Hardware stack levels required when called:    1
  2612 ;; This function calls:
  2613 ;;		_UART_send_char
  2614 ;; This function is called by:
  2615 ;;		_main
  2616 ;; This function uses a non-reentrant model
  2617 ;;
  2618                           
  2619                           	psect	text6
  2620  00140C                     __ptext6:
  2621                           	callstack 0
  2622  00140C                     _UART_send_string:
  2623                           	callstack 29
  2624  00140C                     
  2625                           ;hw_uart.c: 56: while(*st_pt)
  2626  00140C  EF11  F00A         	goto	l2090
  2627  001410                     l2086:
  2628                           
  2629                           ;hw_uart.c: 57: UART_send_char(*st_pt++);
  2630  001410  C002  FFD9         	movff	UART_send_string@st_pt,fsr2l
  2631  001414  C003  FFDA         	movff	UART_send_string@st_pt+1,fsr2h
  2632  001418  50DF               	movf	indf2,w,c
  2633  00141A  EC4D  F00A         	call	_UART_send_char
  2634  00141E  4A02               	infsnz	UART_send_string@st_pt^0,f,c
  2635  001420  2A03               	incf	(UART_send_string@st_pt+1)^0,f,c
  2636  001422                     l2090:
  2637  001422  C002  FFD9         	movff	UART_send_string@st_pt,fsr2l
  2638  001426  C003  FFDA         	movff	UART_send_string@st_pt+1,fsr2h
  2639  00142A  50DF               	movf	indf2,w,c
  2640  00142C  A4D8               	btfss	status,2,c
  2641  00142E  EF1B  F00A         	goto	u1521
  2642  001432  EF1D  F00A         	goto	u1520
  2643  001436                     u1521:
  2644  001436  EF08  F00A         	goto	l2086
  2645  00143A                     u1520:
  2646  00143A  0012               	return		;funcret
  2647  00143C                     __end_of_UART_send_string:
  2648                           	callstack 0
  2649                           
  2650 ;; *************** function _UART_send_char *****************
  2651 ;; Defined at:
  2652 ;;		line 27 in file "hw_uart.c"
  2653 ;; Parameters:    Size  Location     Type
  2654 ;;  bt              1    wreg     unsigned char 
  2655 ;; Auto vars:     Size  Location     Type
  2656 ;;  bt              1    0[COMRAM] unsigned char 
  2657 ;; Return value:  Size  Location     Type
  2658 ;;                  1    wreg      void 
  2659 ;; Registers used:
  2660 ;;		wreg
  2661 ;; Tracked objects:
  2662 ;;		On entry : 0/0
  2663 ;;		On exit  : 0/0
  2664 ;;		Unchanged: 0/0
  2665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2666 ;;      Params:         0       0       0       0       0       0       0
  2667 ;;      Locals:         1       0       0       0       0       0       0
  2668 ;;      Temps:          0       0       0       0       0       0       0
  2669 ;;      Totals:         1       0       0       0       0       0       0
  2670 ;;Total ram usage:        1 bytes
  2671 ;; Hardware stack levels used:    1
  2672 ;; This function calls:
  2673 ;;		Nothing
  2674 ;; This function is called by:
  2675 ;;		_UART_send_string
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679                           	psect	text7
  2680  00149A                     __ptext7:
  2681                           	callstack 0
  2682  00149A                     _UART_send_char:
  2683                           	callstack 29
  2684                           
  2685                           ;incstack = 0
  2686                           ;UART_send_char@bt stored from wreg
  2687  00149A  6E01               	movwf	UART_send_char@bt^0,c
  2688  00149C                     l75:
  2689  00149C  A89E               	btfss	3998,4,c	;volatile
  2690  00149E  EF53  F00A         	goto	u11
  2691  0014A2  EF55  F00A         	goto	u10
  2692  0014A6                     u11:
  2693  0014A6  EF4E  F00A         	goto	l75
  2694  0014AA                     u10:
  2695  0014AA                     
  2696                           ;hw_uart.c: 30: TXREG = bt;
  2697  0014AA  C001  FFAD         	movff	UART_send_char@bt,4013	;volatile
  2698  0014AE  0012               	return		;funcret
  2699  0014B0                     __end_of_UART_send_char:
  2700                           	callstack 0
  2701                           
  2702 ;; *************** function _UART_Init *****************
  2703 ;; Defined at:
  2704 ;;		line 10 in file "hw_uart.c"
  2705 ;; Parameters:    Size  Location     Type
  2706 ;;  baud_rate       2    0[COMRAM] unsigned int 
  2707 ;; Auto vars:     Size  Location     Type
  2708 ;;		None
  2709 ;; Return value:  Size  Location     Type
  2710 ;;                  1    wreg      void 
  2711 ;; Registers used:
  2712 ;;		wreg, status,2
  2713 ;; Tracked objects:
  2714 ;;		On entry : 0/0
  2715 ;;		On exit  : 0/0
  2716 ;;		Unchanged: 0/0
  2717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2718 ;;      Params:         2       0       0       0       0       0       0
  2719 ;;      Locals:         0       0       0       0       0       0       0
  2720 ;;      Temps:          0       0       0       0       0       0       0
  2721 ;;      Totals:         2       0       0       0       0       0       0
  2722 ;;Total ram usage:        2 bytes
  2723 ;; Hardware stack levels used:    1
  2724 ;; This function calls:
  2725 ;;		Nothing
  2726 ;; This function is called by:
  2727 ;;		_main
  2728 ;; This function uses a non-reentrant model
  2729 ;;
  2730                           
  2731                           	psect	text8
  2732  0014B0                     __ptext8:
  2733                           	callstack 0
  2734  0014B0                     _UART_Init:
  2735                           	callstack 30
  2736  0014B0                     
  2737                           ;hw_uart.c: 13: TXSTAbits.TXEN = 1;
  2738  0014B0  8AAC               	bsf	172,5,c	;volatile
  2739                           
  2740                           ;hw_uart.c: 15: TXSTAbits.SYNC = 0;
  2741  0014B2  98AC               	bcf	172,4,c	;volatile
  2742                           
  2743                           ;hw_uart.c: 17: TXSTAbits.BRGH = 0;
  2744  0014B4  94AC               	bcf	172,2,c	;volatile
  2745                           
  2746                           ;hw_uart.c: 19: BAUDCONbits.BRG16 = 0;
  2747  0014B6  96B8               	bcf	184,3,c	;volatile
  2748                           
  2749                           ;hw_uart.c: 21: RCSTAbits.SPEN = 1;
  2750  0014B8  8EAB               	bsf	171,7,c	;volatile
  2751  0014BA                     
  2752                           ;hw_uart.c: 23: SPBRGH = 0x00;
  2753  0014BA  0E00               	movlw	0
  2754  0014BC  6EB0               	movwf	176,c	;volatile
  2755                           
  2756                           ;hw_uart.c: 24: SPBRG = 0x0C;
  2757  0014BE  0E0C               	movlw	12
  2758  0014C0  6EAF               	movwf	175,c	;volatile
  2759  0014C2  0012               	return		;funcret
  2760  0014C4                     __end_of_UART_Init:
  2761                           	callstack 0
  2762                           
  2763 ;; *************** function _Read_ADC *****************
  2764 ;; Defined at:
  2765 ;;		line 43 in file "hw_adc.c"
  2766 ;; Parameters:    Size  Location     Type
  2767 ;;  channel         1    wreg     unsigned char 
  2768 ;; Auto vars:     Size  Location     Type
  2769 ;;  channel         1    6[COMRAM] unsigned char 
  2770 ;;  result          2    4[COMRAM] unsigned int 
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  2    0[COMRAM] unsigned int 
  2773 ;; Registers used:
  2774 ;;		wreg, status,2, status,0
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2780 ;;      Params:         2       0       0       0       0       0       0
  2781 ;;      Locals:         3       0       0       0       0       0       0
  2782 ;;      Temps:          2       0       0       0       0       0       0
  2783 ;;      Totals:         7       0       0       0       0       0       0
  2784 ;;Total ram usage:        7 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; This function calls:
  2787 ;;		Nothing
  2788 ;; This function is called by:
  2789 ;;		_main
  2790 ;; This function uses a non-reentrant model
  2791 ;;
  2792                           
  2793                           	psect	text9
  2794  001378                     __ptext9:
  2795                           	callstack 0
  2796  001378                     _Read_ADC:
  2797                           	callstack 30
  2798                           
  2799                           ;incstack = 0
  2800                           ;Read_ADC@channel stored from wreg
  2801  001378  6E07               	movwf	Read_ADC@channel^0,c
  2802  00137A                     
  2803                           ;hw_adc.c: 47: if (channel == 0)
  2804  00137A  5007               	movf	Read_ADC@channel^0,w,c
  2805  00137C  A4D8               	btfss	status,2,c
  2806  00137E  EFC3  F009         	goto	u901
  2807  001382  EFC5  F009         	goto	u900
  2808  001386                     u901:
  2809  001386  EFC9  F009         	goto	l1716
  2810  00138A                     u900:
  2811  00138A                     
  2812                           ;hw_adc.c: 48: {;hw_adc.c: 49: ADCON0bits.CHS = 0b0001;
  2813  00138A  50C2               	movf	194,w,c	;volatile
  2814  00138C  0BC3               	andlw	-61
  2815  00138E  0904               	iorlw	4
  2816  001390  6EC2               	movwf	194,c	;volatile
  2817  001392                     l1716:
  2818                           
  2819                           ;hw_adc.c: 51: };hw_adc.c: 52: if (channel == 1)
  2820  001392  0407               	decf	Read_ADC@channel^0,w,c
  2821  001394  A4D8               	btfss	status,2,c
  2822  001396  EFCF  F009         	goto	u911
  2823  00139A  EFD1  F009         	goto	u910
  2824  00139E                     u911:
  2825  00139E  EFD5  F009         	goto	l1720
  2826  0013A2                     u910:
  2827  0013A2                     
  2828                           ;hw_adc.c: 53: {;hw_adc.c: 55: ADCON0bits.CHS = 0b0010;
  2829  0013A2  50C2               	movf	194,w,c	;volatile
  2830  0013A4  0BC3               	andlw	-61
  2831  0013A6  0908               	iorlw	8
  2832  0013A8  6EC2               	movwf	194,c	;volatile
  2833  0013AA                     l1720:
  2834                           
  2835                           ;hw_adc.c: 57: };hw_adc.c: 59: ADCON0bits.GO = 1;
  2836  0013AA  82C2               	bsf	194,1,c	;volatile
  2837  0013AC                     l121:
  2838  0013AC  B2C2               	btfsc	194,1,c	;volatile
  2839  0013AE  EFDB  F009         	goto	u921
  2840  0013B2  EFDD  F009         	goto	u920
  2841  0013B6                     u921:
  2842  0013B6  EFD6  F009         	goto	l121
  2843  0013BA                     u920:
  2844  0013BA                     
  2845                           ;hw_adc.c: 61: result = (ADRESH << 8) | (ADRESL);
  2846  0013BA  50C3               	movf	195,w,c	;volatile
  2847  0013BC  CFC4 F003          	movff	4036,??_Read_ADC	;volatile
  2848  0013C0  6A04               	clrf	(??_Read_ADC+1)^0,c
  2849  0013C2  C003  F004         	movff	??_Read_ADC,??_Read_ADC+1
  2850  0013C6  6A03               	clrf	??_Read_ADC^0,c
  2851  0013C8  1003               	iorwf	??_Read_ADC^0,w,c
  2852  0013CA  6E05               	movwf	Read_ADC@result^0,c
  2853  0013CC  5004               	movf	(??_Read_ADC+1)^0,w,c
  2854  0013CE  6E06               	movwf	(Read_ADC@result+1)^0,c
  2855  0013D0                     
  2856                           ;hw_adc.c: 63: return result;
  2857  0013D0  C005  F001         	movff	Read_ADC@result,?_Read_ADC
  2858  0013D4  C006  F002         	movff	Read_ADC@result+1,?_Read_ADC+1
  2859  0013D8  0012               	return		;funcret
  2860  0013DA                     __end_of_Read_ADC:
  2861                           	callstack 0
  2862                           
  2863 ;; *************** function _PORT_Initialize *****************
  2864 ;; Defined at:
  2865 ;;		line 92 in file "Test.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;		None
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;		None
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  1    wreg      void 
  2872 ;; Registers used:
  2873 ;;		None
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2879 ;;      Params:         0       0       0       0       0       0       0
  2880 ;;      Locals:         0       0       0       0       0       0       0
  2881 ;;      Temps:          0       0       0       0       0       0       0
  2882 ;;      Totals:         0       0       0       0       0       0       0
  2883 ;;Total ram usage:        0 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; This function calls:
  2886 ;;		Nothing
  2887 ;; This function is called by:
  2888 ;;		_main
  2889 ;; This function uses a non-reentrant model
  2890 ;;
  2891                           
  2892                           	psect	text10
  2893  0014D0                     __ptext10:
  2894                           	callstack 0
  2895  0014D0                     _PORT_Initialize:
  2896                           	callstack 30
  2897  0014D0                     
  2898                           ;Test.c: 94: TRISC6 = 1;
  2899  0014D0  8C94               	bsf	3988,6,c	;volatile
  2900                           
  2901                           ;Test.c: 95: TRISC7 = 1;
  2902  0014D2  8E94               	bsf	3988,7,c	;volatile
  2903  0014D4  0012               	return		;funcret
  2904  0014D6                     __end_of_PORT_Initialize:
  2905                           	callstack 0
  2906                           
  2907 ;; *************** function _CLK_intialize *****************
  2908 ;; Defined at:
  2909 ;;		line 80 in file "Test.c"
  2910 ;; Parameters:    Size  Location     Type
  2911 ;;		None
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;		None
  2914 ;; Return value:  Size  Location     Type
  2915 ;;                  1    wreg      void 
  2916 ;; Registers used:
  2917 ;;		wreg, status,2
  2918 ;; Tracked objects:
  2919 ;;		On entry : 0/0
  2920 ;;		On exit  : 0/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2923 ;;      Params:         0       0       0       0       0       0       0
  2924 ;;      Locals:         0       0       0       0       0       0       0
  2925 ;;      Temps:          0       0       0       0       0       0       0
  2926 ;;      Totals:         0       0       0       0       0       0       0
  2927 ;;Total ram usage:        0 bytes
  2928 ;; Hardware stack levels used:    1
  2929 ;; This function calls:
  2930 ;;		Nothing
  2931 ;; This function is called by:
  2932 ;;		_main
  2933 ;; This function uses a non-reentrant model
  2934 ;;
  2935                           
  2936                           	psect	text11
  2937  0014C4                     __ptext11:
  2938                           	callstack 0
  2939  0014C4                     _CLK_intialize:
  2940                           	callstack 30
  2941  0014C4                     
  2942                           ;Test.c: 86: OSCCONbits.IRCF = 0b111;
  2943  0014C4  0E70               	movlw	112
  2944  0014C6  12D3               	iorwf	211,f,c	;volatile
  2945  0014C8                     
  2946                           ;Test.c: 88: OSCCONbits.IDLEN = 0b0;
  2947  0014C8  9ED3               	bcf	211,7,c	;volatile
  2948                           
  2949                           ;Test.c: 89: OSCCONbits.SCS = 0b11 ;
  2950  0014CA  0E03               	movlw	3
  2951  0014CC  12D3               	iorwf	211,f,c	;volatile
  2952  0014CE  0012               	return		;funcret
  2953  0014D0                     __end_of_CLK_intialize:
  2954                           	callstack 0
  2955                           
  2956 ;; *************** function _ADC_intialize *****************
  2957 ;; Defined at:
  2958 ;;		line 18 in file "hw_adc.c"
  2959 ;; Parameters:    Size  Location     Type
  2960 ;;		None
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;		None
  2963 ;; Return value:  Size  Location     Type
  2964 ;;                  1    wreg      void 
  2965 ;; Registers used:
  2966 ;;		wreg, status,2
  2967 ;; Tracked objects:
  2968 ;;		On entry : 0/0
  2969 ;;		On exit  : 0/0
  2970 ;;		Unchanged: 0/0
  2971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2972 ;;      Params:         0       0       0       0       0       0       0
  2973 ;;      Locals:         0       0       0       0       0       0       0
  2974 ;;      Temps:          0       0       0       0       0       0       0
  2975 ;;      Totals:         0       0       0       0       0       0       0
  2976 ;;Total ram usage:        0 bytes
  2977 ;; Hardware stack levels used:    1
  2978 ;; This function calls:
  2979 ;;		Nothing
  2980 ;; This function is called by:
  2981 ;;		_main
  2982 ;; This function uses a non-reentrant model
  2983 ;;
  2984                           
  2985                           	psect	text12
  2986  001462                     __ptext12:
  2987                           	callstack 0
  2988  001462                     _ADC_intialize:
  2989                           	callstack 30
  2990  001462                     
  2991                           ;hw_adc.c: 25: TRISA1 = 1 ;
  2992  001462  8292               	bsf	3986,1,c	;volatile
  2993                           
  2994                           ;hw_adc.c: 26: TRISA2 = 1 ;
  2995  001464  8492               	bsf	3986,2,c	;volatile
  2996  001466                     
  2997                           ;hw_adc.c: 32: ADCON1bits.PCFG = 0b1100;
  2998  001466  50C1               	movf	193,w,c	;volatile
  2999  001468  0BF0               	andlw	-16
  3000  00146A  090C               	iorlw	12
  3001  00146C  6EC1               	movwf	193,c	;volatile
  3002  00146E                     
  3003                           ;hw_adc.c: 33: ADCON1bits.VCFG0 = 0;
  3004  00146E  98C1               	bcf	193,4,c	;volatile
  3005  001470                     
  3006                           ;hw_adc.c: 34: ADCON1bits.VCFG1 = 0 ;
  3007  001470  9AC1               	bcf	193,5,c	;volatile
  3008                           
  3009                           ;hw_adc.c: 37: ADCON2bits.ADCS = 0b110;
  3010  001472  50C0               	movf	192,w,c	;volatile
  3011  001474  0BF8               	andlw	-8
  3012  001476  0906               	iorlw	6
  3013  001478  6EC0               	movwf	192,c	;volatile
  3014                           
  3015                           ;hw_adc.c: 38: ADCON2bits.ACQT = 0b111;
  3016  00147A  0E38               	movlw	56
  3017  00147C  12C0               	iorwf	192,f,c	;volatile
  3018  00147E                     
  3019                           ;hw_adc.c: 39: ADCON2bits.ADFM = 1;
  3020  00147E  8EC0               	bsf	192,7,c	;volatile
  3021  001480                     
  3022                           ;hw_adc.c: 40: ADCON0bits.ADON = 1 ;
  3023  001480  80C2               	bsf	194,0,c	;volatile
  3024  001482  0012               	return		;funcret
  3025  001484                     __end_of_ADC_intialize:
  3026                           	callstack 0
  3027                           
  3028                           	psect	rparam
  3029  0000                     
  3030                           	psect	idloc
  3031                           
  3032                           ;Config register IDLOC0 @ 0x200000
  3033                           ;	unspecified, using default values
  3034  200000                     	org	2097152
  3035  200000  FF                 	db	255
  3036                           
  3037                           ;Config register IDLOC1 @ 0x200001
  3038                           ;	unspecified, using default values
  3039  200001                     	org	2097153
  3040  200001  FF                 	db	255
  3041                           
  3042                           ;Config register IDLOC2 @ 0x200002
  3043                           ;	unspecified, using default values
  3044  200002                     	org	2097154
  3045  200002  FF                 	db	255
  3046                           
  3047                           ;Config register IDLOC3 @ 0x200003
  3048                           ;	unspecified, using default values
  3049  200003                     	org	2097155
  3050  200003  FF                 	db	255
  3051                           
  3052                           ;Config register IDLOC4 @ 0x200004
  3053                           ;	unspecified, using default values
  3054  200004                     	org	2097156
  3055  200004  FF                 	db	255
  3056                           
  3057                           ;Config register IDLOC5 @ 0x200005
  3058                           ;	unspecified, using default values
  3059  200005                     	org	2097157
  3060  200005  FF                 	db	255
  3061                           
  3062                           ;Config register IDLOC6 @ 0x200006
  3063                           ;	unspecified, using default values
  3064  200006                     	org	2097158
  3065  200006  FF                 	db	255
  3066                           
  3067                           ;Config register IDLOC7 @ 0x200007
  3068                           ;	unspecified, using default values
  3069  200007                     	org	2097159
  3070  200007  FF                 	db	255
  3071                           
  3072                           	psect	config
  3073                           
  3074                           ; Padding undefined space
  3075  300000                     	org	3145728
  3076  300000  FF                 	db	255
  3077                           
  3078                           ;Config register CONFIG1H @ 0x300001
  3079                           ;	Oscillator Selection bits
  3080                           ;	OSC = INTIO7, Internal oscillator block, CLKO function on RA6, port function on RA7
  3081                           ;	Fail-Safe Clock Monitor Enable bit
  3082                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3083                           ;	Internal/External Oscillator Switchover bit
  3084                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3085  300001                     	org	3145729
  3086  300001  09                 	db	9
  3087                           
  3088                           ;Config register CONFIG2L @ 0x300002
  3089                           ;	Power-up Timer Enable bit
  3090                           ;	PWRT = OFF, PWRT disabled
  3091                           ;	Brown-out Reset Enable bits
  3092                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  3093                           ;	Brown Out Reset Voltage bits
  3094                           ;	BORV = 3, Minimum setting
  3095  300002                     	org	3145730
  3096  300002  1F                 	db	31
  3097                           
  3098                           ;Config register CONFIG2H @ 0x300003
  3099                           ;	Watchdog Timer Enable bit
  3100                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3101                           ;	Watchdog Timer Postscale Select bits
  3102                           ;	WDTPS = 32768, 1:32768
  3103  300003                     	org	3145731
  3104  300003  1E                 	db	30
  3105                           
  3106                           ; Padding undefined space
  3107  300004                     	org	3145732
  3108  300004  FF                 	db	255
  3109                           
  3110                           ;Config register CONFIG3H @ 0x300005
  3111                           ;	CCP2 MUX bit
  3112                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  3113                           ;	PORTB A/D Enable bit
  3114                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  3115                           ;	Low-Power Timer1 Oscillator Enable bit
  3116                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3117                           ;	MCLR Pin Enable bit
  3118                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3119  300005                     	org	3145733
  3120  300005  83                 	db	131
  3121                           
  3122                           ;Config register CONFIG4L @ 0x300006
  3123                           ;	Stack Full/Underflow Reset Enable bit
  3124                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3125                           ;	Single-Supply ICSP Enable bit
  3126                           ;	LVP = ON, Single-Supply ICSP enabled
  3127                           ;	Extended Instruction Set Enable bit
  3128                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3129                           ;	Background Debugger Enable bit
  3130                           ;	DEBUG = 0x1, unprogrammed default
  3131  300006                     	org	3145734
  3132  300006  85                 	db	133
  3133                           
  3134                           ; Padding undefined space
  3135  300007                     	org	3145735
  3136  300007  FF                 	db	255
  3137                           
  3138                           ;Config register CONFIG5L @ 0x300008
  3139                           ;	Code Protection bit
  3140                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  3141                           ;	Code Protection bit
  3142                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  3143                           ;	Code Protection bit
  3144                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  3145                           ;	Code Protection bit
  3146                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  3147  300008                     	org	3145736
  3148  300008  0F                 	db	15
  3149                           
  3150                           ;Config register CONFIG5H @ 0x300009
  3151                           ;	Boot Block Code Protection bit
  3152                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3153                           ;	Data EEPROM Code Protection bit
  3154                           ;	CPD = OFF, Data EEPROM not code-protected
  3155  300009                     	org	3145737
  3156  300009  C0                 	db	192
  3157                           
  3158                           ;Config register CONFIG6L @ 0x30000A
  3159                           ;	Write Protection bit
  3160                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  3161                           ;	Write Protection bit
  3162                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  3163                           ;	Write Protection bit
  3164                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  3165                           ;	Write Protection bit
  3166                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  3167  30000A                     	org	3145738
  3168  30000A  0F                 	db	15
  3169                           
  3170                           ;Config register CONFIG6H @ 0x30000B
  3171                           ;	Configuration Register Write Protection bit
  3172                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3173                           ;	Boot Block Write Protection bit
  3174                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  3175                           ;	Data EEPROM Write Protection bit
  3176                           ;	WRTD = OFF, Data EEPROM not write-protected
  3177  30000B                     	org	3145739
  3178  30000B  E0                 	db	224
  3179                           
  3180                           ;Config register CONFIG7L @ 0x30000C
  3181                           ;	Table Read Protection bit
  3182                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  3183                           ;	Table Read Protection bit
  3184                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  3185                           ;	Table Read Protection bit
  3186                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  3187                           ;	Table Read Protection bit
  3188                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3189  30000C                     	org	3145740
  3190  30000C  0F                 	db	15
  3191                           
  3192                           ;Config register CONFIG7H @ 0x30000D
  3193                           ;	Boot Block Table Read Protection bit
  3194                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3195  30000D                     	org	3145741
  3196  30000D  40                 	db	64
  3197                           tosu	equ	0xFFF
  3198                           tosh	equ	0xFFE
  3199                           tosl	equ	0xFFD
  3200                           stkptr	equ	0xFFC
  3201                           pclatu	equ	0xFFB
  3202                           pclath	equ	0xFFA
  3203                           pcl	equ	0xFF9
  3204                           tblptru	equ	0xFF8
  3205                           tblptrh	equ	0xFF7
  3206                           tblptrl	equ	0xFF6
  3207                           tablat	equ	0xFF5
  3208                           prodh	equ	0xFF4
  3209                           prodl	equ	0xFF3
  3210                           indf0	equ	0xFEF
  3211                           postinc0	equ	0xFEE
  3212                           postdec0	equ	0xFED
  3213                           preinc0	equ	0xFEC
  3214                           plusw0	equ	0xFEB
  3215                           fsr0h	equ	0xFEA
  3216                           fsr0l	equ	0xFE9
  3217                           wreg	equ	0xFE8
  3218                           indf1	equ	0xFE7
  3219                           postinc1	equ	0xFE6
  3220                           postdec1	equ	0xFE5
  3221                           preinc1	equ	0xFE4
  3222                           plusw1	equ	0xFE3
  3223                           fsr1h	equ	0xFE2
  3224                           fsr1l	equ	0xFE1
  3225                           bsr	equ	0xFE0
  3226                           indf2	equ	0xFDF
  3227                           postinc2	equ	0xFDE
  3228                           postdec2	equ	0xFDD
  3229                           preinc2	equ	0xFDC
  3230                           plusw2	equ	0xFDB
  3231                           fsr2h	equ	0xFDA
  3232                           fsr2l	equ	0xFD9
  3233                           status	equ	0xFD8

Data Sizes:
    Strings     61
    Constant    30
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     80      94
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf$690	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_5(CODE[17]), STR_4(CODE[17]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(COMRAM[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[6]), STR_2(CODE[11]), STR_1(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> main@time(COMRAM[10]), main@_adc_str(COMRAM[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    UART_send_string@st_pt	PTR unsigned char  size(2) Largest target is 20
		 -> main@_adc_str(COMRAM[20]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _UART_send_string->_UART_send_char

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                57    57      0    5154
                                             43 COMRAM    37    37      0
                      _ADC_intialize
                      _CLK_intialize
                    _PORT_Initialize
                           _Read_ADC
                          _UART_Init
                   _UART_send_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             35    29      6    4544
                                             12 COMRAM    31    25      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _UART_send_string                                     2     0      2     212
                                              1 COMRAM     2     0      2
                     _UART_send_char
 ---------------------------------------------------------------------------------
 (2) _UART_send_char                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Read_ADC                                             7     5      2      68
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _PORT_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CLK_intialize                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_intialize                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_intialize
   _CLK_intialize
   _PORT_Initialize
   _Read_ADC
   _UART_Init
   _UART_send_string
     _UART_send_char
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     50      5E       1       74.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5E      15        0.0%
DATA                 0      0      5E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Thu Feb 11 15:04:30 2021

                        _i 005D                         l25 14CE                         l28 14D4  
                       l72 14C2                         l75 149C                         l91 143A  
                       l78 14AE                         u10 14AA                         u11 14A6  
              main@i2c_val 004C        ___wmul@multiplicand 0003             ?_CLK_intialize 0001  
                      l121 13AC                        l116 1482                        l124 13D8  
                      l320 0F08                        l304 0DC0                        l250 0894  
                      l227 06F8                        l316 0FDC                        l261 0970  
                      l350 1460                        l342 1112                        _ADC 0051  
                      l347 1190                        l836 1312                        l829 130A  
                      l846 1376                        l839 136E                        u900 138A  
                      u820 13F0                        u901 1386                        u821 13EC  
                      u910 13A2                        u830 1400                        u911 139E  
                      u831 13FC                        u920 13BA                        u840 12BA  
                      u921 13B6                        u841 12B6                        u850 12D8  
                      u930 067C                        u851 12D4                        u931 0678  
                      u860 12F4                        u940 0706                        u861 12F0  
                      u941 0702                        u870 1326                        u950 0726  
                      u871 1322                        u951 0722                        u880 1344  
                      u960 0794                        u881 1340                        u961 0790  
                      u890 135A                        u970 07B4                        u891 1356  
                      u971 07B0                        u980 07EC                        u981 07E8  
                      u990 080E                        u991 080A                        wreg 000FE8  
              _sprintf$690 001D                _sprintf$683 0019                _sprintf$684 001B  
                     l1100 149C                       l1102 14AA                       l1014 140A  
                     l2000 0E6E                       l2010 0EBA                       l2002 0E72  
                     l2020 0F16                       l2012 0EBE                       l2004 0E8E  
                     l2100 11B2                       l2030 0F6A                       l2006 0EA0  
                     l2014 0ED6                       l2110 11F0                       l2102 11C8  
                     l1160 14C4                       l2040 0FC4                       l2032 0F9A  
                     l2024 0F26                       l2016 0EF4                       l2008 0EAE  
                     l2120 125A                       l2112 120C                       l2104 11CA  
                     l1170 1462                       l1162 14C8                       l2050 1054  
                     l2042 0FCC                       l2034 0FA6                       l2026 0F56  
                     l2018 0F00                       l2122 1266                       l2114 1218  
                     l2106 11E0                       l1180 1480                       l1172 1466  
                     l1164 14D0                       l2052 1062                       l2036 0FAA  
                     l2028 0F62                       l2124 127E                       l2116 1230  
                     l2108 11E2                       l1174 146E                       l2070 1120  
                     l2062 10C8                       l2054 106E                       l2046 0FE0  
                     l2038 0FB8                       l2118 123E                       l1176 1470  
                     l2072 113A                       l2056 1076                       l2048 1026  
                     l2064 10F0                       l2080 1184                       l1178 147E  
                     l2090 1422                       l2074 1146                       l2058 1094  
                     l2084 140C                       l1700 135A                       l2076 114A  
                     l2068 1100                       l2092 1192                       l1710 137A  
                     l2086 1410                       l1702 1362                       l2078 1162  
                     l2094 119A                       l1720 13AA                       l1712 137A  
                     l2088 141E                       l1704 1368                       l1800 0884  
                     l2096 11A2                       l1722 13BA                       l1714 138A  
                     l1706 14B0                       l1650 13DC                       l1810 08CA  
                     l1802 088C                       l1730 066A                       l2098 11AE  
                     l1724 13D0                       l1716 1392                       l1708 14BA  
                     l1652 13E0                       l1900 0B34                       l1812 08D0  
                     l1804 0892                       l1740 06AE                       l1732 067C  
                     l1718 13A2                       l1670 12A8                       l1662 143C  
                     l1654 13F0                       l1910 0B6C                       l1830 094E  
                     l1822 090C                       l1814 08E6                       l1806 089A  
                     l1750 0706                       l1742 06B8                       l1734 0688  
                     l1680 12DE                       l1672 12BA                       l1664 1458  
                     l1656 1400                       l1904 0B62                       l1840 098E  
                     l1832 0952                       l1824 0918                       l1816 08F2  
                     l1808 08AA                       l1760 0772                       l1752 0708  
                     l1744 06C2                       l1736 0690                       l1728 065E  
                     l1682 12F4                       l1674 12C2                       l1690 1314  
                     l1658 1404                       l1930 0C02                       l1914 0B82  
                     l1850 09CC                       l1842 0992                       l1826 091C  
                     l1834 0956                       l1818 08FA                       l1770 07CC  
                     l1762 0776                       l1754 0726                       l1738 06A4  
                     l1684 12FC                       l1676 12CA                       l1668 12A0  
                     l1692 1326                       l1940 0C56                       l1932 0C1C  
                     l1908 0B68                       l1924 0BB6                       l1860 0A56  
                     l1852 09D8                       l1844 09B0                       l1828 093A  
                     l1780 081A                       l1772 07D0                       l1756 072E  
                     l1764 0798                       l1748 06C8                       l1686 12FE  
                     l1678 12D8                       l1694 132E                       l1950 0CCC  
                     l1942 0C64                       l1934 0C20                       l1918 0BB0  
                     l1926 0BDE                       l1862 0A66                       l1870 0A8C  
                     l1846 09BC                       l1838 0982                       l1782 0822  
                     l1790 083E                       l1774 07EC                       l1766 07B4  
                     l1758 074A                       l1688 1304                       l1696 1336  
                     l1960 0D40                       l1952 0CDE                       l1944 0C84  
                     l1936 0C32                       l1928 0BFA                       l1880 0ACC  
                     l1872 0A9C                       l1864 0A6E                       l1848 09C4  
                     l1792 0846                       l1856 09E0                       l1784 0830  
                     l1776 07F2                       l1768 07C4                       l1698 1344  
                     l1970 0D8E                       l1962 0D48                       l1954 0CE8  
                     l1946 0C94                       l1938 0C50                       l1890 0B14  
                     l1882 0AD0                       l1866 0A7C                       l1874 0AA4  
                     l1858 0A38                       l1794 084E                       l1786 0834  
                     l1778 080E                       l1980 0DDE                       l1972 0DAC  
                     l1964 0D6C                       l1956 0D18                       l1948 0C9C  
                     l1876 0AB4                       l1868 0A80                       l1796 085E  
                     l1788 0836                       l1990 0E38                       l1982 0E0E  
                     l1974 0DB8                       l1966 0D78                       l1958 0D34  
                     l1894 0B1A                       l1886 0AE6                       l1878 0AC6  
                     l1798 0862                       l1992 0E40                       l1984 0E1A  
                     l1976 0DCE                       l1968 0D80                       l1896 0B1E  
                     l1986 0E1E                       l1988 0E2C                       l1996 0E50  
                     l1998 0E62                       STR_1 064C                       STR_2 0641  
                     STR_3 0656                       STR_4 061F                       STR_5 0630  
                     u1000 0830                       u1001 082C                       u1010 0880  
                     u1011 087C                       u1100 0A56                       u1020 08AA  
                     u1101 0A52                       u1021 08A6                       u1110 0A7C  
                     u1030 08CA                       u1111 0A78                       u1031 08C6  
                     u1200 0BFA                       u1120 0AB4                       u1040 08E6  
                     u1201 0BF6                       u1121 0AB0                       u1041 08E2  
                     u1210 0C1C                       u1130 0AC6                       u1050 0908  
                     u1211 0C18                       u1131 0AC2                       u1051 0904  
                     u1300 0D6C                       u1220 0C32                       u1140 0AE2  
                     u1060 0936                       u1301 0D68                       u1221 0C2E  
                     u1141 0ADE                       u1061 0932                       u1310 0D8E  
                     u1230 0C50                       u1150 0B10                       u1070 0970  
                     u1311 0D8A                       u1231 0C4C                       u1151 0B0C  
                     u1071 096C                       u1400 0ED6                       u1320 0DAC  
                     u1240 0C64                       u1160 0B30                       u1080 097E  
                     u1401 0ED2                       u1321 0DA8                       u1241 0C60  
                     u1161 0B2C                       u1081 097A                       u1410 0EF4  
                     u1330 0DCE                       u1250 0C84                       u1170 0B5E  
                     u1090 09AC                       u1411 0EF0                       u1331 0DCA  
                     u1251 0C80                       u1171 0B5A                       u1091 09A8  
                     u1500 1162                       u1420 0F16                       u1340 0E0E  
                     u1260 0CCC                       u1180 0B7E                       u1501 115E  
                     u1421 0F12                       u1341 0E0A                       u1261 0CC8  
                     u1181 0B7A                       u1510 1184                       u1430 0F56  
                     u1350 0E2C                       u1270 0CDE                       u1190 0BAC  
                     u1511 1180                       u1431 0F52                       u1351 0E28  
                     u1271 0CDA                       u1191 0BA8                       u1520 143A  
                     u1440 0F9A                       u1360 0E62                       u1280 0D18  
                     u1521 1436                       u1441 0F96                       u1361 0E5E  
                     u1281 0D14                       u1450 0FB8                       u1370 0E8A  
                     u1290 0D34                       u1451 0FB4                       u1371 0E86  
                     u1291 0D30                       u1460 1062                       u1380 0EA0  
                     u1461 105E                       u1381 0E9C                       u1470 1112  
                     u1390 0EAE                       u1471 110E                       u1391 0EAA  
                     u1480 1120                       u1481 111C                       u1537 11BC  
                     u1490 113A                       u1491 1136                       u1547 11D4  
                     u1557 1222                       u1567 1270                       _RCIF 007CF5  
                     _TXIF 007CF4                       _main 1192               main@_adc_str 002E  
                     fsr1h 000FE2                       fsr2h 000FDA                       indf1 000FE7  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     prodh 000FF4                       prodl 000FF3                       start 0000  
             ___param_bank 000000  __size_of_UART_send_string 0030                      ?_main 0001  
                    _LATA4 007C4C                      _LATA5 007C4D                      _LATA6 007C4E  
          __end_of___lwdiv 1314            __end_of___lwmod 1378                      _RCREG 000FAE  
                    _SPBRG 000FAF                      _TXREG 000FAD         __size_of_UART_Init 0014  
          __end_of_dpowers 0617            __end_of_isdigit 140C                      _value 0055  
             main@temp_adc 004D                      tablat 000FF5                      status 000FD8  
          __end_of_sprintf 1192          ??_PORT_Initialize 0001            __initialization 1484  
             __end_of_main 12A0           __end_of_Read_ADC 13DA            ??_CLK_intialize 0001  
                   ??_main 002C              __activetblptr 000002                     _ADRESH 000FC4  
                   _ADRESL 000FC3                     _SPBRGH 000FB0                     _SSPADD 000FC8  
                   _TRISA1 007C91                     _TRISA2 007C92                     _TRISB1 007C99  
                   _TRISC4 007CA4                     _TRISC5 007CA5                     _TRISC6 007CA6  
                   _TRISC7 007CA7                     _SSPBUF 000FC9              main@humid_adc 004F  
        __end_of_UART_Init 14C4            Read_ADC@channel 0007                     ___wmul 143C  
                ??___lwdiv 0005                  ??___lwmod 000C                     clear_0 148A  
                ??_isdigit 0001               __mediumconst 0000                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8                  ??_sprintf 0013  
               __accesstop 0080    __end_of__initialization 1490              ___rparam_used 000001  
           __pcstackCOMRAM 0001           _UART_send_string 140C               sprintf@width 0027  
                ?_Read_ADC 0001     __size_of_ADC_intialize 0022                    ?___wmul 0001  
          _PORT_Initialize 14D0    __size_of_UART_send_char 0016                    _SSPCON1 000FC6  
                  _SSPSTAT 000FC7                 ??_Read_ADC 0003                    __Hparam 0000  
                  __Lparam 0000            __size_of___wmul 0026                    ___lwdiv 12A0  
                  ___lwmod 1314               __psmallconst 0600                    __pcinit 1484  
            _ADC_intialize 1462                    __ramtop 0600                    __ptext0 1192  
                  __ptext1 065E                    __ptext2 13DA                    __ptext3 143C  
                  __ptext4 1314                    __ptext5 12A0                    __ptext6 140C  
                  __ptext7 149A                    __ptext8 14B0                    __ptext9 1378  
        __end_of_hexpowers 061F                    _dpowers 060D                    _isdigit 13DA  
                  _sprintf 065E                    _voltage 0059       end_of_initialization 1490  
        __end_of_octpowers 060D              __Lmediumconst 0000                  _RCSTAbits 000FAB  
                  postdec2 000FDD                    postinc0 000FEE                    postinc2 000FDE  
           ?_ADC_intialize 0001                  _UART_Init 14B0    __end_of_PORT_Initialize 14D6  
    __end_of_CLK_intialize 14D0         UART_Init@baud_rate 0001   __end_of_UART_send_string 143C  
                _TXSTAbits 000FAC             __end_of___wmul 1462                _BAUDCONbits 000FB8  
               ?_UART_Init 0001        start_initialization 1484             _UART_send_char 149A  
        __size_of_Read_ADC 0062            ??_ADC_intialize 0001                   ??___wmul 0005  
           Read_ADC@result 0005           ?_PORT_Initialize 0001     __end_of_UART_send_char 14B0  
              __pbssCOMRAM 0051               _isdigit$1130 0002                sprintf@flag 002A  
              sprintf@prec 0026           ___lwdiv@dividend 0001                   ?___lwdiv 0001  
                 ?___lwmod 0008                ??_UART_Init 0003           UART_send_char@bt 0001  
              __smallconst 0600            ?_UART_send_char 0001                   ?_isdigit 0001  
                _hexpowers 0617           ___lwdiv@quotient 0005                   ?_sprintf 000D  
           ___wmul@product 0005                  _octpowers 0601                   _PIR1bits 000F9E  
               _ADCON0bits 000FC2                 _ADCON1bits 000FC1                 _ADCON2bits 000FC0  
        ___wmul@multiplier 0001      UART_send_string@st_pt 0002          ?_UART_send_string 0002  
                 _Read_ADC 1378         ??_UART_send_string 0004                   __Hrparam 0000  
                 __Lrparam 0000           __size_of___lwdiv 0074           __size_of___lwmod 0064  
               sprintf@idx 001F                 sprintf@len 0020                 sprintf@val 0024  
         __size_of_isdigit 0032            ___lwdiv@divisor 0003            ___lwdiv@counter 0007  
                 __ptext10 14D0                   __ptext11 14C4                   __ptext12 1462  
         __size_of_sprintf 0B34              __size_of_main 010E     __size_of_CLK_intialize 000C  
                 main@time 0042                 _INTCONbits 000FF2                   isdigit@c 0003  
                sprintf@ap 0022                  sprintf@cp 0017                  sprintf@sp 000D  
         ___lwmod@dividend 0008                 _OSCCONbits 000FD3           ??_UART_send_char 0001  
    __end_of_ADC_intialize 1484                   sprintf@c 0029                   sprintf@f 000F  
            _CLK_intialize 14C4            ___lwmod@divisor 000A            ___lwmod@counter 000C  
              _SSPCON2bits 000FC5   __size_of_PORT_Initialize 0006  
