

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Wed Feb 10 10:08:33 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F2520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    24  0000                     
    25                           ; Version 2.20
    26                           ; Generated 12/02/2020 GMT
    27                           ; 
    28                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F2520 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     
    60                           	psect	smallconst
    61  000600                     __psmallconst:
    62                           	callstack 0
    63  000600  00                 	db	0
    64  000601                     _dpowers:
    65                           	callstack 0
    66  000601  0001               	dw	1
    67  000603  000A               	dw	10
    68  000605  0064               	dw	100
    69  000607  03E8               	dw	1000
    70  000609  2710               	dw	10000
    71  00060B                     __end_of_dpowers:
    72                           	callstack 0
    73  0000                     _ADRESL	set	4035
    74  0000                     _ADRESH	set	4036
    75  0000                     _ADCON0bits	set	4034
    76  0000                     _ADCON2bits	set	4032
    77  0000                     _ADCON1bits	set	4033
    78  0000                     _RCREG	set	4014
    79  0000                     _TXREG	set	4013
    80  0000                     _SPBRG	set	4015
    81  0000                     _SPBRGH	set	4016
    82  0000                     _RCSTAbits	set	4011
    83  0000                     _BAUDCONbits	set	4024
    84  0000                     _TXSTAbits	set	4012
    85  0000                     _INTCONbits	set	4082
    86  0000                     _OSCCONbits	set	4051
    87  0000                     _TRISA2	set	31890
    88  0000                     _TRISA1	set	31889
    89  0000                     _RCIF	set	31989
    90  0000                     _LATA6	set	31822
    91  0000                     _LATA5	set	31821
    92  0000                     _LATA4	set	31820
    93  0000                     _TXIF	set	31988
    94  0000                     _TRISB1	set	31897
    95  0000                     _TRISC7	set	31911
    96  0000                     _TRISC6	set	31910
    97  00060B                     STR_2:
    98  00060B  48                 	db	72	;'H'
    99  00060C  55                 	db	85	;'U'
   100  00060D  4D                 	db	77	;'M'
   101  00060E  49                 	db	73	;'I'
   102  00060F  44                 	db	68	;'D'
   103  000610  3A                 	db	58	;':'
   104  000611  20                 	db	32
   105  000612  25                 	db	37
   106  000613  75                 	db	117	;'u'
   107  000614  0A                 	db	10
   108  000615  00                 	db	0
   109  000616                     STR_1:
   110  000616  54                 	db	84	;'T'
   111  000617  45                 	db	69	;'E'
   112  000618  4D                 	db	77	;'M'
   113  000619  50                 	db	80	;'P'
   114  00061A  3A                 	db	58	;':'
   115  00061B  20                 	db	32
   116  00061C  25                 	db	37
   117  00061D  75                 	db	117	;'u'
   118  00061E  0A                 	db	10
   119  00061F  00                 	db	0
   120  000620  00                 	db	0	; dummy byte at the end
   121  0000                     
   122                           ; #config settings
   123                           
   124                           	psect	cinit
   125  000A06                     __pcinit:
   126                           	callstack 0
   127  000A06                     start_initialization:
   128                           	callstack 0
   129  000A06                     __initialization:
   130                           	callstack 0
   131                           
   132                           ; Clear objects allocated to COMRAM (14 bytes)
   133  000A06  EE00  F034         	lfsr	0,__pbssCOMRAM
   134  000A0A  0E0E               	movlw	14
   135  000A0C                     clear_0:
   136  000A0C  6AEE               	clrf	postinc0,c
   137  000A0E  06E8               	decf	wreg,f,c
   138  000A10  E1FD               	bnz	clear_0
   139  000A12                     end_of_initialization:
   140                           	callstack 0
   141  000A12                     __end_of__initialization:
   142                           	callstack 0
   143  000A12  0E00               	movlw	low (__Lmediumconst shr (0+16))
   144  000A14  6EF8               	movwf	tblptru,c
   145  000A16  0100               	movlb	0
   146  000A18  EFC3  F003         	goto	_main	;jump to C main() function
   147                           
   148                           	psect	bssCOMRAM
   149  000034                     __pbssCOMRAM:
   150                           	callstack 0
   151  000034                     _ADC:
   152                           	callstack 0
   153  000034                     	ds	4
   154  000038                     _value:
   155                           	callstack 0
   156  000038                     	ds	4
   157  00003C                     _voltage:
   158                           	callstack 0
   159  00003C                     	ds	4
   160  000040                     _i:
   161                           	callstack 0
   162  000040                     	ds	2
   163                           
   164                           	psect	cstackCOMRAM
   165  000001                     __pcstackCOMRAM:
   166                           	callstack 0
   167  000001                     ?_Read_ADC:
   168                           	callstack 0
   169  000001                     ?___lwdiv:
   170                           	callstack 0
   171  000001                     UART_send_char@bt:
   172                           	callstack 0
   173  000001                     UART_Init@baud_rate:
   174                           	callstack 0
   175  000001                     ___lwdiv@dividend:
   176                           	callstack 0
   177                           
   178                           ; 2 bytes @ 0x0
   179  000001                     	ds	1
   180  000002                     UART_send_string@st_pt:
   181                           	callstack 0
   182                           
   183                           ; 2 bytes @ 0x1
   184  000002                     	ds	1
   185  000003                     ??_Read_ADC:
   186  000003                     ___lwdiv@divisor:
   187                           	callstack 0
   188                           
   189                           ; 2 bytes @ 0x2
   190  000003                     	ds	1
   191  000004                     
   192                           ; 1 bytes @ 0x3
   193  000004                     	ds	1
   194  000005                     Read_ADC@result:
   195                           	callstack 0
   196  000005                     ___lwdiv@quotient:
   197                           	callstack 0
   198                           
   199                           ; 2 bytes @ 0x4
   200  000005                     	ds	2
   201  000007                     Read_ADC@channel:
   202                           	callstack 0
   203  000007                     ___lwdiv@counter:
   204                           	callstack 0
   205                           
   206                           ; 1 bytes @ 0x6
   207  000007                     	ds	1
   208  000008                     ?___lwmod:
   209                           	callstack 0
   210  000008                     ___lwmod@dividend:
   211                           	callstack 0
   212                           
   213                           ; 2 bytes @ 0x7
   214  000008                     	ds	2
   215  00000A                     ___lwmod@divisor:
   216                           	callstack 0
   217                           
   218                           ; 2 bytes @ 0x9
   219  00000A                     	ds	2
   220  00000C                     ___lwmod@counter:
   221                           	callstack 0
   222                           
   223                           ; 1 bytes @ 0xB
   224  00000C                     	ds	1
   225  00000D                     ?_sprintf:
   226                           	callstack 0
   227  00000D                     sprintf@sp:
   228                           	callstack 0
   229                           
   230                           ; 2 bytes @ 0xC
   231  00000D                     	ds	2
   232  00000F                     sprintf@f:
   233                           	callstack 0
   234                           
   235                           ; 2 bytes @ 0xE
   236  00000F                     	ds	4
   237  000013                     sprintf@flag:
   238                           	callstack 0
   239                           
   240                           ; 1 bytes @ 0x12
   241  000013                     	ds	1
   242  000014                     sprintf@ap:
   243                           	callstack 0
   244                           
   245                           ; 2 bytes @ 0x13
   246  000014                     	ds	2
   247  000016                     sprintf@val:
   248                           	callstack 0
   249                           
   250                           ; 2 bytes @ 0x15
   251  000016                     	ds	2
   252  000018                     sprintf@prec:
   253                           	callstack 0
   254                           
   255                           ; 1 bytes @ 0x17
   256  000018                     	ds	1
   257  000019                     sprintf@c:
   258                           	callstack 0
   259                           
   260                           ; 1 bytes @ 0x18
   261  000019                     	ds	1
   262  00001A                     ??_main:
   263                           
   264                           ; 1 bytes @ 0x19
   265  00001A                     	ds	2
   266  00001C                     main@_adc_str:
   267                           	callstack 0
   268                           
   269                           ; 20 bytes @ 0x1B
   270  00001C                     	ds	20
   271  000030                     main@temp_adc:
   272                           	callstack 0
   273                           
   274                           ; 2 bytes @ 0x2F
   275  000030                     	ds	2
   276  000032                     main@humid_adc:
   277                           	callstack 0
   278                           
   279                           ; 2 bytes @ 0x31
   280  000032                     	ds	2
   281                           
   282 ;;
   283 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   284 ;;
   285 ;; *************** function _main *****************
   286 ;; Defined at:
   287 ;;		line 109 in file "Test.c"
   288 ;; Parameters:    Size  Location     Type
   289 ;;		None
   290 ;; Auto vars:     Size  Location     Type
   291 ;;  _adc_str       20   27[COMRAM] unsigned char [20]
   292 ;;  _adc_buf       20    0        unsigned char [20]
   293 ;;  humid_adc       2   49[COMRAM] unsigned int 
   294 ;;  temp_adc        2   47[COMRAM] unsigned int 
   295 ;; Return value:  Size  Location     Type
   296 ;;                  1    wreg      void 
   297 ;; Registers used:
   298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   299 ;; Tracked objects:
   300 ;;		On entry : 0/0
   301 ;;		On exit  : 0/0
   302 ;;		Unchanged: 0/0
   303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   304 ;;      Params:         0       0       0       0       0       0       0
   305 ;;      Locals:        24       0       0       0       0       0       0
   306 ;;      Temps:          2       0       0       0       0       0       0
   307 ;;      Totals:        26       0       0       0       0       0       0
   308 ;;Total ram usage:       26 bytes
   309 ;; Hardware stack levels required when called:    2
   310 ;; This function calls:
   311 ;;		_ADC_intialize
   312 ;;		_CLK_intialize
   313 ;;		_PORT_Initialize
   314 ;;		_Read_ADC
   315 ;;		_UART_Init
   316 ;;		_UART_send_string
   317 ;;		_sprintf
   318 ;; This function is called by:
   319 ;;		Startup code after reset
   320 ;; This function uses a non-reentrant model
   321 ;;
   322                           
   323                           	psect	text0
   324  000786                     __ptext0:
   325                           	callstack 0
   326  000786                     _main:
   327                           	callstack 29
   328  000786                     
   329                           ;Test.c: 112: unsigned int humid_adc = 0;
   330  000786  0E00               	movlw	0
   331  000788  6E33               	movwf	(main@humid_adc+1)^0,c
   332  00078A  0E00               	movlw	0
   333  00078C  6E32               	movwf	main@humid_adc^0,c
   334  00078E                     
   335                           ;Test.c: 114: char _adc_str[20];;Test.c: 115: char _adc_buf[20];;Test.c: 117: CLK_intial
      +                          ize();
   336  00078E  EC23  F005         	call	_CLK_intialize	;wreg free
   337                           
   338                           ;Test.c: 118: PORT_Initialize();
   339  000792  EC29  F005         	call	_PORT_Initialize	;wreg free
   340  000796                     
   341                           ;Test.c: 119: UART_Init(9600);
   342  000796  0E25               	movlw	37
   343  000798  6E02               	movwf	(UART_Init@baud_rate+1)^0,c
   344  00079A  0E80               	movlw	128
   345  00079C  6E01               	movwf	UART_Init@baud_rate^0,c
   346  00079E  EC19  F005         	call	_UART_Init	;wreg free
   347  0007A2                     
   348                           ;Test.c: 120: ADC_intialize();
   349  0007A2  ECF2  F004         	call	_ADC_intialize	;wreg free
   350  0007A6                     l1195:
   351                           
   352                           ;Test.c: 124: {;Test.c: 128: _delay((unsigned long)((500)*(8000000/4000.0)));
   353  0007A6  0E06               	movlw	6
   354  0007A8  6E1B               	movwf	(??_main+1)^0,c
   355  0007AA  0E13               	movlw	19
   356  0007AC  6E1A               	movwf	??_main^0,c
   357  0007AE  0EAE               	movlw	174
   358  0007B0                     u347:
   359  0007B0  2EE8               	decfsz	wreg,f,c
   360  0007B2  D7FE               	bra	u347
   361  0007B4  2E1A               	decfsz	??_main^0,f,c
   362  0007B6  D7FC               	bra	u347
   363  0007B8  2E1B               	decfsz	(??_main+1)^0,f,c
   364  0007BA  D7FA               	bra	u347
   365  0007BC                     
   366                           ;Test.c: 129: TRISB1 = 0;
   367  0007BC  9293               	bcf	3987,1,c	;volatile
   368  0007BE                     
   369                           ;Test.c: 130: _delay((unsigned long)((500)*(8000000/4000.0)));
   370  0007BE  0E06               	movlw	6
   371  0007C0  6E1B               	movwf	(??_main+1)^0,c
   372  0007C2  0E13               	movlw	19
   373  0007C4  6E1A               	movwf	??_main^0,c
   374  0007C6  0EAE               	movlw	174
   375  0007C8                     u357:
   376  0007C8  2EE8               	decfsz	wreg,f,c
   377  0007CA  D7FE               	bra	u357
   378  0007CC  2E1A               	decfsz	??_main^0,f,c
   379  0007CE  D7FC               	bra	u357
   380  0007D0  2E1B               	decfsz	(??_main+1)^0,f,c
   381  0007D2  D7FA               	bra	u357
   382  0007D4                     
   383                           ;Test.c: 131: TRISB1 = 1;
   384  0007D4  8293               	bsf	3987,1,c	;volatile
   385  0007D6                     
   386                           ;Test.c: 135: temp_adc = Read_ADC (0);
   387  0007D6  0E00               	movlw	0
   388  0007D8  ECA9  F004         	call	_Read_ADC
   389  0007DC  C001  F030         	movff	?_Read_ADC,main@temp_adc
   390  0007E0  C002  F031         	movff	?_Read_ADC+1,main@temp_adc+1
   391  0007E4                     
   392                           ;Test.c: 137: sprintf(_adc_str,"TEMP: %u\n", temp_adc);
   393  0007E4  0E1C               	movlw	low main@_adc_str
   394  0007E6  6E0D               	movwf	sprintf@sp^0,c
   395  0007E8  0E00               	movlw	high main@_adc_str
   396  0007EA  6E0E               	movwf	(sprintf@sp+1)^0,c
   397  0007EC  0E16               	movlw	low STR_1
   398  0007EE  6E0F               	movwf	sprintf@f^0,c
   399  0007F0  0E06               	movlw	high STR_1
   400  0007F2  6E10               	movwf	(sprintf@f+1)^0,c
   401  0007F4  C030  F011         	movff	main@temp_adc,?_sprintf+4
   402  0007F8  C031  F012         	movff	main@temp_adc+1,?_sprintf+5
   403  0007FC  EC11  F003         	call	_sprintf	;wreg free
   404  000800                     
   405                           ;Test.c: 138: UART_send_string(_adc_str);
   406  000800  0E1C               	movlw	low main@_adc_str
   407  000802  6E02               	movwf	UART_send_string@st_pt^0,c
   408  000804  0E00               	movlw	high main@_adc_str
   409  000806  6E03               	movwf	(UART_send_string@st_pt+1)^0,c
   410  000808  ECDA  F004         	call	_UART_send_string	;wreg free
   411  00080C                     
   412                           ;Test.c: 140: _delay((unsigned long)((100)*(8000000/4000.0)));
   413  00080C  0E02               	movlw	2
   414  00080E  6E1B               	movwf	(??_main+1)^0,c
   415  000810  0E04               	movlw	4
   416  000812  6E1A               	movwf	??_main^0,c
   417  000814  0EBA               	movlw	186
   418  000816                     u367:
   419  000816  2EE8               	decfsz	wreg,f,c
   420  000818  D7FE               	bra	u367
   421  00081A  2E1A               	decfsz	??_main^0,f,c
   422  00081C  D7FC               	bra	u367
   423  00081E  2E1B               	decfsz	(??_main+1)^0,f,c
   424  000820  D7FA               	bra	u367
   425  000822  D000               	nop2	
   426  000824                     
   427                           ;Test.c: 145: humid_adc = Read_ADC (1);
   428  000824  0E01               	movlw	1
   429  000826  ECA9  F004         	call	_Read_ADC
   430  00082A  C001  F032         	movff	?_Read_ADC,main@humid_adc
   431  00082E  C002  F033         	movff	?_Read_ADC+1,main@humid_adc+1
   432  000832                     
   433                           ;Test.c: 146: sprintf(_adc_str, "HUMID: %u\n", humid_adc);
   434  000832  0E1C               	movlw	low main@_adc_str
   435  000834  6E0D               	movwf	sprintf@sp^0,c
   436  000836  0E00               	movlw	high main@_adc_str
   437  000838  6E0E               	movwf	(sprintf@sp+1)^0,c
   438  00083A  0E0B               	movlw	low STR_2
   439  00083C  6E0F               	movwf	sprintf@f^0,c
   440  00083E  0E06               	movlw	high STR_2
   441  000840  6E10               	movwf	(sprintf@f+1)^0,c
   442  000842  C032  F011         	movff	main@humid_adc,?_sprintf+4
   443  000846  C033  F012         	movff	main@humid_adc+1,?_sprintf+5
   444  00084A  EC11  F003         	call	_sprintf	;wreg free
   445  00084E                     
   446                           ;Test.c: 147: UART_send_string(_adc_str);
   447  00084E  0E1C               	movlw	low main@_adc_str
   448  000850  6E02               	movwf	UART_send_string@st_pt^0,c
   449  000852  0E00               	movlw	high main@_adc_str
   450  000854  6E03               	movwf	(UART_send_string@st_pt+1)^0,c
   451  000856  ECDA  F004         	call	_UART_send_string	;wreg free
   452  00085A                     
   453                           ;Test.c: 149: _delay((unsigned long)((100)*(8000000/4000.0)));
   454  00085A  0E02               	movlw	2
   455  00085C  6E1B               	movwf	(??_main+1)^0,c
   456  00085E  0E04               	movlw	4
   457  000860  6E1A               	movwf	??_main^0,c
   458  000862  0EBA               	movlw	186
   459  000864                     u377:
   460  000864  2EE8               	decfsz	wreg,f,c
   461  000866  D7FE               	bra	u377
   462  000868  2E1A               	decfsz	??_main^0,f,c
   463  00086A  D7FC               	bra	u377
   464  00086C  2E1B               	decfsz	(??_main+1)^0,f,c
   465  00086E  D7FA               	bra	u377
   466  000870  D000               	nop2	
   467  000872  EFD3  F003         	goto	l1195
   468  000876  EF00  F000         	goto	start
   469  00087A                     __end_of_main:
   470                           	callstack 0
   471                           
   472 ;; *************** function _sprintf *****************
   473 ;; Defined at:
   474 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
   475 ;; Parameters:    Size  Location     Type
   476 ;;  sp              2   12[COMRAM] PTR unsigned char 
   477 ;;		 -> main@_adc_str(20), 
   478 ;;  f               2   14[COMRAM] PTR const unsigned char 
   479 ;;		 -> STR_2(11), STR_1(10), 
   480 ;; Auto vars:     Size  Location     Type
   481 ;;  tmpval          4    0        struct .
   482 ;;  cp              3    0        PTR const unsigned char 
   483 ;;  val             2   21[COMRAM] unsigned int 
   484 ;;  ap              2   19[COMRAM] PTR void [1]
   485 ;;		 -> ?_sprintf(2), 
   486 ;;  len             2    0        unsigned int 
   487 ;;  c               1   24[COMRAM] unsigned char 
   488 ;;  prec            1   23[COMRAM] char 
   489 ;;  flag            1   18[COMRAM] unsigned char 
   490 ;; Return value:  Size  Location     Type
   491 ;;                  2   12[COMRAM] int 
   492 ;; Registers used:
   493 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   494 ;; Tracked objects:
   495 ;;		On entry : 0/0
   496 ;;		On exit  : 0/0
   497 ;;		Unchanged: 0/0
   498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   499 ;;      Params:         6       0       0       0       0       0       0
   500 ;;      Locals:         7       0       0       0       0       0       0
   501 ;;      Temps:          0       0       0       0       0       0       0
   502 ;;      Totals:        13       0       0       0       0       0       0
   503 ;;Total ram usage:       13 bytes
   504 ;; Hardware stack levels used:    1
   505 ;; Hardware stack levels required when called:    1
   506 ;; This function calls:
   507 ;;		___lwdiv
   508 ;;		___lwmod
   509 ;; This function is called by:
   510 ;;		_main
   511 ;; This function uses a non-reentrant model
   512 ;;
   513                           
   514                           	psect	text1
   515  000622                     __ptext1:
   516                           	callstack 0
   517  000622                     _sprintf:
   518                           	callstack 29
   519  000622                     
   520                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 521: signed char prec;;dopr
      +                          nt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c: 541: unsigned long vd;;d
      +                          oprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned int val;;do
      +                          prnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = __va_sta
      +                          rt();
   521  000622  0E11               	movlw	low (?_sprintf+4)
   522  000624  6E14               	movwf	sprintf@ap^0,c
   523  000626  0E00               	movlw	high (?_sprintf+4)
   524  000628  6E15               	movwf	(sprintf@ap+1)^0,c
   525                           
   526                           ;doprnt.c: 553: while((c = *f++)) {
   527  00062A  EFAB  F003         	goto	l1173
   528  00062E                     l1133:
   529                           
   530                           ;doprnt.c: 555: if(c != '%')
   531  00062E  0E25               	movlw	37
   532  000630  1819               	xorwf	sprintf@c^0,w,c
   533  000632  B4D8               	btfsc	status,2,c
   534  000634  EF1E  F003         	goto	u281
   535  000638  EF20  F003         	goto	u280
   536  00063C                     u281:
   537  00063C  EF2A  F003         	goto	l1139
   538  000640                     u280:
   539  000640                     
   540                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
   541  000640  C00D  FFD9         	movff	sprintf@sp,fsr2l
   542  000644  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   543  000648  C019  FFDF         	movff	sprintf@c,indf2
   544  00064C  4A0D               	infsnz	sprintf@sp^0,f,c
   545  00064E  2A0E               	incf	(sprintf@sp+1)^0,f,c
   546                           
   547                           ;doprnt.c: 559: continue;
   548  000650  EFAB  F003         	goto	l1173
   549  000654                     l1139:
   550                           
   551                           ;doprnt.c: 560: };doprnt.c: 565: flag = 0;
   552  000654  0E00               	movlw	0
   553  000656  6E13               	movwf	sprintf@flag^0,c
   554                           
   555                           ;doprnt.c: 661: switch(c = *f++) {
   556  000658  EF32  F003         	goto	l1145
   557  00065C                     l1141:
   558                           
   559                           ;doprnt.c: 844: flag |= 0xC0;
   560  00065C  0EC0               	movlw	192
   561  00065E  1213               	iorwf	sprintf@flag^0,f,c
   562                           
   563                           ;doprnt.c: 845: break;
   564  000660  EF46  F003         	goto	l1147
   565  000664                     l1145:
   566  000664  C00F  FFF6         	movff	sprintf@f,tblptrl
   567  000668  C010  FFF7         	movff	sprintf@f+1,tblptrh
   568  00066C  4A0F               	infsnz	sprintf@f^0,f,c
   569  00066E  2A10               	incf	(sprintf@f+1)^0,f,c
   570  000670                     	if	0	;tblptru may be non-zero
   571  000670                     	endif
   572  000670                     	if	0	;tblptru may be non-zero
   573  000670                     	endif
   574  000670  0008               	tblrd		*
   575  000672  CFF5 F019          	movff	tablat,sprintf@c
   576  000676  5019               	movf	sprintf@c^0,w,c
   577                           
   578                           ; Switch size 1, requested type "simple"
   579                           ; Number of cases is 2, Range of values is 0 to 117
   580                           ; switch strategies available:
   581                           ; Name         Instructions Cycles
   582                           ; simple_byte            7     4 (average)
   583                           ;	Chosen strategy is simple_byte
   584  000678  0A00               	xorlw	0	; case 0
   585  00067A  B4D8               	btfsc	status,2,c
   586  00067C  EFBC  F003         	goto	l1175
   587  000680  0A75               	xorlw	117	; case 117
   588  000682  B4D8               	btfsc	status,2,c
   589  000684  EF2E  F003         	goto	l1141
   590  000688  EFAB  F003         	goto	l1173
   591  00068C                     l1147:
   592                           
   593                           ;doprnt.c: 1299: {;doprnt.c: 1312: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (uns
      +                          igned)0));
   594  00068C  C014  FFD9         	movff	sprintf@ap,fsr2l
   595  000690  C015  FFDA         	movff	sprintf@ap+1,fsr2h
   596  000694  CFDE F016          	movff	postinc2,sprintf@val
   597  000698  CFDD F017          	movff	postdec2,sprintf@val+1
   598  00069C  0E02               	movlw	2
   599  00069E  2614               	addwf	sprintf@ap^0,f,c
   600  0006A0  0E00               	movlw	0
   601  0006A2  2215               	addwfc	(sprintf@ap+1)^0,f,c
   602  0006A4                     
   603                           ;doprnt.c: 1313: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c
      +                          ++)
   604  0006A4  0E01               	movlw	1
   605  0006A6  6E19               	movwf	sprintf@c^0,c
   606  0006A8                     l1157:
   607                           
   608                           ;doprnt.c: 1332: if(val < dpowers[c])
   609  0006A8  5019               	movf	sprintf@c^0,w,c
   610  0006AA  0D02               	mullw	2
   611  0006AC  0E01               	movlw	low _dpowers
   612  0006AE  24F3               	addwf	243,w,c
   613  0006B0  6EF6               	movwf	tblptrl,c
   614  0006B2  0E06               	movlw	high _dpowers
   615  0006B4  20F4               	addwfc	244,w,c
   616  0006B6  6EF7               	movwf	tblptrh,c
   617  0006B8                     	if	0	;There are less than 3 active tblptr bytes
   618  0006B8                     	endif
   619  0006B8  0009               	tblrd		*+
   620  0006BA  50F5               	movf	tablat,w,c
   621  0006BC  5C16               	subwf	sprintf@val^0,w,c
   622  0006BE  0009               	tblrd		*+
   623  0006C0  50F5               	movf	tablat,w,c
   624  0006C2  5817               	subwfb	(sprintf@val+1)^0,w,c
   625  0006C4  B0D8               	btfsc	status,0,c
   626  0006C6  EF67  F003         	goto	u291
   627  0006CA  EF69  F003         	goto	u290
   628  0006CE                     u291:
   629  0006CE  EF6B  F003         	goto	l1161
   630  0006D2                     u290:
   631  0006D2  EF75  F003         	goto	l137
   632  0006D6                     l1161:
   633  0006D6  2A19               	incf	sprintf@c^0,f,c
   634  0006D8  0E05               	movlw	5
   635  0006DA  1819               	xorwf	sprintf@c^0,w,c
   636  0006DC  A4D8               	btfss	status,2,c
   637  0006DE  EF73  F003         	goto	u301
   638  0006E2  EF75  F003         	goto	u300
   639  0006E6                     u301:
   640  0006E6  EF54  F003         	goto	l1157
   641  0006EA                     u300:
   642  0006EA                     l137:
   643                           
   644                           ;doprnt.c: 1448: {;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
   645  0006EA  C019  F018         	movff	sprintf@c,sprintf@prec
   646                           
   647                           ;doprnt.c: 1500: while(prec--) {
   648  0006EE  EFA2  F003         	goto	l1171
   649  0006F2                     l1165:
   650                           
   651                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
   652  0006F2  5018               	movf	sprintf@prec^0,w,c
   653  0006F4  0D02               	mullw	2
   654  0006F6  0E01               	movlw	low _dpowers
   655  0006F8  24F3               	addwf	243,w,c
   656  0006FA  6EF6               	movwf	tblptrl,c
   657  0006FC  0E06               	movlw	high _dpowers
   658  0006FE  20F4               	addwfc	244,w,c
   659  000700  6EF7               	movwf	tblptrh,c
   660  000702                     	if	0	;There are less than 3 active tblptr bytes
   661  000702                     	endif
   662  000702  0009               	tblrd		*+
   663  000704  CFF5 F003          	movff	tablat,___lwdiv@divisor
   664  000708  000A               	tblrd		*-
   665  00070A  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
   666  00070E  C016  F001         	movff	sprintf@val,___lwdiv@dividend
   667  000712  C017  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
   668  000716  EC3D  F004         	call	___lwdiv	;wreg free
   669  00071A  C001  F008         	movff	?___lwdiv,___lwmod@dividend
   670  00071E  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
   671  000722  0E00               	movlw	0
   672  000724  6E0B               	movwf	(___lwmod@divisor+1)^0,c
   673  000726  0E0A               	movlw	10
   674  000728  6E0A               	movwf	___lwmod@divisor^0,c
   675  00072A  EC77  F004         	call	___lwmod	;wreg free
   676  00072E  5008               	movf	?___lwmod^0,w,c
   677  000730  0F30               	addlw	48
   678  000732  6E19               	movwf	sprintf@c^0,c
   679  000734                     
   680                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
   681  000734  C00D  FFD9         	movff	sprintf@sp,fsr2l
   682  000738  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   683  00073C  C019  FFDF         	movff	sprintf@c,indf2
   684  000740  4A0D               	infsnz	sprintf@sp^0,f,c
   685  000742  2A0E               	incf	(sprintf@sp+1)^0,f,c
   686  000744                     l1171:
   687  000744  0618               	decf	sprintf@prec^0,f,c
   688  000746  2818               	incf	sprintf@prec^0,w,c
   689  000748  A4D8               	btfss	status,2,c
   690  00074A  EFA9  F003         	goto	u311
   691  00074E  EFAB  F003         	goto	u310
   692  000752                     u311:
   693  000752  EF79  F003         	goto	l1165
   694  000756                     u310:
   695  000756                     l1173:
   696  000756  C00F  FFF6         	movff	sprintf@f,tblptrl
   697  00075A  C010  FFF7         	movff	sprintf@f+1,tblptrh
   698  00075E  4A0F               	infsnz	sprintf@f^0,f,c
   699  000760  2A10               	incf	(sprintf@f+1)^0,f,c
   700  000762                     	if	0	;tblptru may be non-zero
   701  000762                     	endif
   702  000762                     	if	0	;tblptru may be non-zero
   703  000762                     	endif
   704  000762  0008               	tblrd		*
   705  000764  CFF5 F019          	movff	tablat,sprintf@c
   706  000768  5019               	movf	sprintf@c^0,w,c
   707  00076A  A4D8               	btfss	status,2,c
   708  00076C  EFBA  F003         	goto	u321
   709  000770  EFBC  F003         	goto	u320
   710  000774                     u321:
   711  000774  EF17  F003         	goto	l1133
   712  000778                     u320:
   713  000778                     l1175:
   714                           
   715                           ;doprnt.c: 1564: *sp = 0;
   716  000778  C00D  FFD9         	movff	sprintf@sp,fsr2l
   717  00077C  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   718  000780  0E00               	movlw	0
   719  000782  6EDF               	movwf	indf2,c
   720  000784  0012               	return		;funcret
   721  000786                     __end_of_sprintf:
   722                           	callstack 0
   723                           
   724 ;; *************** function ___lwmod *****************
   725 ;; Defined at:
   726 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
   727 ;; Parameters:    Size  Location     Type
   728 ;;  dividend        2    7[COMRAM] unsigned int 
   729 ;;  divisor         2    9[COMRAM] unsigned int 
   730 ;; Auto vars:     Size  Location     Type
   731 ;;  counter         1   11[COMRAM] unsigned char 
   732 ;; Return value:  Size  Location     Type
   733 ;;                  2    7[COMRAM] unsigned int 
   734 ;; Registers used:
   735 ;;		wreg, status,2, status,0
   736 ;; Tracked objects:
   737 ;;		On entry : 0/0
   738 ;;		On exit  : 0/0
   739 ;;		Unchanged: 0/0
   740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   741 ;;      Params:         4       0       0       0       0       0       0
   742 ;;      Locals:         1       0       0       0       0       0       0
   743 ;;      Temps:          0       0       0       0       0       0       0
   744 ;;      Totals:         5       0       0       0       0       0       0
   745 ;;Total ram usage:        5 bytes
   746 ;; Hardware stack levels used:    1
   747 ;; This function calls:
   748 ;;		Nothing
   749 ;; This function is called by:
   750 ;;		_sprintf
   751 ;; This function uses a non-reentrant model
   752 ;;
   753                           
   754                           	psect	text2
   755  0008EE                     __ptext2:
   756                           	callstack 0
   757  0008EE                     ___lwmod:
   758                           	callstack 29
   759  0008EE  500A               	movf	___lwmod@divisor^0,w,c
   760  0008F0  100B               	iorwf	(___lwmod@divisor+1)^0,w,c
   761  0008F2  B4D8               	btfsc	status,2,c
   762  0008F4  EF7E  F004         	goto	u221
   763  0008F8  EF80  F004         	goto	u220
   764  0008FC                     u221:
   765  0008FC  EFA4  F004         	goto	l635
   766  000900                     u220:
   767  000900  0E01               	movlw	1
   768  000902  6E0C               	movwf	___lwmod@counter^0,c
   769  000904  EF88  F004         	goto	l1099
   770  000908                     l1097:
   771  000908  90D8               	bcf	status,0,c
   772  00090A  360A               	rlcf	___lwmod@divisor^0,f,c
   773  00090C  360B               	rlcf	(___lwmod@divisor+1)^0,f,c
   774  00090E  2A0C               	incf	___lwmod@counter^0,f,c
   775  000910                     l1099:
   776  000910  AE0B               	btfss	(___lwmod@divisor+1)^0,7,c
   777  000912  EF8D  F004         	goto	u231
   778  000916  EF8F  F004         	goto	u230
   779  00091A                     u231:
   780  00091A  EF84  F004         	goto	l1097
   781  00091E                     u230:
   782  00091E                     l1101:
   783  00091E  500A               	movf	___lwmod@divisor^0,w,c
   784  000920  5C08               	subwf	___lwmod@dividend^0,w,c
   785  000922  500B               	movf	(___lwmod@divisor+1)^0,w,c
   786  000924  5809               	subwfb	(___lwmod@dividend+1)^0,w,c
   787  000926  A0D8               	btfss	status,0,c
   788  000928  EF98  F004         	goto	u241
   789  00092C  EF9A  F004         	goto	u240
   790  000930                     u241:
   791  000930  EF9E  F004         	goto	l1105
   792  000934                     u240:
   793  000934  500A               	movf	___lwmod@divisor^0,w,c
   794  000936  5E08               	subwf	___lwmod@dividend^0,f,c
   795  000938  500B               	movf	(___lwmod@divisor+1)^0,w,c
   796  00093A  5A09               	subwfb	(___lwmod@dividend+1)^0,f,c
   797  00093C                     l1105:
   798  00093C  90D8               	bcf	status,0,c
   799  00093E  320B               	rrcf	(___lwmod@divisor+1)^0,f,c
   800  000940  320A               	rrcf	___lwmod@divisor^0,f,c
   801  000942  2E0C               	decfsz	___lwmod@counter^0,f,c
   802  000944  EF8F  F004         	goto	l1101
   803  000948                     l635:
   804  000948  C008  F008         	movff	___lwmod@dividend,?___lwmod
   805  00094C  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
   806  000950  0012               	return		;funcret
   807  000952                     __end_of___lwmod:
   808                           	callstack 0
   809                           
   810 ;; *************** function ___lwdiv *****************
   811 ;; Defined at:
   812 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
   813 ;; Parameters:    Size  Location     Type
   814 ;;  dividend        2    0[COMRAM] unsigned int 
   815 ;;  divisor         2    2[COMRAM] unsigned int 
   816 ;; Auto vars:     Size  Location     Type
   817 ;;  quotient        2    4[COMRAM] unsigned int 
   818 ;;  counter         1    6[COMRAM] unsigned char 
   819 ;; Return value:  Size  Location     Type
   820 ;;                  2    0[COMRAM] unsigned int 
   821 ;; Registers used:
   822 ;;		wreg, status,2, status,0
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   828 ;;      Params:         4       0       0       0       0       0       0
   829 ;;      Locals:         3       0       0       0       0       0       0
   830 ;;      Temps:          0       0       0       0       0       0       0
   831 ;;      Totals:         7       0       0       0       0       0       0
   832 ;;Total ram usage:        7 bytes
   833 ;; Hardware stack levels used:    1
   834 ;; This function calls:
   835 ;;		Nothing
   836 ;; This function is called by:
   837 ;;		_sprintf
   838 ;; This function uses a non-reentrant model
   839 ;;
   840                           
   841                           	psect	text3
   842  00087A                     __ptext3:
   843                           	callstack 0
   844  00087A                     ___lwdiv:
   845                           	callstack 29
   846  00087A  0E00               	movlw	0
   847  00087C  6E06               	movwf	(___lwdiv@quotient+1)^0,c
   848  00087E  0E00               	movlw	0
   849  000880  6E05               	movwf	___lwdiv@quotient^0,c
   850  000882  5003               	movf	___lwdiv@divisor^0,w,c
   851  000884  1004               	iorwf	(___lwdiv@divisor+1)^0,w,c
   852  000886  B4D8               	btfsc	status,2,c
   853  000888  EF48  F004         	goto	u191
   854  00088C  EF4A  F004         	goto	u190
   855  000890                     u191:
   856  000890  EF72  F004         	goto	l625
   857  000894                     u190:
   858  000894  0E01               	movlw	1
   859  000896  6E07               	movwf	___lwdiv@counter^0,c
   860  000898  EF52  F004         	goto	l1079
   861  00089C                     l1077:
   862  00089C  90D8               	bcf	status,0,c
   863  00089E  3603               	rlcf	___lwdiv@divisor^0,f,c
   864  0008A0  3604               	rlcf	(___lwdiv@divisor+1)^0,f,c
   865  0008A2  2A07               	incf	___lwdiv@counter^0,f,c
   866  0008A4                     l1079:
   867  0008A4  AE04               	btfss	(___lwdiv@divisor+1)^0,7,c
   868  0008A6  EF57  F004         	goto	u201
   869  0008AA  EF59  F004         	goto	u200
   870  0008AE                     u201:
   871  0008AE  EF4E  F004         	goto	l1077
   872  0008B2                     u200:
   873  0008B2                     l1081:
   874  0008B2  90D8               	bcf	status,0,c
   875  0008B4  3605               	rlcf	___lwdiv@quotient^0,f,c
   876  0008B6  3606               	rlcf	(___lwdiv@quotient+1)^0,f,c
   877  0008B8  5003               	movf	___lwdiv@divisor^0,w,c
   878  0008BA  5C01               	subwf	___lwdiv@dividend^0,w,c
   879  0008BC  5004               	movf	(___lwdiv@divisor+1)^0,w,c
   880  0008BE  5802               	subwfb	(___lwdiv@dividend+1)^0,w,c
   881  0008C0  A0D8               	btfss	status,0,c
   882  0008C2  EF65  F004         	goto	u211
   883  0008C6  EF67  F004         	goto	u210
   884  0008CA                     u211:
   885  0008CA  EF6C  F004         	goto	l1089
   886  0008CE                     u210:
   887  0008CE  5003               	movf	___lwdiv@divisor^0,w,c
   888  0008D0  5E01               	subwf	___lwdiv@dividend^0,f,c
   889  0008D2  5004               	movf	(___lwdiv@divisor+1)^0,w,c
   890  0008D4  5A02               	subwfb	(___lwdiv@dividend+1)^0,f,c
   891  0008D6  8005               	bsf	___lwdiv@quotient^0,0,c
   892  0008D8                     l1089:
   893  0008D8  90D8               	bcf	status,0,c
   894  0008DA  3204               	rrcf	(___lwdiv@divisor+1)^0,f,c
   895  0008DC  3203               	rrcf	___lwdiv@divisor^0,f,c
   896  0008DE  2E07               	decfsz	___lwdiv@counter^0,f,c
   897  0008E0  EF59  F004         	goto	l1081
   898  0008E4                     l625:
   899  0008E4  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
   900  0008E8  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
   901  0008EC  0012               	return		;funcret
   902  0008EE                     __end_of___lwdiv:
   903                           	callstack 0
   904                           
   905 ;; *************** function _UART_send_string *****************
   906 ;; Defined at:
   907 ;;		line 54 in file "hw_uart.c"
   908 ;; Parameters:    Size  Location     Type
   909 ;;  st_pt           2    1[COMRAM] PTR unsigned char 
   910 ;;		 -> main@_adc_str(20), 
   911 ;; Auto vars:     Size  Location     Type
   912 ;;		None
   913 ;; Return value:  Size  Location     Type
   914 ;;                  1    wreg      void 
   915 ;; Registers used:
   916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   917 ;; Tracked objects:
   918 ;;		On entry : 0/0
   919 ;;		On exit  : 0/0
   920 ;;		Unchanged: 0/0
   921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   922 ;;      Params:         2       0       0       0       0       0       0
   923 ;;      Locals:         0       0       0       0       0       0       0
   924 ;;      Temps:          0       0       0       0       0       0       0
   925 ;;      Totals:         2       0       0       0       0       0       0
   926 ;;Total ram usage:        2 bytes
   927 ;; Hardware stack levels used:    1
   928 ;; Hardware stack levels required when called:    1
   929 ;; This function calls:
   930 ;;		_UART_send_char
   931 ;; This function is called by:
   932 ;;		_main
   933 ;; This function uses a non-reentrant model
   934 ;;
   935                           
   936                           	psect	text4
   937  0009B4                     __ptext4:
   938                           	callstack 0
   939  0009B4                     _UART_send_string:
   940                           	callstack 29
   941  0009B4                     
   942                           ;hw_uart.c: 56: while(*st_pt)
   943  0009B4  EFE5  F004         	goto	l1185
   944  0009B8                     l1181:
   945                           
   946                           ;hw_uart.c: 57: UART_send_char(*st_pt++);
   947  0009B8  C002  FFD9         	movff	UART_send_string@st_pt,fsr2l
   948  0009BC  C003  FFDA         	movff	UART_send_string@st_pt+1,fsr2h
   949  0009C0  50DF               	movf	indf2,w,c
   950  0009C2  EC0E  F005         	call	_UART_send_char
   951  0009C6  4A02               	infsnz	UART_send_string@st_pt^0,f,c
   952  0009C8  2A03               	incf	(UART_send_string@st_pt+1)^0,f,c
   953  0009CA                     l1185:
   954  0009CA  C002  FFD9         	movff	UART_send_string@st_pt,fsr2l
   955  0009CE  C003  FFDA         	movff	UART_send_string@st_pt+1,fsr2h
   956  0009D2  50DF               	movf	indf2,w,c
   957  0009D4  A4D8               	btfss	status,2,c
   958  0009D6  EFEF  F004         	goto	u331
   959  0009DA  EFF1  F004         	goto	u330
   960  0009DE                     u331:
   961  0009DE  EFDC  F004         	goto	l1181
   962  0009E2                     u330:
   963  0009E2  0012               	return		;funcret
   964  0009E4                     __end_of_UART_send_string:
   965                           	callstack 0
   966                           
   967 ;; *************** function _UART_send_char *****************
   968 ;; Defined at:
   969 ;;		line 27 in file "hw_uart.c"
   970 ;; Parameters:    Size  Location     Type
   971 ;;  bt              1    wreg     unsigned char 
   972 ;; Auto vars:     Size  Location     Type
   973 ;;  bt              1    0[COMRAM] unsigned char 
   974 ;; Return value:  Size  Location     Type
   975 ;;                  1    wreg      void 
   976 ;; Registers used:
   977 ;;		wreg
   978 ;; Tracked objects:
   979 ;;		On entry : 0/0
   980 ;;		On exit  : 0/0
   981 ;;		Unchanged: 0/0
   982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   983 ;;      Params:         0       0       0       0       0       0       0
   984 ;;      Locals:         1       0       0       0       0       0       0
   985 ;;      Temps:          0       0       0       0       0       0       0
   986 ;;      Totals:         1       0       0       0       0       0       0
   987 ;;Total ram usage:        1 bytes
   988 ;; Hardware stack levels used:    1
   989 ;; This function calls:
   990 ;;		Nothing
   991 ;; This function is called by:
   992 ;;		_UART_send_string
   993 ;; This function uses a non-reentrant model
   994 ;;
   995                           
   996                           	psect	text5
   997  000A1C                     __ptext5:
   998                           	callstack 0
   999  000A1C                     _UART_send_char:
  1000                           	callstack 29
  1001                           
  1002                           ;incstack = 0
  1003                           ;UART_send_char@bt stored from wreg
  1004  000A1C  6E01               	movwf	UART_send_char@bt^0,c
  1005  000A1E                     l69:
  1006  000A1E  A89E               	btfss	3998,4,c	;volatile
  1007  000A20  EF14  F005         	goto	u11
  1008  000A24  EF16  F005         	goto	u10
  1009  000A28                     u11:
  1010  000A28  EF0F  F005         	goto	l69
  1011  000A2C                     u10:
  1012  000A2C                     
  1013                           ;hw_uart.c: 30: TXREG = bt;
  1014  000A2C  C001  FFAD         	movff	UART_send_char@bt,4013	;volatile
  1015  000A30  0012               	return		;funcret
  1016  000A32                     __end_of_UART_send_char:
  1017                           	callstack 0
  1018                           
  1019 ;; *************** function _UART_Init *****************
  1020 ;; Defined at:
  1021 ;;		line 10 in file "hw_uart.c"
  1022 ;; Parameters:    Size  Location     Type
  1023 ;;  baud_rate       2    0[COMRAM] unsigned int 
  1024 ;; Auto vars:     Size  Location     Type
  1025 ;;		None
  1026 ;; Return value:  Size  Location     Type
  1027 ;;                  1    wreg      void 
  1028 ;; Registers used:
  1029 ;;		wreg, status,2
  1030 ;; Tracked objects:
  1031 ;;		On entry : 0/0
  1032 ;;		On exit  : 0/0
  1033 ;;		Unchanged: 0/0
  1034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1035 ;;      Params:         2       0       0       0       0       0       0
  1036 ;;      Locals:         0       0       0       0       0       0       0
  1037 ;;      Temps:          0       0       0       0       0       0       0
  1038 ;;      Totals:         2       0       0       0       0       0       0
  1039 ;;Total ram usage:        2 bytes
  1040 ;; Hardware stack levels used:    1
  1041 ;; This function calls:
  1042 ;;		Nothing
  1043 ;; This function is called by:
  1044 ;;		_main
  1045 ;; This function uses a non-reentrant model
  1046 ;;
  1047                           
  1048                           	psect	text6
  1049  000A32                     __ptext6:
  1050                           	callstack 0
  1051  000A32                     _UART_Init:
  1052                           	callstack 30
  1053  000A32                     
  1054                           ;hw_uart.c: 13: TXSTAbits.TXEN = 1;
  1055  000A32  8AAC               	bsf	172,5,c	;volatile
  1056                           
  1057                           ;hw_uart.c: 15: TXSTAbits.SYNC = 0;
  1058  000A34  98AC               	bcf	172,4,c	;volatile
  1059                           
  1060                           ;hw_uart.c: 17: TXSTAbits.BRGH = 0;
  1061  000A36  94AC               	bcf	172,2,c	;volatile
  1062                           
  1063                           ;hw_uart.c: 19: BAUDCONbits.BRG16 = 0;
  1064  000A38  96B8               	bcf	184,3,c	;volatile
  1065                           
  1066                           ;hw_uart.c: 21: RCSTAbits.SPEN = 1;
  1067  000A3A  8EAB               	bsf	171,7,c	;volatile
  1068  000A3C                     
  1069                           ;hw_uart.c: 23: SPBRGH = 0x00;
  1070  000A3C  0E00               	movlw	0
  1071  000A3E  6EB0               	movwf	176,c	;volatile
  1072                           
  1073                           ;hw_uart.c: 24: SPBRG = 0x0C;
  1074  000A40  0E0C               	movlw	12
  1075  000A42  6EAF               	movwf	175,c	;volatile
  1076  000A44  0012               	return		;funcret
  1077  000A46                     __end_of_UART_Init:
  1078                           	callstack 0
  1079                           
  1080 ;; *************** function _Read_ADC *****************
  1081 ;; Defined at:
  1082 ;;		line 43 in file "hw_adc.c"
  1083 ;; Parameters:    Size  Location     Type
  1084 ;;  channel         1    wreg     unsigned char 
  1085 ;; Auto vars:     Size  Location     Type
  1086 ;;  channel         1    6[COMRAM] unsigned char 
  1087 ;;  result          2    4[COMRAM] unsigned int 
  1088 ;; Return value:  Size  Location     Type
  1089 ;;                  2    0[COMRAM] unsigned int 
  1090 ;; Registers used:
  1091 ;;		wreg, status,2, status,0
  1092 ;; Tracked objects:
  1093 ;;		On entry : 0/0
  1094 ;;		On exit  : 0/0
  1095 ;;		Unchanged: 0/0
  1096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1097 ;;      Params:         2       0       0       0       0       0       0
  1098 ;;      Locals:         3       0       0       0       0       0       0
  1099 ;;      Temps:          2       0       0       0       0       0       0
  1100 ;;      Totals:         7       0       0       0       0       0       0
  1101 ;;Total ram usage:        7 bytes
  1102 ;; Hardware stack levels used:    1
  1103 ;; This function calls:
  1104 ;;		Nothing
  1105 ;; This function is called by:
  1106 ;;		_main
  1107 ;; This function uses a non-reentrant model
  1108 ;;
  1109                           
  1110                           	psect	text7
  1111  000952                     __ptext7:
  1112                           	callstack 0
  1113  000952                     _Read_ADC:
  1114                           	callstack 30
  1115                           
  1116                           ;incstack = 0
  1117                           ;Read_ADC@channel stored from wreg
  1118  000952  6E07               	movwf	Read_ADC@channel^0,c
  1119  000954                     
  1120                           ;hw_adc.c: 47: if (channel == 0)
  1121  000954  5007               	movf	Read_ADC@channel^0,w,c
  1122  000956  A4D8               	btfss	status,2,c
  1123  000958  EFB0  F004         	goto	u251
  1124  00095C  EFB2  F004         	goto	u250
  1125  000960                     u251:
  1126  000960  EFB6  F004         	goto	l1119
  1127  000964                     u250:
  1128  000964                     
  1129                           ;hw_adc.c: 48: {;hw_adc.c: 49: ADCON0bits.CHS = 0b0010;
  1130  000964  50C2               	movf	194,w,c	;volatile
  1131  000966  0BC3               	andlw	-61
  1132  000968  0908               	iorlw	8
  1133  00096A  6EC2               	movwf	194,c	;volatile
  1134  00096C                     l1119:
  1135                           
  1136                           ;hw_adc.c: 51: };hw_adc.c: 52: if (channel == 1)
  1137  00096C  0407               	decf	Read_ADC@channel^0,w,c
  1138  00096E  A4D8               	btfss	status,2,c
  1139  000970  EFBC  F004         	goto	u261
  1140  000974  EFBE  F004         	goto	u260
  1141  000978                     u261:
  1142  000978  EFC2  F004         	goto	l1123
  1143  00097C                     u260:
  1144  00097C                     
  1145                           ;hw_adc.c: 53: {;hw_adc.c: 55: ADCON0bits.CHS = 0b0001;
  1146  00097C  50C2               	movf	194,w,c	;volatile
  1147  00097E  0BC3               	andlw	-61
  1148  000980  0904               	iorlw	4
  1149  000982  6EC2               	movwf	194,c	;volatile
  1150  000984                     l1123:
  1151                           
  1152                           ;hw_adc.c: 57: };hw_adc.c: 59: ADCON0bits.GO = 1;
  1153  000984  82C2               	bsf	194,1,c	;volatile
  1154  000986                     l115:
  1155  000986  B2C2               	btfsc	194,1,c	;volatile
  1156  000988  EFC8  F004         	goto	u271
  1157  00098C  EFCA  F004         	goto	u270
  1158  000990                     u271:
  1159  000990  EFC3  F004         	goto	l115
  1160  000994                     u270:
  1161  000994                     
  1162                           ;hw_adc.c: 61: result = (ADRESH << 8) | (ADRESL);
  1163  000994  50C3               	movf	195,w,c	;volatile
  1164  000996  CFC4 F003          	movff	4036,??_Read_ADC	;volatile
  1165  00099A  6A04               	clrf	(??_Read_ADC+1)^0,c
  1166  00099C  C003  F004         	movff	??_Read_ADC,??_Read_ADC+1
  1167  0009A0  6A03               	clrf	??_Read_ADC^0,c
  1168  0009A2  1003               	iorwf	??_Read_ADC^0,w,c
  1169  0009A4  6E05               	movwf	Read_ADC@result^0,c
  1170  0009A6  5004               	movf	(??_Read_ADC+1)^0,w,c
  1171  0009A8  6E06               	movwf	(Read_ADC@result+1)^0,c
  1172  0009AA                     
  1173                           ;hw_adc.c: 63: return result;
  1174  0009AA  C005  F001         	movff	Read_ADC@result,?_Read_ADC
  1175  0009AE  C006  F002         	movff	Read_ADC@result+1,?_Read_ADC+1
  1176  0009B2  0012               	return		;funcret
  1177  0009B4                     __end_of_Read_ADC:
  1178                           	callstack 0
  1179                           
  1180 ;; *************** function _PORT_Initialize *****************
  1181 ;; Defined at:
  1182 ;;		line 93 in file "Test.c"
  1183 ;; Parameters:    Size  Location     Type
  1184 ;;		None
  1185 ;; Auto vars:     Size  Location     Type
  1186 ;;		None
  1187 ;; Return value:  Size  Location     Type
  1188 ;;                  1    wreg      void 
  1189 ;; Registers used:
  1190 ;;		None
  1191 ;; Tracked objects:
  1192 ;;		On entry : 0/0
  1193 ;;		On exit  : 0/0
  1194 ;;		Unchanged: 0/0
  1195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1196 ;;      Params:         0       0       0       0       0       0       0
  1197 ;;      Locals:         0       0       0       0       0       0       0
  1198 ;;      Temps:          0       0       0       0       0       0       0
  1199 ;;      Totals:         0       0       0       0       0       0       0
  1200 ;;Total ram usage:        0 bytes
  1201 ;; Hardware stack levels used:    1
  1202 ;; This function calls:
  1203 ;;		Nothing
  1204 ;; This function is called by:
  1205 ;;		_main
  1206 ;; This function uses a non-reentrant model
  1207 ;;
  1208                           
  1209                           	psect	text8
  1210  000A52                     __ptext8:
  1211                           	callstack 0
  1212  000A52                     _PORT_Initialize:
  1213                           	callstack 30
  1214  000A52                     
  1215                           ;Test.c: 95: TRISC6 = 1;
  1216  000A52  8C94               	bsf	3988,6,c	;volatile
  1217                           
  1218                           ;Test.c: 96: TRISC7 = 1;
  1219  000A54  8E94               	bsf	3988,7,c	;volatile
  1220  000A56  0012               	return		;funcret
  1221  000A58                     __end_of_PORT_Initialize:
  1222                           	callstack 0
  1223                           
  1224 ;; *************** function _CLK_intialize *****************
  1225 ;; Defined at:
  1226 ;;		line 81 in file "Test.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;		None
  1229 ;; Auto vars:     Size  Location     Type
  1230 ;;		None
  1231 ;; Return value:  Size  Location     Type
  1232 ;;                  1    wreg      void 
  1233 ;; Registers used:
  1234 ;;		wreg, status,2
  1235 ;; Tracked objects:
  1236 ;;		On entry : 0/0
  1237 ;;		On exit  : 0/0
  1238 ;;		Unchanged: 0/0
  1239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1240 ;;      Params:         0       0       0       0       0       0       0
  1241 ;;      Locals:         0       0       0       0       0       0       0
  1242 ;;      Temps:          0       0       0       0       0       0       0
  1243 ;;      Totals:         0       0       0       0       0       0       0
  1244 ;;Total ram usage:        0 bytes
  1245 ;; Hardware stack levels used:    1
  1246 ;; This function calls:
  1247 ;;		Nothing
  1248 ;; This function is called by:
  1249 ;;		_main
  1250 ;; This function uses a non-reentrant model
  1251 ;;
  1252                           
  1253                           	psect	text9
  1254  000A46                     __ptext9:
  1255                           	callstack 0
  1256  000A46                     _CLK_intialize:
  1257                           	callstack 30
  1258  000A46                     
  1259                           ;Test.c: 87: OSCCONbits.IRCF = 0b111;
  1260  000A46  0E70               	movlw	112
  1261  000A48  12D3               	iorwf	211,f,c	;volatile
  1262  000A4A                     
  1263                           ;Test.c: 89: OSCCONbits.IDLEN = 0b0;
  1264  000A4A  9ED3               	bcf	211,7,c	;volatile
  1265                           
  1266                           ;Test.c: 90: OSCCONbits.SCS = 0b11 ;
  1267  000A4C  0E03               	movlw	3
  1268  000A4E  12D3               	iorwf	211,f,c	;volatile
  1269  000A50  0012               	return		;funcret
  1270  000A52                     __end_of_CLK_intialize:
  1271                           	callstack 0
  1272                           
  1273 ;; *************** function _ADC_intialize *****************
  1274 ;; Defined at:
  1275 ;;		line 18 in file "hw_adc.c"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;		None
  1278 ;; Auto vars:     Size  Location     Type
  1279 ;;		None
  1280 ;; Return value:  Size  Location     Type
  1281 ;;                  1    wreg      void 
  1282 ;; Registers used:
  1283 ;;		wreg, status,2
  1284 ;; Tracked objects:
  1285 ;;		On entry : 0/0
  1286 ;;		On exit  : 0/0
  1287 ;;		Unchanged: 0/0
  1288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1289 ;;      Params:         0       0       0       0       0       0       0
  1290 ;;      Locals:         0       0       0       0       0       0       0
  1291 ;;      Temps:          0       0       0       0       0       0       0
  1292 ;;      Totals:         0       0       0       0       0       0       0
  1293 ;;Total ram usage:        0 bytes
  1294 ;; Hardware stack levels used:    1
  1295 ;; This function calls:
  1296 ;;		Nothing
  1297 ;; This function is called by:
  1298 ;;		_main
  1299 ;; This function uses a non-reentrant model
  1300 ;;
  1301                           
  1302                           	psect	text10
  1303  0009E4                     __ptext10:
  1304                           	callstack 0
  1305  0009E4                     _ADC_intialize:
  1306                           	callstack 30
  1307  0009E4                     
  1308                           ;hw_adc.c: 25: TRISA1 = 1 ;
  1309  0009E4  8292               	bsf	3986,1,c	;volatile
  1310                           
  1311                           ;hw_adc.c: 26: TRISA2 = 1 ;
  1312  0009E6  8492               	bsf	3986,2,c	;volatile
  1313  0009E8                     
  1314                           ;hw_adc.c: 32: ADCON1bits.PCFG = 0b1100;
  1315  0009E8  50C1               	movf	193,w,c	;volatile
  1316  0009EA  0BF0               	andlw	-16
  1317  0009EC  090C               	iorlw	12
  1318  0009EE  6EC1               	movwf	193,c	;volatile
  1319  0009F0                     
  1320                           ;hw_adc.c: 33: ADCON1bits.VCFG0 = 0;
  1321  0009F0  98C1               	bcf	193,4,c	;volatile
  1322  0009F2                     
  1323                           ;hw_adc.c: 34: ADCON1bits.VCFG1 = 0 ;
  1324  0009F2  9AC1               	bcf	193,5,c	;volatile
  1325                           
  1326                           ;hw_adc.c: 37: ADCON2bits.ADCS = 0b110;
  1327  0009F4  50C0               	movf	192,w,c	;volatile
  1328  0009F6  0BF8               	andlw	-8
  1329  0009F8  0906               	iorlw	6
  1330  0009FA  6EC0               	movwf	192,c	;volatile
  1331                           
  1332                           ;hw_adc.c: 38: ADCON2bits.ACQT = 0b111;
  1333  0009FC  0E38               	movlw	56
  1334  0009FE  12C0               	iorwf	192,f,c	;volatile
  1335  000A00                     
  1336                           ;hw_adc.c: 39: ADCON2bits.ADFM = 1;
  1337  000A00  8EC0               	bsf	192,7,c	;volatile
  1338  000A02                     
  1339                           ;hw_adc.c: 40: ADCON0bits.ADON = 1 ;
  1340  000A02  80C2               	bsf	194,0,c	;volatile
  1341  000A04  0012               	return		;funcret
  1342  000A06                     __end_of_ADC_intialize:
  1343                           	callstack 0
  1344                           
  1345                           	psect	rparam
  1346  0000                     
  1347                           	psect	idloc
  1348                           
  1349                           ;Config register IDLOC0 @ 0x200000
  1350                           ;	unspecified, using default values
  1351  200000                     	org	2097152
  1352  200000  FF                 	db	255
  1353                           
  1354                           ;Config register IDLOC1 @ 0x200001
  1355                           ;	unspecified, using default values
  1356  200001                     	org	2097153
  1357  200001  FF                 	db	255
  1358                           
  1359                           ;Config register IDLOC2 @ 0x200002
  1360                           ;	unspecified, using default values
  1361  200002                     	org	2097154
  1362  200002  FF                 	db	255
  1363                           
  1364                           ;Config register IDLOC3 @ 0x200003
  1365                           ;	unspecified, using default values
  1366  200003                     	org	2097155
  1367  200003  FF                 	db	255
  1368                           
  1369                           ;Config register IDLOC4 @ 0x200004
  1370                           ;	unspecified, using default values
  1371  200004                     	org	2097156
  1372  200004  FF                 	db	255
  1373                           
  1374                           ;Config register IDLOC5 @ 0x200005
  1375                           ;	unspecified, using default values
  1376  200005                     	org	2097157
  1377  200005  FF                 	db	255
  1378                           
  1379                           ;Config register IDLOC6 @ 0x200006
  1380                           ;	unspecified, using default values
  1381  200006                     	org	2097158
  1382  200006  FF                 	db	255
  1383                           
  1384                           ;Config register IDLOC7 @ 0x200007
  1385                           ;	unspecified, using default values
  1386  200007                     	org	2097159
  1387  200007  FF                 	db	255
  1388                           
  1389                           	psect	config
  1390                           
  1391                           ; Padding undefined space
  1392  300000                     	org	3145728
  1393  300000  FF                 	db	255
  1394                           
  1395                           ;Config register CONFIG1H @ 0x300001
  1396                           ;	Oscillator Selection bits
  1397                           ;	OSC = INTIO7, Internal oscillator block, CLKO function on RA6, port function on RA7
  1398                           ;	Fail-Safe Clock Monitor Enable bit
  1399                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1400                           ;	Internal/External Oscillator Switchover bit
  1401                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1402  300001                     	org	3145729
  1403  300001  09                 	db	9
  1404                           
  1405                           ;Config register CONFIG2L @ 0x300002
  1406                           ;	Power-up Timer Enable bit
  1407                           ;	PWRT = OFF, PWRT disabled
  1408                           ;	Brown-out Reset Enable bits
  1409                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  1410                           ;	Brown Out Reset Voltage bits
  1411                           ;	BORV = 3, Minimum setting
  1412  300002                     	org	3145730
  1413  300002  1F                 	db	31
  1414                           
  1415                           ;Config register CONFIG2H @ 0x300003
  1416                           ;	Watchdog Timer Enable bit
  1417                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1418                           ;	Watchdog Timer Postscale Select bits
  1419                           ;	WDTPS = 32768, 1:32768
  1420  300003                     	org	3145731
  1421  300003  1E                 	db	30
  1422                           
  1423                           ; Padding undefined space
  1424  300004                     	org	3145732
  1425  300004  FF                 	db	255
  1426                           
  1427                           ;Config register CONFIG3H @ 0x300005
  1428                           ;	CCP2 MUX bit
  1429                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  1430                           ;	PORTB A/D Enable bit
  1431                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  1432                           ;	Low-Power Timer1 Oscillator Enable bit
  1433                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1434                           ;	MCLR Pin Enable bit
  1435                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1436  300005                     	org	3145733
  1437  300005  83                 	db	131
  1438                           
  1439                           ;Config register CONFIG4L @ 0x300006
  1440                           ;	Stack Full/Underflow Reset Enable bit
  1441                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1442                           ;	Single-Supply ICSP Enable bit
  1443                           ;	LVP = ON, Single-Supply ICSP enabled
  1444                           ;	Extended Instruction Set Enable bit
  1445                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1446                           ;	Background Debugger Enable bit
  1447                           ;	DEBUG = 0x1, unprogrammed default
  1448  300006                     	org	3145734
  1449  300006  85                 	db	133
  1450                           
  1451                           ; Padding undefined space
  1452  300007                     	org	3145735
  1453  300007  FF                 	db	255
  1454                           
  1455                           ;Config register CONFIG5L @ 0x300008
  1456                           ;	Code Protection bit
  1457                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  1458                           ;	Code Protection bit
  1459                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  1460                           ;	Code Protection bit
  1461                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  1462                           ;	Code Protection bit
  1463                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  1464  300008                     	org	3145736
  1465  300008  0F                 	db	15
  1466                           
  1467                           ;Config register CONFIG5H @ 0x300009
  1468                           ;	Boot Block Code Protection bit
  1469                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1470                           ;	Data EEPROM Code Protection bit
  1471                           ;	CPD = OFF, Data EEPROM not code-protected
  1472  300009                     	org	3145737
  1473  300009  C0                 	db	192
  1474                           
  1475                           ;Config register CONFIG6L @ 0x30000A
  1476                           ;	Write Protection bit
  1477                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  1478                           ;	Write Protection bit
  1479                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  1480                           ;	Write Protection bit
  1481                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  1482                           ;	Write Protection bit
  1483                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  1484  30000A                     	org	3145738
  1485  30000A  0F                 	db	15
  1486                           
  1487                           ;Config register CONFIG6H @ 0x30000B
  1488                           ;	Configuration Register Write Protection bit
  1489                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1490                           ;	Boot Block Write Protection bit
  1491                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  1492                           ;	Data EEPROM Write Protection bit
  1493                           ;	WRTD = OFF, Data EEPROM not write-protected
  1494  30000B                     	org	3145739
  1495  30000B  E0                 	db	224
  1496                           
  1497                           ;Config register CONFIG7L @ 0x30000C
  1498                           ;	Table Read Protection bit
  1499                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  1500                           ;	Table Read Protection bit
  1501                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  1502                           ;	Table Read Protection bit
  1503                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  1504                           ;	Table Read Protection bit
  1505                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1506  30000C                     	org	3145740
  1507  30000C  0F                 	db	15
  1508                           
  1509                           ;Config register CONFIG7H @ 0x30000D
  1510                           ;	Boot Block Table Read Protection bit
  1511                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1512  30000D                     	org	3145741
  1513  30000D  40                 	db	64
  1514                           tosu	equ	0xFFF
  1515                           tosh	equ	0xFFE
  1516                           tosl	equ	0xFFD
  1517                           stkptr	equ	0xFFC
  1518                           pclatu	equ	0xFFB
  1519                           pclath	equ	0xFFA
  1520                           pcl	equ	0xFF9
  1521                           tblptru	equ	0xFF8
  1522                           tblptrh	equ	0xFF7
  1523                           tblptrl	equ	0xFF6
  1524                           tablat	equ	0xFF5
  1525                           prodh	equ	0xFF4
  1526                           prodl	equ	0xFF3
  1527                           indf0	equ	0xFEF
  1528                           postinc0	equ	0xFEE
  1529                           postdec0	equ	0xFED
  1530                           preinc0	equ	0xFEC
  1531                           plusw0	equ	0xFEB
  1532                           fsr0h	equ	0xFEA
  1533                           fsr0l	equ	0xFE9
  1534                           wreg	equ	0xFE8
  1535                           indf1	equ	0xFE7
  1536                           postinc1	equ	0xFE6
  1537                           postdec1	equ	0xFE5
  1538                           preinc1	equ	0xFE4
  1539                           plusw1	equ	0xFE3
  1540                           fsr1h	equ	0xFE2
  1541                           fsr1l	equ	0xFE1
  1542                           bsr	equ	0xFE0
  1543                           indf2	equ	0xFDF
  1544                           postinc2	equ	0xFDE
  1545                           postdec2	equ	0xFDD
  1546                           preinc2	equ	0xFDC
  1547                           plusw2	equ	0xFDB
  1548                           fsr2h	equ	0xFDA
  1549                           fsr2l	equ	0xFD9
  1550                           status	equ	0xFD8

Data Sizes:
    Strings     21
    Constant    10
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     51      65
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_2(CODE[11]), STR_1(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> main@_adc_str(COMRAM[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    UART_send_string@st_pt	PTR unsigned char  size(2) Largest target is 20
		 -> main@_adc_str(COMRAM[20]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _UART_send_string->_UART_send_char

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                46    46      0    1816
                                             25 COMRAM    26    26      0
                      _ADC_intialize
                      _CLK_intialize
                    _PORT_Initialize
                           _Read_ADC
                          _UART_Init
                   _UART_send_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             22    16      6    1316
                                             12 COMRAM    13     7      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _UART_send_string                                     2     0      2     212
                                              1 COMRAM     2     0      2
                     _UART_send_char
 ---------------------------------------------------------------------------------
 (2) _UART_send_char                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Read_ADC                                             7     5      2      68
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _PORT_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CLK_intialize                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_intialize                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_intialize
   _CLK_intialize
   _PORT_Initialize
   _Read_ADC
   _UART_Init
   _UART_send_string
     _UART_send_char
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     33      41       1       51.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      41      15        0.0%
DATA                 0      0      41       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Wed Feb 10 10:08:33 2021

                        _i 0040                         l25 0A50                         l28 0A56  
                       l72 0A30                         l66 0A44                         l69 0A1E  
                       l85 09E2                         u10 0A2C                         u11 0A28  
           ?_CLK_intialize 0001                        l110 0A04                        l115 0986  
                      l118 09B2                        l143 0784                        l137 06EA  
                      _ADC 0034                        l632 08EC                        l625 08E4  
                      l642 0950                        l635 0948                        l933 0A46  
                      l951 0A00                        l943 09E4                        l935 0A4A  
                      l953 0A02                        l945 09E8                        l937 0A52  
                      l947 09F0                        l891 0A1E                        l949 09F2  
                      l893 0A2C                        u200 08B2                        u201 08AE  
                      u210 08CE                        u211 08CA                        u220 0900  
                      u300 06EA                        u221 08FC                        u301 06E6  
                      u230 091E                        u310 0756                        u231 091A  
                      u311 0752                        u240 0934                        u320 0778  
                      u241 0930                        u321 0774                        u250 0964  
                      u330 09E2                        u251 0960                        u331 09DE  
                      u260 097C                        u261 0978                        u270 0994  
                      u190 0894                        u271 0990                        u191 0890  
                      u280 0640                        u281 063C                        u290 06D2  
                      u291 06CE                        u347 07B0                        u357 07C8  
                      u367 0816                        u377 0864                        wreg 000FE8  
                     l1101 091E                       l1111 0A3C                       l1103 0934  
                     l1121 097C                       l1113 0954                       l1105 093C  
                     l1201 07D4                       l1123 0984                       l1115 0954  
                     l1107 0942                       l1131 0622                       l1211 0824  
                     l1203 07D6                       l1125 0994                       l1117 0964  
                     l1109 0A32                       l1141 065C                       l1133 062E  
                     l1213 0832                       l1205 07E4                       l1127 09AA  
                     l1119 096C                       l1071 087A                       l1151 06A4  
                     l1135 0640                       l1215 084E                       l1207 0800  
                     l1081 08B2                       l1073 0882                       l1161 06D6  
                     l1145 0664                       l1137 064C                       l1217 085A  
                     l1209 080C                       l1091 08DE                       l1083 08B8  
                     l1075 0894                       l1171 0744                       l1163 06D8  
                     l1147 068C                       l1139 0654                       l1181 09B8  
                     l1085 08CE                       l1077 089C                       l1093 08EE  
                     l1165 06F2                       l1157 06A8                       l1149 069C  
                     l1173 0756                       l1183 09C6                       l1087 08D6  
                     l1079 08A4                       l1095 0900                       l1167 0734  
                     l1175 0778                       l1191 0796                       l1185 09CA  
                     l1089 08D8                       l1097 0908                       l1169 0740  
                     l1193 07A2                       l1179 09B4                       l1099 0910  
                     l1195 07A6                       l1187 0786                       l1197 07BC  
                     l1189 078E                       l1199 07BE                       STR_1 0616  
                     STR_2 060B                       _RCIF 007CF5                       _TXIF 007CF4  
                     _main 0786               main@_adc_str 001C                       fsr2h 000FDA  
                     indf2 000FDF                       fsr2l 000FD9                       prodh 000FF4  
                     prodl 000FF3                       start 0000               ___param_bank 000000  
__size_of_UART_send_string 0030                      ?_main 0001                      _LATA4 007C4C  
                    _LATA5 007C4D                      _LATA6 007C4E            __end_of___lwdiv 08EE  
          __end_of___lwmod 0952                      _RCREG 000FAE                      _SPBRG 000FAF  
                    _TXREG 000FAD         __size_of_UART_Init 0014            __end_of_dpowers 060B  
                    _value 0038               main@temp_adc 0030                      tablat 000FF5  
                    status 000FD8            __end_of_sprintf 0786          ??_PORT_Initialize 0001  
          __initialization 0A06               __end_of_main 087A           __end_of_Read_ADC 09B4  
          ??_CLK_intialize 0001                     ??_main 001A              __activetblptr 000002  
                   _ADRESH 000FC4                     _ADRESL 000FC3                     _SPBRGH 000FB0  
                   _TRISA1 007C91                     _TRISA2 007C92                     _TRISB1 007C99  
                   _TRISC6 007CA6                     _TRISC7 007CA7              main@humid_adc 0032  
        __end_of_UART_Init 0A46            Read_ADC@channel 0007                  ??___lwdiv 0005  
                ??___lwmod 000C                     clear_0 0A0C               __mediumconst 0000  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
                ??_sprintf 0013                 __accesstop 0080    __end_of__initialization 0A12  
            ___rparam_used 000001             __pcstackCOMRAM 0001           _UART_send_string 09B4  
                ?_Read_ADC 0001     __size_of_ADC_intialize 0022            _PORT_Initialize 0A52  
  __size_of_UART_send_char 0016                 ??_Read_ADC 0003                    __Hparam 0000  
                  __Lparam 0000                    ___lwdiv 087A                    ___lwmod 08EE  
             __psmallconst 0600                    __pcinit 0A06              _ADC_intialize 09E4  
                  __ramtop 0600                    __ptext0 0786                    __ptext1 0622  
                  __ptext2 08EE                    __ptext3 087A                    __ptext4 09B4  
                  __ptext5 0A1C                    __ptext6 0A32                    __ptext7 0952  
                  __ptext8 0A52                    __ptext9 0A46                    _dpowers 0601  
                  _sprintf 0622                    _voltage 003C       end_of_initialization 0A12  
            __Lmediumconst 0000                  _RCSTAbits 000FAB                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE             ?_ADC_intialize 0001  
                _UART_Init 0A32    __end_of_PORT_Initialize 0A58      __end_of_CLK_intialize 0A52  
       UART_Init@baud_rate 0001   __end_of_UART_send_string 09E4                  _TXSTAbits 000FAC  
              _BAUDCONbits 000FB8                 ?_UART_Init 0001        start_initialization 0A06  
           _UART_send_char 0A1C          __size_of_Read_ADC 0062            ??_ADC_intialize 0001  
           Read_ADC@result 0005           ?_PORT_Initialize 0001     __end_of_UART_send_char 0A32  
              __pbssCOMRAM 0034                sprintf@flag 0013                sprintf@prec 0018  
         ___lwdiv@dividend 0001                   ?___lwdiv 0001                   ?___lwmod 0008  
              ??_UART_Init 0003           UART_send_char@bt 0001                __smallconst 0600  
          ?_UART_send_char 0001           ___lwdiv@quotient 0005                   ?_sprintf 000D  
               _ADCON0bits 000FC2                 _ADCON1bits 000FC1                 _ADCON2bits 000FC0  
    UART_send_string@st_pt 0002          ?_UART_send_string 0002                   _Read_ADC 0952  
       ??_UART_send_string 0004                   __Hrparam 0000                   __Lrparam 0000  
         __size_of___lwdiv 0074           __size_of___lwmod 0064                 sprintf@val 0016  
          ___lwdiv@divisor 0003            ___lwdiv@counter 0007                   __ptext10 09E4  
         __size_of_sprintf 0164              __size_of_main 00F4     __size_of_CLK_intialize 000C  
               _INTCONbits 000FF2                  sprintf@ap 0014                  sprintf@sp 000D  
         ___lwmod@dividend 0008                 _OSCCONbits 000FD3           ??_UART_send_char 0001  
    __end_of_ADC_intialize 0A06                   sprintf@c 0019                   sprintf@f 000F  
            _CLK_intialize 0A46            ___lwmod@divisor 000A            ___lwmod@counter 000C  
 __size_of_PORT_Initialize 0006  
